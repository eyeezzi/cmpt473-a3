1:EVR:<METHOD_INVOCATION(org.jgrapht.EdgeFactory<V,E>)>:<DEFAULT>:org.jgrapht.Graphs@addEdge(org.jgrapht.Graph<V,E>,V,V,double):79:g.getEdgeFactory() |==> null
2:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.Graphs@addEdge(org.jgrapht.Graph<V,E>,V,V,double):80:ef.createEdge(sourceVertex, targetVertex) |==> null
3:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addEdge(org.jgrapht.Graph<V,E>,V,V,double):86:((WeightedGraph<V, E>)g).setEdgeWeight(e, weight) |==> <NO-OP>
4:COR:g.addEdge(sourceVertex, targetVertex, e):TRUE:org.jgrapht.Graphs@addEdge(org.jgrapht.Graph<V,E>,V,V,double):88:g.addEdge(sourceVertex, targetVertex, e) |==> false
5:COR:g.addEdge(sourceVertex, targetVertex, e):FALSE:org.jgrapht.Graphs@addEdge(org.jgrapht.Graph<V,E>,V,V,double):88:g.addEdge(sourceVertex, targetVertex, e) |==> true
6:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,V,V):108:g.addVertex(sourceVertex) |==> <NO-OP>
7:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,V,V):109:g.addVertex(targetVertex) |==> <NO-OP>
8:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,V,V):111:g.addEdge(sourceVertex, targetVertex) |==> null
9:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,E):131:sourceGraph.getEdgeSource(edge) |==> null
10:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,E):132:sourceGraph.getEdgeTarget(edge) |==> null
11:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,E):134:targetGraph.addVertex(sourceVertex) |==> <NO-OP>
12:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,E):135:targetGraph.addVertex(targetVertex) |==> <NO-OP>
13:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,E):137:targetGraph.addEdge(sourceVertex, targetVertex, edge) |==> false
14:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,V,V,double):160:g.addVertex(sourceVertex) |==> <NO-OP>
15:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,V,V,double):161:g.addVertex(targetVertex) |==> <NO-OP>
16:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.Graphs@addEdgeWithVertices(org.jgrapht.Graph<V,E>,V,V,double):163:addEdge(g, sourceVertex, targetVertex, weight) |==> null
17:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.Graphs@addGraph(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>):187:addAllVertices(destination, source.vertexSet()) |==> false
18:STD:<ASSIGN>:<NO-OP>:org.jgrapht.Graphs@addGraph(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>):188:modified |= addAllEdges(destination, source, source.edgeSet()) |==> <NO-OP>
19:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.Graphs@addGraph(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>):190:modified |==> false
20:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addGraphReversed(org.jgrapht.DirectedGraph<? super V,? super E>,org.jgrapht.DirectedGraph<V,E>):211:addAllVertices(destination, source.vertexSet()) |==> <NO-OP>
21:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addGraphReversed(org.jgrapht.DirectedGraph<? super V,? super E>,org.jgrapht.DirectedGraph<V,E>):214:destination.addEdge(source.getEdgeTarget(edge), source.getEdgeSource(edge)) |==> <NO-OP>
22:LVR:FALSE:TRUE:org.jgrapht.Graphs@addAllEdges(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>,java.util.Collection<? extends E>):238:false |==> true
23:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.Graphs@addAllEdges(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>,java.util.Collection<? extends E>):241:source.getEdgeSource(e) |==> null
24:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.Graphs@addAllEdges(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>,java.util.Collection<? extends E>):242:source.getEdgeTarget(e) |==> null
25:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addAllEdges(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>,java.util.Collection<? extends E>):243:destination.addVertex(s) |==> <NO-OP>
26:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@addAllEdges(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>,java.util.Collection<? extends E>):244:destination.addVertex(t) |==> <NO-OP>
27:STD:<ASSIGN>:<NO-OP>:org.jgrapht.Graphs@addAllEdges(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>,java.util.Collection<? extends E>):245:modified |= destination.addEdge(s, t, e) |==> <NO-OP>
28:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.Graphs@addAllEdges(org.jgrapht.Graph<? super V,? super E>,org.jgrapht.Graph<V,E>,java.util.Collection<? extends E>):248:modified |==> false
29:LVR:FALSE:TRUE:org.jgrapht.Graphs@addAllVertices(org.jgrapht.Graph<? super V,? super E>,java.util.Collection<? extends V>):272:false |==> true
30:STD:<ASSIGN>:<NO-OP>:org.jgrapht.Graphs@addAllVertices(org.jgrapht.Graph<? super V,? super E>,java.util.Collection<? extends V>):275:modified |= destination.addVertex(v) |==> <NO-OP>
31:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.Graphs@addAllVertices(org.jgrapht.Graph<? super V,? super E>,java.util.Collection<? extends V>):278:modified |==> false
32:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.Graphs@neighborListOf(org.jgrapht.Graph<V,E>,V):295:new ArrayList<V>() |==> null
33:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@neighborListOf(org.jgrapht.Graph<V,E>,V):298:neighbors.add(getOppositeVertex(g, e, vertex)) |==> <NO-OP>
34:EVR:<IDENTIFIER(java.util.List<V>)>:<DEFAULT>:org.jgrapht.Graphs@neighborListOf(org.jgrapht.Graph<V,E>,V):301:neighbors |==> null
35:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.Graphs@predecessorListOf(org.jgrapht.DirectedGraph<V,E>,V):319:new ArrayList<V>() |==> null
36:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.Graphs@predecessorListOf(org.jgrapht.DirectedGraph<V,E>,V):320:g.incomingEdgesOf(vertex) |==> null
37:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@predecessorListOf(org.jgrapht.DirectedGraph<V,E>,V):323:predecessors.add(getOppositeVertex(g, e, vertex)) |==> <NO-OP>
38:EVR:<IDENTIFIER(java.util.List<V>)>:<DEFAULT>:org.jgrapht.Graphs@predecessorListOf(org.jgrapht.DirectedGraph<V,E>,V):326:predecessors |==> null
39:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.Graphs@successorListOf(org.jgrapht.DirectedGraph<V,E>,V):344:new ArrayList<V>() |==> null
40:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.Graphs@successorListOf(org.jgrapht.DirectedGraph<V,E>,V):345:g.outgoingEdgesOf(vertex) |==> null
41:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@successorListOf(org.jgrapht.DirectedGraph<V,E>,V):348:successors.add(getOppositeVertex(g, e, vertex)) |==> <NO-OP>
42:EVR:<IDENTIFIER(java.util.List<V>)>:<DEFAULT>:org.jgrapht.Graphs@successorListOf(org.jgrapht.DirectedGraph<V,E>,V):351:successors |==> null
43:EVR:<NEW_CLASS(org.jgrapht.graph.AsUndirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.Graphs@undirectedGraph(org.jgrapht.Graph<V,E>):372:new AsUndirectedGraph<V, E>((DirectedGraph<V, E>)g) |==> null
44:EVR:<TYPE_CAST(org.jgrapht.UndirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.Graphs@undirectedGraph(org.jgrapht.Graph<V,E>):374:(UndirectedGraph<V, E>)g |==> null
45:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.Graphs@testIncidence(org.jgrapht.Graph<V,E>,E,V):392:(g.getEdgeSource(e).equals(v)) || (g.getEdgeTarget(e).equals(v)) |==> (g.getEdgeSource(e).equals(v)) != (g.getEdgeTarget(e).equals(v))
46:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.Graphs@testIncidence(org.jgrapht.Graph<V,E>,E,V):392:(g.getEdgeSource(e).equals(v)) || (g.getEdgeTarget(e).equals(v)) |==> (g.getEdgeSource(e).equals(v))
47:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.Graphs@testIncidence(org.jgrapht.Graph<V,E>,E,V):393:(g.getEdgeSource(e).equals(v)) || (g.getEdgeTarget(e).equals(v)) |==> (g.getEdgeTarget(e).equals(v))
48:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.Graphs@testIncidence(org.jgrapht.Graph<V,E>,E,V):393:(g.getEdgeSource(e).equals(v)) || (g.getEdgeTarget(e).equals(v)) |==> true
49:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.Graphs@getOppositeVertex(org.jgrapht.Graph<V,E>,E,V):407:g.getEdgeSource(e) |==> null
50:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.Graphs@getOppositeVertex(org.jgrapht.Graph<V,E>,E,V):408:g.getEdgeTarget(e) |==> null
51:COR:v.equals(source):TRUE:org.jgrapht.Graphs@getOppositeVertex(org.jgrapht.Graph<V,E>,E,V):409:v.equals(source) |==> false
52:COR:v.equals(source):FALSE:org.jgrapht.Graphs@getOppositeVertex(org.jgrapht.Graph<V,E>,E,V):409:v.equals(source) |==> true
53:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.Graphs@getOppositeVertex(org.jgrapht.Graph<V,E>,E,V):410:target |==> null
54:COR:v.equals(target):TRUE:org.jgrapht.Graphs@getOppositeVertex(org.jgrapht.Graph<V,E>,E,V):411:v.equals(target) |==> false
55:COR:v.equals(target):FALSE:org.jgrapht.Graphs@getOppositeVertex(org.jgrapht.Graph<V,E>,E,V):411:v.equals(target) |==> true
56:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.Graphs@getOppositeVertex(org.jgrapht.Graph<V,E>,E,V):412:source |==> null
57:EVR:<METHOD_INVOCATION(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.Graphs@getPathVertexList(org.jgrapht.GraphPath<V,E>):427:path.getGraph() |==> null
58:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.Graphs@getPathVertexList(org.jgrapht.GraphPath<V,E>):428:new ArrayList<V>() |==> null
59:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.Graphs@getPathVertexList(org.jgrapht.GraphPath<V,E>):429:path.getStartVertex() |==> null
60:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@getPathVertexList(org.jgrapht.GraphPath<V,E>):430:list.add(v) |==> <NO-OP>
61:STD:<ASSIGN>:<NO-OP>:org.jgrapht.Graphs@getPathVertexList(org.jgrapht.GraphPath<V,E>):432:v = getOppositeVertex(g, e, v) |==> <NO-OP>
62:STD:<CALL>:<NO-OP>:org.jgrapht.Graphs@getPathVertexList(org.jgrapht.GraphPath<V,E>):433:list.add(v) |==> <NO-OP>
63:EVR:<IDENTIFIER(java.util.List<V>)>:<DEFAULT>:org.jgrapht.Graphs@getPathVertexList(org.jgrapht.GraphPath<V,E>):435:list |==> null
64:STD:<ASSIGN>:<NO-OP>:org.jgrapht.event.GraphEdgeChangeEvent@<init>(java.lang.Object,int,E,V,V):133:this.edge = edge |==> <NO-OP>
65:STD:<ASSIGN>:<NO-OP>:org.jgrapht.event.GraphEdgeChangeEvent@<init>(java.lang.Object,int,E,V,V):134:this.edgeSource = edgeSource |==> <NO-OP>
66:STD:<ASSIGN>:<NO-OP>:org.jgrapht.event.GraphEdgeChangeEvent@<init>(java.lang.Object,int,E,V,V):135:this.edgeTarget = edgeTarget |==> <NO-OP>
67:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.event.GraphEdgeChangeEvent@getEdge():147:edge |==> null
68:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.event.GraphEdgeChangeEvent@getEdgeSource():157:edgeSource |==> null
69:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.event.GraphEdgeChangeEvent@getEdgeTarget():167:edgeTarget |==> null
70:STD:<ASSIGN>:<NO-OP>:org.jgrapht.event.GraphChangeEvent@<init>(java.lang.Object,int):74:this.type = type |==> <NO-OP>
71:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.event.GraphChangeEvent@getType():86:type |==> 0
72:STD:<ASSIGN>:<NO-OP>:org.jgrapht.event.GraphVertexChangeEvent@<init>(java.lang.Object,int,V):100:this.vertex = vertex |==> <NO-OP>
73:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.event.GraphVertexChangeEvent@getVertex():112:vertex |==> null
74:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):96:this.vertex = Graphs.getOppositeVertex(graph, edge, pathElement.getVertex()) |==> <NO-OP>
75:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):101:this.prevEdge = edge |==> <NO-OP>
76:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):102:this.prevPathElement = pathElement |==> <NO-OP>
77:LVR:POS:0:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):104:1 |==> 0
78:LVR:POS:NEG:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):104:1 |==> -1
79:AOR:+(int,int):%(int,int):org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):104:pathElement.getHopCount() + 1 |==> pathElement.getHopCount() % 1
80:AOR:+(int,int):*(int,int):org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):104:pathElement.getHopCount() + 1 |==> pathElement.getHopCount() * 1
81:AOR:+(int,int):-(int,int):org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):104:pathElement.getHopCount() + 1 |==> pathElement.getHopCount() - 1
82:AOR:+(int,int):/(int,int):org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):104:pathElement.getHopCount() + 1 |==> pathElement.getHopCount() / 1
83:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.AbstractPathElement<V,E>,E):104:this.nHops = pathElement.getHopCount() + 1 |==> <NO-OP>
84:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.alg.AbstractPathElement<V,E>):114:this.nHops = original.nHops |==> <NO-OP>
85:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.alg.AbstractPathElement<V,E>):115:this.prevEdge = original.prevEdge |==> <NO-OP>
86:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.alg.AbstractPathElement<V,E>):116:this.prevPathElement = original.prevPathElement |==> <NO-OP>
87:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(org.jgrapht.alg.AbstractPathElement<V,E>):117:this.vertex = original.vertex |==> <NO-OP>
88:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(V):127:this.vertex = vertex |==> <NO-OP>
89:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(V):128:this.prevEdge = null |==> <NO-OP>
90:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(V):129:this.prevPathElement = null |==> <NO-OP>
91:LVR:0:POS:org.jgrapht.alg.AbstractPathElement@<init>(V):131:0 |==> 1
92:LVR:0:NEG:org.jgrapht.alg.AbstractPathElement@<init>(V):131:0 |==> -1
93:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@<init>(V):131:this.nHops = 0 |==> <NO-OP>
94:EVR:<NEW_CLASS(java.util.ArrayList<E>)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElement@createEdgeListPath():143:new ArrayList<E>() |==> null
95:EVR:<IDENTIFIER(org.jgrapht.alg.AbstractPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElement@createEdgeListPath():144:this |==> null
96:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.AbstractPathElement@createEdgeListPath():147:pathElement.getPrevEdge() != null |==> true
97:STD:<CALL>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@createEdgeListPath():148:path.add(pathElement.getPrevEdge()) |==> <NO-OP>
98:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@createEdgeListPath():150:pathElement = pathElement.getPrevPathElement() |==> <NO-OP>
99:STD:<CALL>:<NO-OP>:org.jgrapht.alg.AbstractPathElement@createEdgeListPath():153:Collections.reverse(path) |==> <NO-OP>
100:EVR:<IDENTIFIER(java.util.List<E>)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElement@createEdgeListPath():155:path |==> null
101:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElement@getHopCount():165:this.nHops |==> 0
102:EVR:<MEMBER_SELECT(E)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElement@getPrevEdge():175:this.prevEdge |==> null
103:EVR:<MEMBER_SELECT(org.jgrapht.alg.AbstractPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElement@getPrevPathElement():185:this.prevPathElement |==> null
104:EVR:<MEMBER_SELECT(V)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElement@getVertex():195:this.vertex |==> null
105:EVR:<NEW_CLASS(java.util.ArrayList<T>)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElementList:68:new ArrayList<T>() |==> null
106:LVR:0:POS:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):96:0 |==> 1
107:LVR:0:NEG:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):96:0 |==> -1
108:ROR:<=(int,int):<(int,int):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):96:maxSize <= 0 |==> maxSize < 0
109:ROR:<=(int,int):==(int,int):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):96:maxSize <= 0 |==> maxSize == 0
110:ROR:<=(int,int):TRUE(int,int):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):96:maxSize <= 0 |==> true
111:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):99:elementList == null |==> false
112:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):102:edge == null |==> false
113:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):106:this.graph = graph |==> <NO-OP>
114:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):107:this.maxSize = maxSize |==> <NO-OP>
115:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.AbstractPathElementList<V,E,T>,E):108:this.vertex = Graphs.getOppositeVertex(graph, edge, elementList.getVertex()) |==> <NO-OP>
116:LVR:0:POS:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):129:0 |==> 1
117:LVR:0:NEG:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):129:0 |==> -1
118:ROR:<=(int,int):<(int,int):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):129:maxSize <= 0 |==> maxSize < 0
119:ROR:<=(int,int):==(int,int):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):129:maxSize <= 0 |==> maxSize == 0
120:ROR:<=(int,int):TRUE(int,int):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):129:maxSize <= 0 |==> true
121:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):132:pathElement == null |==> false
122:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):135:pathElement.getPrevEdge() != null |==> true
123:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):139:this.graph = graph |==> <NO-OP>
124:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):140:this.maxSize = maxSize |==> <NO-OP>
125:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):141:this.vertex = pathElement.getVertex() |==> <NO-OP>
126:STD:<CALL>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,T):143:this.pathElements.add(pathElement) |==> <NO-OP>
127:LVR:0:POS:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,V):156:0 |==> 1
128:LVR:0:NEG:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,V):156:0 |==> -1
129:ROR:<=(int,int):<(int,int):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,V):156:maxSize <= 0 |==> maxSize < 0
130:ROR:<=(int,int):==(int,int):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,V):156:maxSize <= 0 |==> maxSize == 0
131:ROR:<=(int,int):TRUE(int,int):org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,V):156:maxSize <= 0 |==> true
132:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,V):160:this.graph = graph |==> <NO-OP>
133:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,V):161:this.maxSize = maxSize |==> <NO-OP>
134:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.AbstractPathElementList@<init>(org.jgrapht.Graph<V,E>,int,V):162:this.vertex = vertex |==> <NO-OP>
135:EVR:<METHOD_INVOCATION(T)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElementList@get(int):173:this.pathElements.get(index) |==> null
136:EVR:<MEMBER_SELECT(V)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElementList@getVertex():181:this.vertex |==> null
137:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.AbstractPathElementList@size():189:this.pathElements.size() |==> 0
138:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator:77:new ArrayList<V>() |==> null
139:LVR:FALSE:TRUE:org.jgrapht.alg.BellmanFordIterator:81:false |==> true
140:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@<init>(org.jgrapht.Graph<V,E>,V,double):103:assertBellmanFordIterator(graph, startVertex) |==> <NO-OP>
141:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@<init>(org.jgrapht.Graph<V,E>,V,double):105:this.graph = graph |==> <NO-OP>
142:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@<init>(org.jgrapht.Graph<V,E>,V,double):106:this.startVertex = startVertex |==> <NO-OP>
143:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@<init>(org.jgrapht.Graph<V,E>,V,double):107:this.epsilon = epsilon |==> <NO-OP>
144:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@getPathElement(V):122:getSeenData(endVertex) |==> null
145:COR:this.startVertexEncountered:TRUE:org.jgrapht.alg.BellmanFordIterator@hasNext():131:this.startVertexEncountered |==> false
146:COR:this.startVertexEncountered:FALSE:org.jgrapht.alg.BellmanFordIterator@hasNext():131:this.startVertexEncountered |==> true
147:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@hasNext():132:encounterStartVertex() |==> <NO-OP>
148:EVR:<LOGICAL_COMPLEMENT(boolean)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@hasNext():135:!(this.prevImprovedVertices.isEmpty()) |==> false
149:COR:this.startVertexEncountered:TRUE:org.jgrapht.alg.BellmanFordIterator@next():146:this.startVertexEncountered |==> false
150:COR:this.startVertexEncountered:FALSE:org.jgrapht.alg.BellmanFordIterator@next():146:this.startVertexEncountered |==> true
151:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@next():147:encounterStartVertex() |==> <NO-OP>
152:COR:hasNext():TRUE:org.jgrapht.alg.BellmanFordIterator@next():150:hasNext() |==> false
153:COR:hasNext():FALSE:org.jgrapht.alg.BellmanFordIterator@next():150:hasNext() |==> true
154:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@next():151:new ArrayList<V>() |==> null
155:LVR:POS:0:org.jgrapht.alg.BellmanFordIterator@next():152:1 |==> 0
156:LVR:POS:NEG:org.jgrapht.alg.BellmanFordIterator@next():152:1 |==> -1
157:AOR:-(int,int):%(int,int):org.jgrapht.alg.BellmanFordIterator@next():152:this.prevImprovedVertices.size() - 1 |==> this.prevImprovedVertices.size() % 1
158:AOR:-(int,int):*(int,int):org.jgrapht.alg.BellmanFordIterator@next():152:this.prevImprovedVertices.size() - 1 |==> this.prevImprovedVertices.size() * 1
159:AOR:-(int,int):+(int,int):org.jgrapht.alg.BellmanFordIterator@next():152:this.prevImprovedVertices.size() - 1 |==> this.prevImprovedVertices.size() + 1
160:AOR:-(int,int):/(int,int):org.jgrapht.alg.BellmanFordIterator@next():152:this.prevImprovedVertices.size() - 1 |==> this.prevImprovedVertices.size() / 1
161:LVR:0:POS:org.jgrapht.alg.BellmanFordIterator@next():152:0 |==> 1
162:LVR:0:NEG:org.jgrapht.alg.BellmanFordIterator@next():152:0 |==> -1
163:ROR:>=(int,int):==(int,int):org.jgrapht.alg.BellmanFordIterator@next():152:i >= 0 |==> i == 0
164:ROR:>=(int,int):>(int,int):org.jgrapht.alg.BellmanFordIterator@next():152:i >= 0 |==> i > 0
165:ROR:>=(int,int):TRUE(int,int):org.jgrapht.alg.BellmanFordIterator@next():152:i >= 0 |==> true
166:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@next():153:this.prevImprovedVertices.get(i) |==> null
167:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@next():155:edgesOfIterator(vertex) |==> null
168:EVR:<METHOD_INVOCATION(capture#293 of ? extends E)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@next():158:iter.next() |==> null
169:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@next():160:Graphs.getOppositeVertex(graph, edge, vertex) |==> null
170:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.BellmanFordIterator@next():164:getPathElement(oppositeVertex) != null |==> true
171:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@next():166:relaxVertexAgain(oppositeVertex, edge) |==> false
172:COR:relaxed:TRUE:org.jgrapht.alg.BellmanFordIterator@next():167:relaxed |==> false
173:COR:relaxed:FALSE:org.jgrapht.alg.BellmanFordIterator@next():167:relaxed |==> true
174:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@next():168:improvedVertices.add(oppositeVertex) |==> <NO-OP>
175:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@next():171:relaxVertex(oppositeVertex, edge) |==> <NO-OP>
176:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@next():172:improvedVertices.add(oppositeVertex) |==> <NO-OP>
177:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@next():177:savePassData(improvedVertices) |==> <NO-OP>
178:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@next():179:return improvedVertices; |==> <NO-OP>
179:LVR:0:POS:org.jgrapht.alg.BellmanFordIterator@assertValidEdge(E):204:0 |==> 1
180:LVR:0:NEG:org.jgrapht.alg.BellmanFordIterator@assertValidEdge(E):204:0 |==> -1
181:ROR:<(double,double):!=(double,double):org.jgrapht.alg.BellmanFordIterator@assertValidEdge(E):204:graph.getEdgeWeight(edge) < 0 |==> graph.getEdgeWeight(edge) != 0
182:ROR:<(double,double):<=(double,double):org.jgrapht.alg.BellmanFordIterator@assertValidEdge(E):204:graph.getEdgeWeight(edge) < 0 |==> graph.getEdgeWeight(edge) <= 0
183:ROR:<(double,double):FALSE(double,double):org.jgrapht.alg.BellmanFordIterator@assertValidEdge(E):204:graph.getEdgeWeight(edge) < 0 |==> false
184:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@calculatePathCost(V,E):223:Graphs.getOppositeVertex(graph, edge, vertex) |==> null
185:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@calculatePathCost(V,E):227:getPrevSeenData(oppositeVertex) |==> null
186:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@calculatePathCost(V,E):229:graph.getEdgeWeight(edge) |==> 0.0
187:COR:oppositePrevData.getVertex().equals(this.startVertex):TRUE:org.jgrapht.alg.BellmanFordIterator@calculatePathCost(V,E):231:oppositePrevData.getVertex().equals(this.startVertex) |==> false
188:COR:oppositePrevData.getVertex().equals(this.startVertex):FALSE:org.jgrapht.alg.BellmanFordIterator@calculatePathCost(V,E):231:oppositePrevData.getVertex().equals(this.startVertex) |==> true
189:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@calculatePathCost(V,E):234:pathCost += oppositePrevData.getCost() |==> <NO-OP>
190:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@calculatePathCost(V,E):237:pathCost |==> 0.0
191:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@edgesOfIterator(V):252:((DirectedGraph<V, E>)this.graph).outgoingEdgesOf(vertex).iterator() |==> null
192:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@edgesOfIterator(V):254:this.graph.edgesOf(vertex).iterator() |==> null
193:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@getPrevSeenData(V):268:this.prevVertexData.get(vertex) |==> null
194:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@getSeenData(V):281:this.vertexData.get(vertex) |==> null
195:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@isSeenVertex(V):293:this.vertexData.containsKey(vertex) |==> false
196:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.BellmanFordIterator@putPrevSeenData(V,org.jgrapht.alg.BellmanFordPathElement<V,E>):306:this.prevVertexData == null |==> false
197:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@putPrevSeenData(V,org.jgrapht.alg.BellmanFordPathElement<V,E>):307:this.prevVertexData = new HashMap<V, BellmanFordPathElement<V, E>>() |==> <NO-OP>
198:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@putPrevSeenData(V,org.jgrapht.alg.BellmanFordPathElement<V,E>):311:this.prevVertexData.put(vertex, data) |==> null
199:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.BellmanFordIterator@putSeenData(V,org.jgrapht.alg.BellmanFordPathElement<V,E>):328:this.vertexData == null |==> false
200:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@putSeenData(V,org.jgrapht.alg.BellmanFordPathElement<V,E>):329:this.vertexData = new HashMap<V, BellmanFordPathElement<V, E>>() |==> <NO-OP>
201:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@putSeenData(V,org.jgrapht.alg.BellmanFordPathElement<V,E>):332:this.vertexData.put(vertex, data) |==> null
202:COR:graph.containsVertex(startVertex):TRUE:org.jgrapht.alg.BellmanFordIterator@assertBellmanFordIterator(org.jgrapht.Graph<V,E>,V):337:graph.containsVertex(startVertex) |==> false
203:COR:graph.containsVertex(startVertex):FALSE:org.jgrapht.alg.BellmanFordIterator@assertBellmanFordIterator(org.jgrapht.Graph<V,E>,V):337:graph.containsVertex(startVertex) |==> true
204:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@createSeenData(V,E,double):358:getPrevSeenData(Graphs.getOppositeVertex(graph, edge, vertex)) |==> null
205:EVR:<NEW_CLASS(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@createSeenData(V,E,double):362:new BellmanFordPathElement<V, E>(graph, prevPathElement, edge, cost, epsilon) |==> null
206:EVR:<IDENTIFIER(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@createSeenData(V,E,double):369:data |==> null
207:EVR:<NEW_CLASS(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@encounterStartVertex():375:new BellmanFordPathElement<V, E>(this.startVertex, epsilon) |==> null
208:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@encounterStartVertex():380:this.prevImprovedVertices.add(this.startVertex) |==> <NO-OP>
209:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@encounterStartVertex():382:putSeenData(this.startVertex, data) |==> <NO-OP>
210:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@encounterStartVertex():383:putPrevSeenData(this.startVertex, data) |==> <NO-OP>
211:LVR:TRUE:FALSE:org.jgrapht.alg.BellmanFordIterator@encounterStartVertex():385:true |==> false
212:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@encounterStartVertex():385:this.startVertexEncountered = true |==> <NO-OP>
213:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@relaxVertex(V,E):396:assertValidEdge(edge) |==> <NO-OP>
214:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@relaxVertex(V,E):398:calculatePathCost(vertex, edge) |==> 0.0
215:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@relaxVertex(V,E):401:createSeenData(vertex, edge, shortestPathCost) |==> null
216:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@relaxVertex(V,E):404:putSeenData(vertex, data) |==> <NO-OP>
217:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@relaxVertexAgain(V,E):419:assertValidEdge(edge) |==> <NO-OP>
218:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@relaxVertexAgain(V,E):421:calculatePathCost(vertex, edge) |==> 0.0
219:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@relaxVertexAgain(V,E):425:getPrevSeenData(Graphs.getOppositeVertex(graph, edge, vertex)) |==> null
220:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@relaxVertexAgain(V,E):428:getSeenData(vertex) |==> null
221:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@relaxVertexAgain(V,E):429:pathElement.improve(oppositePrevData, edge, candidateCost) |==> false
222:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@savePassData(java.util.List<V>):435:getSeenData(vertex) |==> null
223:EVR:<NEW_CLASS(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordIterator@savePassData(java.util.List<V>):437:new BellmanFordPathElement<V, E>(orig) |==> null
224:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@savePassData(java.util.List<V>):438:putPrevSeenData(vertex, clonedData) |==> <NO-OP>
225:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordIterator@savePassData(java.util.List<V>):441:this.prevImprovedVertices = improvedVertices |==> <NO-OP>
226:LVR:0:POS:org.jgrapht.alg.BellmanFordPathElement:52:0 |==> 1
227:LVR:0:NEG:org.jgrapht.alg.BellmanFordPathElement:52:0 |==> -1
228:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double,double):74:this.cost = cost |==> <NO-OP>
229:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double,double):75:this.epsilon = epsilon |==> <NO-OP>
230:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@<init>(org.jgrapht.alg.BellmanFordPathElement<V,E>):86:this.cost = original.cost |==> <NO-OP>
231:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@<init>(org.jgrapht.alg.BellmanFordPathElement<V,E>):87:this.epsilon = original.epsilon |==> <NO-OP>
232:LVR:0:POS:org.jgrapht.alg.BellmanFordPathElement@<init>(V,double):100:0 |==> 1
233:LVR:0:NEG:org.jgrapht.alg.BellmanFordPathElement@<init>(V,double):100:0 |==> -1
234:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@<init>(V,double):100:this.cost = 0 |==> <NO-OP>
235:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@<init>(V,double):101:this.epsilon = epsilon |==> <NO-OP>
236:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.BellmanFordPathElement@getCost():113:this.cost |==> 0.0
237:AOR:-(double,double):%(double,double):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):134:getCost() - epsilon |==> getCost() % epsilon
238:AOR:-(double,double):*(double,double):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):134:getCost() - epsilon |==> getCost() * epsilon
239:AOR:-(double,double):+(double,double):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):134:getCost() - epsilon |==> getCost() + epsilon
240:AOR:-(double,double):/(double,double):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):134:getCost() - epsilon |==> getCost() / epsilon
241:ROR:<(double,double):!=(double,double):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):134:candidateCost < (getCost() - epsilon) |==> candidateCost != (getCost() - epsilon)
242:ROR:<(double,double):<=(double,double):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):134:candidateCost < (getCost() - epsilon) |==> candidateCost <= (getCost() - epsilon)
243:ROR:<(double,double):FALSE(double,double):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):134:candidateCost < (getCost() - epsilon) |==> false
244:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):135:this.prevPathElement = candidatePrevPathElement |==> <NO-OP>
245:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):136:this.prevEdge = candidateEdge |==> <NO-OP>
246:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):137:this.cost = candidateCost |==> <NO-OP>
247:LVR:POS:0:org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):138:1 |==> 0
248:LVR:POS:NEG:org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):138:1 |==> -1
249:AOR:+(int,int):%(int,int):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):138:candidatePrevPathElement.getHopCount() + 1 |==> candidatePrevPathElement.getHopCount() % 1
250:AOR:+(int,int):*(int,int):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):138:candidatePrevPathElement.getHopCount() + 1 |==> candidatePrevPathElement.getHopCount() * 1
251:AOR:+(int,int):-(int,int):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):138:candidatePrevPathElement.getHopCount() + 1 |==> candidatePrevPathElement.getHopCount() - 1
252:AOR:+(int,int):/(int,int):org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):138:candidatePrevPathElement.getHopCount() + 1 |==> candidatePrevPathElement.getHopCount() / 1
253:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):138:this.nHops = candidatePrevPathElement.getHopCount() + 1 |==> <NO-OP>
254:LVR:TRUE:FALSE:org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):140:true |==> false
255:LVR:FALSE:TRUE:org.jgrapht.alg.BellmanFordPathElement@improve(org.jgrapht.alg.BellmanFordPathElement<V,E>,E,double):142:false |==> true
256:LVR:POS:0:org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V):90:1 |==> 0
257:LVR:POS:NEG:org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V):90:1 |==> -1
258:AOR:-(int,int):%(int,int):org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V):90:graph.vertexSet().size() - 1 |==> graph.vertexSet().size() % 1
259:AOR:-(int,int):*(int,int):org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V):90:graph.vertexSet().size() - 1 |==> graph.vertexSet().size() * 1
260:AOR:-(int,int):+(int,int):org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V):90:graph.vertexSet().size() - 1 |==> graph.vertexSet().size() + 1
261:AOR:-(int,int):/(int,int):org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V):90:graph.vertexSet().size() - 1 |==> graph.vertexSet().size() / 1
262:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V,int,double):124:this.startVertex = startVertex |==> <NO-OP>
263:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V,int,double):125:this.nMaxHops = nMaxHops |==> <NO-OP>
264:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V,int,double):126:this.graph = graph |==> <NO-OP>
265:LVR:POS:0:org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V,int,double):127:1 |==> 0
266:LVR:POS:NEG:org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V,int,double):127:1 |==> -1
267:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V,int,double):127:this.passNumber = 1 |==> <NO-OP>
268:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@<init>(org.jgrapht.Graph<V,E>,V,int,double):128:this.epsilon = epsilon |==> <NO-OP>
269:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@getCost(V):141:assertGetPath(endVertex) |==> <NO-OP>
270:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@getCost(V):143:lazyCalculate() |==> <NO-OP>
271:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordShortestPath@getCost(V):146:this.iter.getPathElement(endVertex) |==> null
272:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.BellmanFordShortestPath@getCost(V):148:pathElement == null |==> false
273:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@getCost(V):149:return Double.POSITIVE_INFINITY; |==> <NO-OP>
274:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.BellmanFordShortestPath@getCost(V):152:pathElement.getCost() |==> 0.0
275:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@getPathEdgeList(V):163:assertGetPath(endVertex) |==> <NO-OP>
276:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@getPathEdgeList(V):165:lazyCalculate() |==> <NO-OP>
277:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BellmanFordPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordShortestPath@getPathEdgeList(V):168:this.iter.getPathElement(endVertex) |==> null
278:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.BellmanFordShortestPath@getPathEdgeList(V):170:pathElement == null |==> false
279:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@getPathEdgeList(V):171:return null; |==> <NO-OP>
280:EVR:<METHOD_INVOCATION(java.util.List<E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordShortestPath@getPathEdgeList(V):174:pathElement.createEdgeListPath() |==> null
281:COR:endVertex.equals(this.startVertex):TRUE:org.jgrapht.alg.BellmanFordShortestPath@assertGetPath(V):179:endVertex.equals(this.startVertex) |==> false
282:COR:endVertex.equals(this.startVertex):FALSE:org.jgrapht.alg.BellmanFordShortestPath@assertGetPath(V):179:endVertex.equals(this.startVertex) |==> true
283:COR:this.graph.containsVertex(endVertex):TRUE:org.jgrapht.alg.BellmanFordShortestPath@assertGetPath(V):184:this.graph.containsVertex(endVertex) |==> false
284:COR:this.graph.containsVertex(endVertex):FALSE:org.jgrapht.alg.BellmanFordShortestPath@assertGetPath(V):184:this.graph.containsVertex(endVertex) |==> true
285:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():192:this.iter == null |==> false
286:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():193:this.iter = new BellmanFordIterator<V, E>(this.graph, this.startVertex, epsilon) |==> <NO-OP>
287:ROR:<=(int,int):<(int,int):org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():204:this.passNumber <= this.nMaxHops |==> this.passNumber < this.nMaxHops
288:ROR:<=(int,int):==(int,int):org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():204:this.passNumber <= this.nMaxHops |==> this.passNumber == this.nMaxHops
289:ROR:<=(int,int):TRUE(int,int):org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():204:this.passNumber <= this.nMaxHops |==> true
290:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():204:(this.passNumber <= this.nMaxHops) && this.iter.hasNext() |==> (this.passNumber <= this.nMaxHops) == this.iter.hasNext()
291:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():204:(this.passNumber <= this.nMaxHops) && this.iter.hasNext() |==> false
292:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():204:(this.passNumber <= this.nMaxHops) && this.iter.hasNext() |==> (this.passNumber <= this.nMaxHops)
293:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():204:(this.passNumber <= this.nMaxHops) && this.iter.hasNext() |==> this.iter.hasNext()
294:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BellmanFordShortestPath@lazyCalculate():207:this.iter.next() |==> <NO-OP>
295:EVR:<NEW_CLASS(org.jgrapht.alg.BellmanFordShortestPath<V,E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordShortestPath@findPathBetween(org.jgrapht.Graph<V,E>,V,V):228:new BellmanFordShortestPath<V, E>(graph, startVertex) |==> null
296:EVR:<METHOD_INVOCATION(java.util.List<E>)>:<DEFAULT>:org.jgrapht.alg.BellmanFordShortestPath@findPathBetween(org.jgrapht.Graph<V,E>,V,V):232:alg.getPathEdgeList(endVertex) |==> null
297:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BiconnectivityInspector@<init>(org.jgrapht.UndirectedGraph<V,E>):67:this.blockCutpointGraph = new BlockCutpointGraph<V, E>(graph) |==> <NO-OP>
298:EVR:<NEW_CLASS(java.util.HashSet<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents():77:new HashSet<Set<V>>() |==> null
299:EVR:<METHOD_INVOCATION(java.util.Iterator<org.jgrapht.UndirectedGraph<V,E>>)>:<DEFAULT>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents():80:this.blockCutpointGraph.vertexSet().iterator() |==> null
300:EVR:<METHOD_INVOCATION(org.jgrapht.UndirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents():83:iter.next() |==> null
301:COR:subgraph.edgeSet().isEmpty():TRUE:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents():84:subgraph.edgeSet().isEmpty() |==> false
302:COR:subgraph.edgeSet().isEmpty():FALSE:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents():84:subgraph.edgeSet().isEmpty() |==> true
303:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents():85:biconnectedVertexComponents.add(subgraph.vertexSet()) |==> <NO-OP>
304:EVR:<IDENTIFIER(java.util.Set<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents():89:biconnectedVertexComponents |==> null
305:EVR:<NEW_CLASS(java.util.HashSet<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents(V):104:new HashSet<Set<V>>() |==> null
306:EVR:<METHOD_INVOCATION(java.util.Iterator<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents(V):106:getBiconnectedVertexComponents().iterator() |==> null
307:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents(V):109:iter.next() |==> null
308:COR:vertexComponent.contains(vertex):TRUE:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents(V):110:vertexComponent.contains(vertex) |==> false
309:COR:vertexComponent.contains(vertex):FALSE:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents(V):110:vertexComponent.contains(vertex) |==> true
310:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents(V):111:vertexComponents.add(vertexComponent) |==> <NO-OP>
311:EVR:<IDENTIFIER(java.util.Set<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.BiconnectivityInspector@getBiconnectedVertexComponents(V):114:vertexComponents |==> null
312:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.BiconnectivityInspector@getCutpoints():122:this.blockCutpointGraph.getCutpoints() |==> null
313:LVR:POS:0:org.jgrapht.alg.BiconnectivityInspector@isBiconnected():131:1 |==> 0
314:LVR:POS:NEG:org.jgrapht.alg.BiconnectivityInspector@isBiconnected():131:1 |==> -1
315:ROR:==(int,int):<=(int,int):org.jgrapht.alg.BiconnectivityInspector@isBiconnected():131:this.blockCutpointGraph.vertexSet().size() == 1 |==> this.blockCutpointGraph.vertexSet().size() <= 1
316:ROR:==(int,int):>=(int,int):org.jgrapht.alg.BiconnectivityInspector@isBiconnected():131:this.blockCutpointGraph.vertexSet().size() == 1 |==> this.blockCutpointGraph.vertexSet().size() >= 1
317:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.BiconnectivityInspector@isBiconnected():131:this.blockCutpointGraph.vertexSet().size() == 1 |==> false
318:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph:80:new HashSet<V>() |==> null
319:EVR:<NEW_CLASS(java.util.ArrayDeque<org.jgrapht.alg.BlockCutpointGraph<V,E>.BCGEdge>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph:91:new ArrayDeque<BCGEdge>() |==> null
320:EVR:<NEW_CLASS(java.util.HashMap<V,java.util.Set<org.jgrapht.UndirectedGraph<V,E>>>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph:94:new HashMap<V, Set<UndirectedGraph<V, E>>>() |==> null
321:EVR:<NEW_CLASS(java.util.HashMap<V,org.jgrapht.UndirectedGraph<V,E>>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph:97:new HashMap<V, UndirectedGraph<V, E>>() |==> null
322:EVR:<NEW_CLASS(java.util.HashMap<V,java.lang.Integer>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph:99:new HashMap<V, Integer>() |==> null
323:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):109:this.graph = graph |==> <NO-OP>
324:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):111:this.dfsTree = new SimpleDirectedGraph<V, DefaultEdge>(DefaultEdge.class) |==> <NO-OP>
325:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):114:graph.vertexSet().iterator().next() |==> null
326:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):115:this.dfsTree.addVertex(s) |==> <NO-OP>
327:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):116:dfsVisit(s, s) |==> <NO-OP>
328:LVR:POS:0:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):118:1 |==> 0
329:LVR:POS:NEG:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):118:1 |==> -1
330:ROR:>(int,int):!=(int,int):org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):118:this.dfsTree.edgesOf(s).size() > 1 |==> this.dfsTree.edgesOf(s).size() != 1
331:ROR:>(int,int):>=(int,int):org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):118:this.dfsTree.edgesOf(s).size() > 1 |==> this.dfsTree.edgesOf(s).size() >= 1
332:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):118:this.dfsTree.edgesOf(s).size() > 1 |==> false
333:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):119:this.cutpoints.add(s) |==> <NO-OP>
334:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):121:this.cutpoints.remove(s) |==> <NO-OP>
335:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):124:this.cutpoints.iterator() |==> null
336:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):125:iter.next() |==> null
337:EVR:<NEW_CLASS(org.jgrapht.graph.SimpleGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):127:new SimpleGraph<V, E>(this.graph.getEdgeFactory()) |==> null
338:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):128:subgraph.addVertex(cutpoint) |==> <NO-OP>
339:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):129:this.vertex2block.put(cutpoint, subgraph) |==> <NO-OP>
340:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):130:addVertex(subgraph) |==> <NO-OP>
341:EVR:<METHOD_INVOCATION(java.util.Set<org.jgrapht.UndirectedGraph<V,E>>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):132:getBiconnectedSubgraphs(cutpoint) |==> null
342:EVR:<METHOD_INVOCATION(java.util.Iterator<org.jgrapht.UndirectedGraph<V,E>>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):135:biconnectedSubgraphs.iterator() |==> null
343:EVR:<METHOD_INVOCATION(org.jgrapht.UndirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):138:iterator.next() |==> null
344:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@<init>(org.jgrapht.UndirectedGraph<V,E>):140:addEdge(subgraph, biconnectedSubgraph) |==> <NO-OP>
345:COR:this.graph.vertexSet().contains(vertex):TRUE:org.jgrapht.alg.BlockCutpointGraph@getBlock(V):155:this.graph.vertexSet().contains(vertex) |==> false
346:COR:this.graph.vertexSet().contains(vertex):FALSE:org.jgrapht.alg.BlockCutpointGraph@getBlock(V):155:this.graph.vertexSet().contains(vertex) |==> true
347:EVR:<METHOD_INVOCATION(org.jgrapht.UndirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@getBlock(V):159:this.vertex2block.get(vertex) |==> null
348:EVR:<MEMBER_SELECT(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@getCutpoints():167:this.cutpoints |==> null
349:COR:this.graph.vertexSet().contains(vertex):TRUE:org.jgrapht.alg.BlockCutpointGraph@isCutpoint(V):178:this.graph.vertexSet().contains(vertex) |==> false
350:COR:this.graph.vertexSet().contains(vertex):FALSE:org.jgrapht.alg.BlockCutpointGraph@isCutpoint(V):178:this.graph.vertexSet().contains(vertex) |==> true
351:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@isCutpoint(V):182:this.cutpoints.contains(vertex) |==> false
352:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):187:this.cutpoints.add(s) |==> <NO-OP>
353:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):189:new HashSet<V>() |==> null
354:EVR:<NEW_CLASS(java.util.HashSet<org.jgrapht.alg.BlockCutpointGraph<V,E>.BCGEdge>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):190:new HashSet<BCGEdge>() |==> null
355:EVR:<METHOD_INVOCATION(org.jgrapht.alg.BlockCutpointGraph<V,E>.BCGEdge)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):191:this.stack.removeLast() |==> null
356:ROR:>=(int,int):==(int,int):org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):193:getNumOrder(edge.getSource()) >= getNumOrder(n) |==> getNumOrder(edge.getSource()) == getNumOrder(n)
357:ROR:>=(int,int):>(int,int):org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):193:getNumOrder(edge.getSource()) >= getNumOrder(n) |==> getNumOrder(edge.getSource()) > getNumOrder(n)
358:ROR:>=(int,int):TRUE(int,int):org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):193:getNumOrder(edge.getSource()) >= getNumOrder(n) |==> true
359:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):193:(getNumOrder(edge.getSource()) >= getNumOrder(n)) && !this.stack.isEmpty() |==> (getNumOrder(edge.getSource()) >= getNumOrder(n)) == !this.stack.isEmpty()
360:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):194:(getNumOrder(edge.getSource()) >= getNumOrder(n)) && !this.stack.isEmpty() |==> false
361:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):193:(getNumOrder(edge.getSource()) >= getNumOrder(n)) && !this.stack.isEmpty() |==> (getNumOrder(edge.getSource()) >= getNumOrder(n))
362:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):194:(getNumOrder(edge.getSource()) >= getNumOrder(n)) && !this.stack.isEmpty() |==> !this.stack.isEmpty()
363:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):196:edgeComponent.add(edge) |==> <NO-OP>
364:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):198:vertexComponent.add(edge.getSource()) |==> <NO-OP>
365:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):199:vertexComponent.add(edge.getTarget()) |==> <NO-OP>
366:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):201:edge = this.stack.removeLast() |==> <NO-OP>
367:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):203:edgeComponent.add(edge) |==> <NO-OP>
368:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):206:vertexComponent.add(edge.getSource()) |==> <NO-OP>
369:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):207:vertexComponent.add(edge.getTarget()) |==> <NO-OP>
370:EVR:<NEW_CLASS(org.jgrapht.alg.BlockCutpointGraph<V,E>.VertexComponentForbiddenFunction)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):210:new VertexComponentForbiddenFunction(vertexComponent) |==> null
371:EVR:<NEW_CLASS(org.jgrapht.graph.UndirectedMaskSubgraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):213:new UndirectedMaskSubgraph<V, E>(this.graph, mask) |==> null
372:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):216:vertexComponent.iterator() |==> null
373:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):217:iter.next() |==> null
374:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):218:this.vertex2block.put(vertex, biconnectedSubgraph) |==> <NO-OP>
375:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):219:getBiconnectedSubgraphs(vertex).add(biconnectedSubgraph) |==> <NO-OP>
376:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@biconnectedComponentFinished(V,V):221:addVertex(biconnectedSubgraph) |==> <NO-OP>
377:STD:<INC>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):226:this.numOrder++ |==> <NO-OP>
378:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):227:this.numOrder |==> 0
379:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):228:setNumOrder(s, this.numOrder) |==> <NO-OP>
380:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):231:this.graph.edgesOf(s).iterator() |==> null
381:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):234:iter.next() |==> null
382:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):235:Graphs.getOppositeVertex(this.graph, edge, s) |==> null
383:LVR:0:POS:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):236:0 |==> 1
384:LVR:0:NEG:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):236:0 |==> -1
385:ROR:==(int,int):<=(int,int):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):236:getNumOrder(n) == 0 |==> getNumOrder(n) <= 0
386:ROR:==(int,int):>=(int,int):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):236:getNumOrder(n) == 0 |==> getNumOrder(n) >= 0
387:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):236:getNumOrder(n) == 0 |==> false
388:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):237:this.dfsTree.addVertex(n) |==> <NO-OP>
389:EVR:<NEW_CLASS(org.jgrapht.alg.BlockCutpointGraph<V,E>.BCGEdge)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):238:new BCGEdge(s, n) |==> null
390:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):239:this.dfsTree.addEdge(s, n, dfsEdge) |==> <NO-OP>
391:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):241:this.stack.add(dfsEdge) |==> <NO-OP>
392:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):245:dfsVisit(n, s) |==> 0
393:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):246:minS = Math.min(minN, minS) |==> <NO-OP>
394:ROR:>=(int,int):==(int,int):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):247:minN >= getNumOrder(s) |==> minN == getNumOrder(s)
395:ROR:>=(int,int):>(int,int):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):247:minN >= getNumOrder(s) |==> minN > getNumOrder(s)
396:ROR:>=(int,int):TRUE(int,int):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):247:minN >= getNumOrder(s) |==> true
397:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):250:biconnectedComponentFinished(s, n) |==> <NO-OP>
398:ROR:<(int,int):!=(int,int):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):252:getNumOrder(n) < getNumOrder(s) |==> getNumOrder(n) != getNumOrder(s)
399:ROR:<(int,int):<=(int,int):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):252:getNumOrder(n) < getNumOrder(s) |==> getNumOrder(n) <= getNumOrder(s)
400:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):252:getNumOrder(n) < getNumOrder(s) |==> false
401:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):252:(getNumOrder(n) < getNumOrder(s)) && !n.equals(father) |==> (getNumOrder(n) < getNumOrder(s)) == !n.equals(father)
402:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):252:(getNumOrder(n) < getNumOrder(s)) && !n.equals(father) |==> false
403:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):252:(getNumOrder(n) < getNumOrder(s)) && !n.equals(father) |==> (getNumOrder(n) < getNumOrder(s))
404:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):252:(getNumOrder(n) < getNumOrder(s)) && !n.equals(father) |==> !n.equals(father)
405:EVR:<NEW_CLASS(org.jgrapht.alg.BlockCutpointGraph<V,E>.BCGEdge)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):253:new BCGEdge(s, n) |==> null
406:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):254:this.stack.add(backwardEdge) |==> <NO-OP>
407:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):257:minS = Math.min(getNumOrder(n), minS) |==> <NO-OP>
408:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@dfsVisit(V,V):263:minS |==> 0
409:EVR:<METHOD_INVOCATION(java.util.Set<org.jgrapht.UndirectedGraph<V,E>>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@getBiconnectedSubgraphs(V):276:this.vertex2biconnectedSubgraphs.get(vertex) |==> null
410:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.BlockCutpointGraph@getBiconnectedSubgraphs(V):277:biconnectedSubgraphs == null |==> false
411:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@getBiconnectedSubgraphs(V):278:biconnectedSubgraphs = new HashSet<UndirectedGraph<V, E>>() |==> <NO-OP>
412:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@getBiconnectedSubgraphs(V):279:this.vertex2biconnectedSubgraphs.put(vertex, biconnectedSubgraphs) |==> <NO-OP>
413:EVR:<IDENTIFIER(java.util.Set<org.jgrapht.UndirectedGraph<V,E>>)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@getBiconnectedSubgraphs(V):281:biconnectedSubgraphs |==> null
414:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.BlockCutpointGraph@getNumOrder(V):289:vertex != null |==> true
415:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@getNumOrder(V):291:this.vertex2numOrder.get(vertex) |==> null
416:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.BlockCutpointGraph@getNumOrder(V):292:numOrder == null |==> false
417:LVR:0:POS:org.jgrapht.alg.BlockCutpointGraph@getNumOrder(V):293:0 |==> 1
418:LVR:0:NEG:org.jgrapht.alg.BlockCutpointGraph@getNumOrder(V):293:0 |==> -1
419:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph@getNumOrder(V):295:numOrder.intValue() |==> 0
420:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph@setNumOrder(V,int):301:this.vertex2numOrder.put(vertex, Integer.valueOf(numOrder)) |==> <NO-OP>
421:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph$BCGEdge@<init>(V,V):320:this.source = source |==> <NO-OP>
422:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph$BCGEdge@<init>(V,V):321:this.target = target |==> <NO-OP>
423:EVR:<MEMBER_SELECT(V)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph$BCGEdge@getSource():326:this.source |==> null
424:EVR:<MEMBER_SELECT(V)>:<DEFAULT>:org.jgrapht.alg.BlockCutpointGraph$BCGEdge@getTarget():331:this.target |==> null
425:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BlockCutpointGraph$VertexComponentForbiddenFunction@<init>(java.util.Set<V>):342:this.vertexComponent = vertexComponent |==> <NO-OP>
426:LVR:FALSE:TRUE:org.jgrapht.alg.BlockCutpointGraph$VertexComponentForbiddenFunction@isEdgeMasked(E):347:false |==> true
427:COR:this.vertexComponent.contains(vertex):TRUE:org.jgrapht.alg.BlockCutpointGraph$VertexComponentForbiddenFunction@isVertexMasked(V):352:this.vertexComponent.contains(vertex) |==> false
428:COR:this.vertexComponent.contains(vertex):FALSE:org.jgrapht.alg.BlockCutpointGraph$VertexComponentForbiddenFunction@isVertexMasked(V):352:this.vertexComponent.contains(vertex) |==> true
429:LVR:FALSE:TRUE:org.jgrapht.alg.BlockCutpointGraph$VertexComponentForbiddenFunction@isVertexMasked(V):354:false |==> true
430:LVR:TRUE:FALSE:org.jgrapht.alg.BlockCutpointGraph$VertexComponentForbiddenFunction@isVertexMasked(V):356:true |==> false
431:LVR:FALSE:TRUE:org.jgrapht.graph.SimpleGraph@<init>(org.jgrapht.EdgeFactory<V,E>):68:false |==> true
432:LVR:FALSE:TRUE:org.jgrapht.graph.SimpleGraph@<init>(org.jgrapht.EdgeFactory<V,E>):68:false |==> true
433:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph@<init>(org.jgrapht.EdgeFactory<V,E>,boolean,boolean):111:ef == null |==> false
434:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@<init>(org.jgrapht.EdgeFactory<V,E>,boolean,boolean):115:edgeMap = new LinkedHashMap<E, IntrusiveEdge>() |==> <NO-OP>
435:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@<init>(org.jgrapht.EdgeFactory<V,E>,boolean,boolean):116:edgeFactory = ef |==> <NO-OP>
436:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@<init>(org.jgrapht.EdgeFactory<V,E>,boolean,boolean):117:allowingLoops = allowLoops |==> <NO-OP>
437:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@<init>(org.jgrapht.EdgeFactory<V,E>,boolean,boolean):118:allowingMultipleEdges = allowMultipleEdges |==> <NO-OP>
438:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@<init>(org.jgrapht.EdgeFactory<V,E>,boolean,boolean):120:specifics = createSpecifics() |==> <NO-OP>
439:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@<init>(org.jgrapht.EdgeFactory<V,E>,boolean,boolean):122:this.edgeSetFactory = new ArrayListFactory<V, E>() |==> <NO-OP>
440:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@getAllEdges(V,V):132:specifics.getAllEdges(sourceVertex, targetVertex) |==> null
441:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@isAllowingLoops():144:allowingLoops |==> false
442:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@isAllowingMultipleEdges():156:allowingMultipleEdges |==> false
443:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@getEdge(V,V):164:specifics.getEdge(sourceVertex, targetVertex) |==> null
444:EVR:<IDENTIFIER(org.jgrapht.EdgeFactory<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@getEdgeFactory():172:edgeFactory |==> null
445:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@setEdgeSetFactory(org.jgrapht.graph.EdgeSetFactory<V,E>):185:this.edgeSetFactory = edgeSetFactory |==> <NO-OP>
446:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):193:assertVertexExist(sourceVertex) |==> <NO-OP>
447:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):194:assertVertexExist(targetVertex) |==> <NO-OP>
448:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):196:!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex) |==> !allowingMultipleEdges == containsEdge(sourceVertex, targetVertex)
449:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):197:!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex) |==> false
450:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):196:!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex) |==> !allowingMultipleEdges
451:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):197:!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex) |==> containsEdge(sourceVertex, targetVertex)
452:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):199:return null; |==> <NO-OP>
453:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):202:!allowingLoops && sourceVertex.equals(targetVertex) |==> !allowingLoops == sourceVertex.equals(targetVertex)
454:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):202:!allowingLoops && sourceVertex.equals(targetVertex) |==> false
455:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):202:!allowingLoops && sourceVertex.equals(targetVertex) |==> !allowingLoops
456:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):202:!allowingLoops && sourceVertex.equals(targetVertex) |==> sourceVertex.equals(targetVertex)
457:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):206:edgeFactory.createEdge(sourceVertex, targetVertex) |==> null
458:COR:containsEdge(e):TRUE:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):208:containsEdge(e) |==> false
459:COR:containsEdge(e):FALSE:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):208:containsEdge(e) |==> true
460:EVR:<METHOD_INVOCATION(org.jgrapht.graph.IntrusiveEdge)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):213:createIntrusiveEdge(e, sourceVertex, targetVertex) |==> null
461:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):215:edgeMap.put(e, intrusiveEdge) |==> <NO-OP>
462:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):216:specifics.addEdgeToTouchingVertices(e) |==> <NO-OP>
463:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V):218:e |==> null
464:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):227:e == null |==> false
465:COR:containsEdge(e):TRUE:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):229:containsEdge(e) |==> false
466:COR:containsEdge(e):FALSE:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):229:containsEdge(e) |==> true
467:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):230:false |==> true
468:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):230:return Config.__M_NO == 0 && Config.COVERED(467, 467) ? false : Config.__M_NO == 467 ? true : false; |==> <NO-OP>
469:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):233:assertVertexExist(sourceVertex) |==> <NO-OP>
470:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):234:assertVertexExist(targetVertex) |==> <NO-OP>
471:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):236:!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex) |==> !allowingMultipleEdges == containsEdge(sourceVertex, targetVertex)
472:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):237:!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex) |==> false
473:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):236:!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex) |==> !allowingMultipleEdges
474:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):237:!allowingMultipleEdges && containsEdge(sourceVertex, targetVertex) |==> containsEdge(sourceVertex, targetVertex)
475:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):239:false |==> true
476:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):239:return Config.__M_NO == 0 && Config.COVERED(475, 475) ? false : Config.__M_NO == 475 ? true : false; |==> <NO-OP>
477:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):242:!allowingLoops && sourceVertex.equals(targetVertex) |==> !allowingLoops == sourceVertex.equals(targetVertex)
478:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):242:!allowingLoops && sourceVertex.equals(targetVertex) |==> false
479:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):242:!allowingLoops && sourceVertex.equals(targetVertex) |==> !allowingLoops
480:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):242:!allowingLoops && sourceVertex.equals(targetVertex) |==> sourceVertex.equals(targetVertex)
481:EVR:<METHOD_INVOCATION(org.jgrapht.graph.IntrusiveEdge)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):247:createIntrusiveEdge(e, sourceVertex, targetVertex) |==> null
482:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):249:edgeMap.put(e, intrusiveEdge) |==> <NO-OP>
483:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):250:specifics.addEdgeToTouchingVertices(e) |==> <NO-OP>
484:LVR:TRUE:FALSE:org.jgrapht.graph.AbstractBaseGraph@addEdge(V,V,E):252:true |==> false
485:EVR:<TYPE_CAST(org.jgrapht.graph.IntrusiveEdge)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@createIntrusiveEdge(E,V,V):262:(IntrusiveEdge)e |==> null
486:EVR:<NEW_CLASS(org.jgrapht.graph.IntrusiveEdge)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@createIntrusiveEdge(E,V,V):264:new IntrusiveEdge() |==> null
487:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@createIntrusiveEdge(E,V,V):266:intrusiveEdge.source = sourceVertex |==> <NO-OP>
488:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@createIntrusiveEdge(E,V,V):267:intrusiveEdge.target = targetVertex |==> <NO-OP>
489:EVR:<IDENTIFIER(org.jgrapht.graph.IntrusiveEdge)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@createIntrusiveEdge(E,V,V):268:intrusiveEdge |==> null
490:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph@addVertex(V):276:v == null |==> false
491:COR:containsVertex(v):TRUE:org.jgrapht.graph.AbstractBaseGraph@addVertex(V):278:containsVertex(v) |==> false
492:COR:containsVertex(v):FALSE:org.jgrapht.graph.AbstractBaseGraph@addVertex(V):278:containsVertex(v) |==> true
493:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractBaseGraph@addVertex(V):279:false |==> true
494:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@addVertex(V):281:specifics.addVertex(v) |==> <NO-OP>
495:LVR:TRUE:FALSE:org.jgrapht.graph.AbstractBaseGraph@addVertex(V):283:true |==> false
496:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@getEdgeSource(E):292:TypeUtil.uncheckedCast(getIntrusiveEdge(e).source, vertexTypeDecl) |==> null
497:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@getEdgeTarget(E):302:TypeUtil.uncheckedCast(getIntrusiveEdge(e).target, vertexTypeDecl) |==> null
498:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@getIntrusiveEdge(E):310:return (IntrusiveEdge)e; |==> <NO-OP>
499:EVR:<METHOD_INVOCATION(org.jgrapht.graph.IntrusiveEdge)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@getIntrusiveEdge(E):313:edgeMap.get(e) |==> null
500:EVR:<METHOD_INVOCATION(org.jgrapht.graph.AbstractBaseGraph<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@clone():332:TypeUtil.uncheckedCast(super.clone(), typeDecl) |==> null
501:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@clone():334:newGraph.edgeMap = new LinkedHashMap<E, IntrusiveEdge>() |==> <NO-OP>
502:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@clone():336:newGraph.edgeFactory = this.edgeFactory |==> <NO-OP>
503:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@clone():337:newGraph.unmodifiableEdgeSet = null |==> <NO-OP>
504:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@clone():338:newGraph.unmodifiableVertexSet = null |==> <NO-OP>
505:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@clone():343:newGraph.specifics = newGraph.createSpecifics() |==> <NO-OP>
506:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@clone():345:Graphs.addGraph(newGraph, this) |==> <NO-OP>
507:EVR:<IDENTIFIER(org.jgrapht.graph.AbstractBaseGraph<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@clone():347:newGraph |==> null
508:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@clone():349:e.printStackTrace() |==> <NO-OP>
509:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@containsEdge(E):359:edgeMap.containsKey(e) |==> false
510:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@containsVertex(V):367:specifics.getVertexSet().contains(v) |==> false
511:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@degreeOf(V):375:specifics.degreeOf(vertex) |==> 0
512:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph@edgeSet():383:unmodifiableEdgeSet == null |==> false
513:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@edgeSet():384:unmodifiableEdgeSet = Collections.unmodifiableSet(edgeMap.keySet()) |==> <NO-OP>
514:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@edgeSet():387:unmodifiableEdgeSet |==> null
515:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@edgesOf(V):395:specifics.edgesOf(vertex) |==> null
516:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@inDegreeOf(V):403:specifics.inDegreeOf(vertex) |==> 0
517:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@incomingEdgesOf(V):411:specifics.incomingEdgesOf(vertex) |==> null
518:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@outDegreeOf(V):419:specifics.outDegreeOf(vertex) |==> 0
519:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@outgoingEdgesOf(V):427:specifics.outgoingEdgesOf(vertex) |==> null
520:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@removeEdge(V,V):435:getEdge(sourceVertex, targetVertex) |==> null
521:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph@removeEdge(V,V):437:e != null |==> true
522:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@removeEdge(V,V):438:specifics.removeEdgeFromTouchingVertices(e) |==> <NO-OP>
523:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@removeEdge(V,V):439:edgeMap.remove(e) |==> <NO-OP>
524:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@removeEdge(V,V):442:e |==> null
525:COR:containsEdge(e):TRUE:org.jgrapht.graph.AbstractBaseGraph@removeEdge(E):450:containsEdge(e) |==> false
526:COR:containsEdge(e):FALSE:org.jgrapht.graph.AbstractBaseGraph@removeEdge(E):450:containsEdge(e) |==> true
527:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@removeEdge(E):451:specifics.removeEdgeFromTouchingVertices(e) |==> <NO-OP>
528:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@removeEdge(E):452:edgeMap.remove(e) |==> <NO-OP>
529:LVR:TRUE:FALSE:org.jgrapht.graph.AbstractBaseGraph@removeEdge(E):454:true |==> false
530:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractBaseGraph@removeEdge(E):456:false |==> true
531:COR:containsVertex(v):TRUE:org.jgrapht.graph.AbstractBaseGraph@removeVertex(V):465:containsVertex(v) |==> false
532:COR:containsVertex(v):FALSE:org.jgrapht.graph.AbstractBaseGraph@removeVertex(V):465:containsVertex(v) |==> true
533:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@removeVertex(V):466:edgesOf(v) |==> null
534:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@removeVertex(V):470:removeAllEdges(new ArrayList<E>(touchingEdgesList)) |==> <NO-OP>
535:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@removeVertex(V):472:specifics.getVertexSet().remove(v) |==> <NO-OP>
536:LVR:TRUE:FALSE:org.jgrapht.graph.AbstractBaseGraph@removeVertex(V):474:true |==> false
537:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractBaseGraph@removeVertex(V):476:false |==> true
538:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph@vertexSet():485:unmodifiableVertexSet == null |==> false
539:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@vertexSet():486:unmodifiableVertexSet = Collections.unmodifiableSet(specifics.getVertexSet()) |==> <NO-OP>
540:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@vertexSet():490:unmodifiableVertexSet |==> null
541:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@getEdgeWeight(E):499:((DefaultWeightedEdge)e).getWeight() |==> 0.0
542:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@getEdgeWeight(E):501:WeightedGraph.DEFAULT_EDGE_WEIGHT |==> 0.0
543:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph@setEdgeWeight(E,double):511:((DefaultWeightedEdge)e).weight = weight |==> <NO-OP>
544:EVR:<NEW_CLASS(org.jgrapht.graph.AbstractBaseGraph<V,E>.DirectedSpecifics)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@createSpecifics():517:new DirectedSpecifics() |==> null
545:EVR:<NEW_CLASS(org.jgrapht.graph.AbstractBaseGraph<V,E>.UndirectedSpecifics)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph@createSpecifics():519:new UndirectedSpecifics() |==> null
546:LVR:POS:0:org.jgrapht.graph.AbstractBaseGraph$ArrayListFactory@createEdgeSet(VV):647:1 |==> 0
547:LVR:POS:NEG:org.jgrapht.graph.AbstractBaseGraph$ArrayListFactory@createEdgeSet(VV):647:1 |==> -1
548:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@<init>(org.jgrapht.graph.EdgeSetFactory<VV,EE>,VV):672:incoming = edgeSetFactory.createEdgeSet(vertex) |==> <NO-OP>
549:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@<init>(org.jgrapht.graph.EdgeSetFactory<VV,EE>,VV):673:outgoing = edgeSetFactory.createEdgeSet(vertex) |==> <NO-OP>
550:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@getUnmodifiableIncomingEdges():683:unmodifiableIncoming == null |==> false
551:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@getUnmodifiableIncomingEdges():684:unmodifiableIncoming = Collections.unmodifiableSet(incoming) |==> <NO-OP>
552:EVR:<IDENTIFIER(java.util.Set<EE>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@getUnmodifiableIncomingEdges():687:unmodifiableIncoming |==> null
553:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@getUnmodifiableOutgoingEdges():697:unmodifiableOutgoing == null |==> false
554:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@getUnmodifiableOutgoingEdges():698:unmodifiableOutgoing = Collections.unmodifiableSet(outgoing) |==> <NO-OP>
555:EVR:<IDENTIFIER(java.util.Set<EE>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@getUnmodifiableOutgoingEdges():701:unmodifiableOutgoing |==> null
556:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@addIncomingEdge(EE):711:incoming.add(e) |==> <NO-OP>
557:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@addOutgoingEdge(EE):721:outgoing.add(e) |==> <NO-OP>
558:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@removeIncomingEdge(EE):731:incoming.remove(e) |==> <NO-OP>
559:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedEdgeContainer@removeOutgoingEdge(EE):741:outgoing.remove(e) |==> <NO-OP>
560:EVR:<NEW_CLASS(java.util.LinkedHashMap<V,org.jgrapht.graph.AbstractBaseGraph.DirectedEdgeContainer<V,E>>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics:759:new LinkedHashMap<V, DirectedEdgeContainer<V, E>>() |==> null
561:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@addVertex(V):764:vertexMapDirected.put(v, null) |==> <NO-OP>
562:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getVertexSet():769:vertexMapDirected.keySet() |==> null
563:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):779:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex) == containsVertex(targetVertex)
564:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):780:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> false
565:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):779:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex)
566:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):780:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(targetVertex)
567:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):782:edges = new ArrayUnenforcedSet<E>() |==> <NO-OP>
568:EVR:<METHOD_INVOCATION(org.jgrapht.graph.AbstractBaseGraph.DirectedEdgeContainer<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):784:getEdgeContainer(sourceVertex) |==> null
569:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):786:ec.outgoing.iterator() |==> null
570:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):789:iter.next() |==> null
571:COR:getEdgeTarget(e).equals(targetVertex):TRUE:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):791:getEdgeTarget(e).equals(targetVertex) |==> false
572:COR:getEdgeTarget(e).equals(targetVertex):FALSE:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):791:getEdgeTarget(e).equals(targetVertex) |==> true
573:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):792:edges.add(e) |==> <NO-OP>
574:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getAllEdges(V,V):797:edges |==> null
575:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):805:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex) == containsVertex(targetVertex)
576:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):806:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> false
577:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):805:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex)
578:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):806:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(targetVertex)
579:EVR:<METHOD_INVOCATION(org.jgrapht.graph.AbstractBaseGraph.DirectedEdgeContainer<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):808:getEdgeContainer(sourceVertex) |==> null
580:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):810:ec.outgoing.iterator() |==> null
581:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):813:iter.next() |==> null
582:COR:getEdgeTarget(e).equals(targetVertex):TRUE:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):815:getEdgeTarget(e).equals(targetVertex) |==> false
583:COR:getEdgeTarget(e).equals(targetVertex):FALSE:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):815:getEdgeTarget(e).equals(targetVertex) |==> true
584:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdge(V,V):816:return e; |==> <NO-OP>
585:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@addEdgeToTouchingVertices(E):829:getEdgeSource(e) |==> null
586:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@addEdgeToTouchingVertices(E):830:getEdgeTarget(e) |==> null
587:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@addEdgeToTouchingVertices(E):832:getEdgeContainer(source).addOutgoingEdge(e) |==> <NO-OP>
588:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@addEdgeToTouchingVertices(E):833:getEdgeContainer(target).addIncomingEdge(e) |==> <NO-OP>
589:EVR:<NEW_CLASS(org.jgrapht.util.ArrayUnenforcedSet<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):850:new ArrayUnenforcedSet<E>(getEdgeContainer(vertex).incoming) |==> null
590:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):851:inAndOut.addAll(getEdgeContainer(vertex).outgoing) |==> <NO-OP>
591:COR:allowingLoops:TRUE:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):854:allowingLoops |==> false
592:COR:allowingLoops:FALSE:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):854:allowingLoops |==> true
593:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):855:getAllEdges(vertex, vertex) |==> null
594:LVR:0:POS:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):857:0 |==> 1
595:LVR:0:NEG:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):857:0 |==> -1
596:ROR:<(int,int):!=(int,int):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):857:i < inAndOut.size() |==> i != inAndOut.size()
597:ROR:<(int,int):<=(int,int):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):857:i < inAndOut.size() |==> i <= inAndOut.size()
598:ROR:<(int,int):FALSE(int,int):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):857:i < inAndOut.size() |==> false
599:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):858:inAndOut.get(i) |==> null
600:COR:loops.contains(e):TRUE:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):860:loops.contains(e) |==> false
601:COR:loops.contains(e):FALSE:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):860:loops.contains(e) |==> true
602:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):861:inAndOut.remove(i) |==> <NO-OP>
603:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):862:loops.remove(e) |==> <NO-OP>
604:STD:<INC>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):864:i++ |==> <NO-OP>
605:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@edgesOf(V):869:Collections.unmodifiableSet(inAndOut) |==> null
606:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@inDegreeOf(V):877:getEdgeContainer(vertex).incoming.size() |==> 0
607:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@incomingEdgesOf(V):885:getEdgeContainer(vertex).getUnmodifiableIncomingEdges() |==> null
608:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@outDegreeOf(V):893:getEdgeContainer(vertex).outgoing.size() |==> 0
609:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@outgoingEdgesOf(V):901:getEdgeContainer(vertex).getUnmodifiableOutgoingEdges() |==> null
610:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@removeEdgeFromTouchingVertices(E):909:getEdgeSource(e) |==> null
611:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@removeEdgeFromTouchingVertices(E):910:getEdgeTarget(e) |==> null
612:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@removeEdgeFromTouchingVertices(E):912:getEdgeContainer(source).removeOutgoingEdge(e) |==> <NO-OP>
613:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@removeEdgeFromTouchingVertices(E):913:getEdgeContainer(target).removeIncomingEdge(e) |==> <NO-OP>
614:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdgeContainer(V):925:assertVertexExist(vertex) |==> <NO-OP>
615:EVR:<METHOD_INVOCATION(org.jgrapht.graph.AbstractBaseGraph.DirectedEdgeContainer<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdgeContainer(V):927:vertexMapDirected.get(vertex) |==> null
616:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdgeContainer(V):929:ec == null |==> false
617:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdgeContainer(V):930:ec = new DirectedEdgeContainer<V, E>(edgeSetFactory, vertex) |==> <NO-OP>
618:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdgeContainer(V):931:vertexMapDirected.put(vertex, ec) |==> <NO-OP>
619:EVR:<IDENTIFIER(org.jgrapht.graph.AbstractBaseGraph.DirectedEdgeContainer<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$DirectedSpecifics@getEdgeContainer(V):934:ec |==> null
620:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer@<init>(org.jgrapht.graph.EdgeSetFactory<VV,EE>,VV):958:vertexEdges = edgeSetFactory.createEdgeSet(vertex) |==> <NO-OP>
621:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer@getUnmodifiableVertexEdges():968:unmodifiableVertexEdges == null |==> false
622:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer@getUnmodifiableVertexEdges():969:unmodifiableVertexEdges = Collections.unmodifiableSet(vertexEdges) |==> <NO-OP>
623:EVR:<IDENTIFIER(java.util.Set<EE>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer@getUnmodifiableVertexEdges():973:unmodifiableVertexEdges |==> null
624:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer@addEdge(EE):983:vertexEdges.add(e) |==> <NO-OP>
625:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer@edgeCount():993:vertexEdges.size() |==> 0
626:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedEdgeContainer@removeEdge(EE):1003:vertexEdges.remove(e) |==> <NO-OP>
627:EVR:<NEW_CLASS(java.util.LinkedHashMap<V,org.jgrapht.graph.AbstractBaseGraph.UndirectedEdgeContainer<V,E>>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics:1021:new LinkedHashMap<V, UndirectedEdgeContainer<V, E>>() |==> null
628:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@addVertex(V):1026:vertexMapUndirected.put(v, null) |==> <NO-OP>
629:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getVertexSet():1031:vertexMapUndirected.keySet() |==> null
630:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1041:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex) == containsVertex(targetVertex)
631:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1042:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> false
632:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1041:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex)
633:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1042:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(targetVertex)
634:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1044:edges = new ArrayUnenforcedSet<E>() |==> <NO-OP>
635:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1047:getEdgeContainer(sourceVertex).vertexEdges.iterator() |==> null
636:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1050:iter.next() |==> null
637:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1053:isEqualsStraightOrInverted(sourceVertex, targetVertex, e) |==> false
638:COR:equal:TRUE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1058:equal |==> false
639:COR:equal:FALSE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1058:equal |==> true
640:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1059:edges.add(e) |==> <NO-OP>
641:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getAllEdges(V,V):1064:edges |==> null
642:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1072:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex) == containsVertex(targetVertex)
643:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1073:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> false
644:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1072:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex)
645:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1073:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(targetVertex)
646:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1076:getEdgeContainer(sourceVertex).vertexEdges.iterator() |==> null
647:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1079:iter.next() |==> null
648:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1082:isEqualsStraightOrInverted(sourceVertex, targetVertex, e) |==> false
649:COR:equal:TRUE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1087:equal |==> false
650:COR:equal:FALSE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1087:equal |==> true
651:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdge(V,V):1088:return e; |==> <NO-OP>
652:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1102:sourceVertex.equals(getEdgeSource(e)) && targetVertex.equals(getEdgeTarget(e)) |==> sourceVertex.equals(getEdgeSource(e)) == targetVertex.equals(getEdgeTarget(e))
653:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1103:sourceVertex.equals(getEdgeSource(e)) && targetVertex.equals(getEdgeTarget(e)) |==> false
654:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1102:sourceVertex.equals(getEdgeSource(e)) && targetVertex.equals(getEdgeTarget(e)) |==> sourceVertex.equals(getEdgeSource(e))
655:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1103:sourceVertex.equals(getEdgeSource(e)) && targetVertex.equals(getEdgeTarget(e)) |==> targetVertex.equals(getEdgeTarget(e))
656:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1106:sourceVertex.equals(getEdgeTarget(e)) && targetVertex.equals(getEdgeSource(e)) |==> sourceVertex.equals(getEdgeTarget(e)) == targetVertex.equals(getEdgeSource(e))
657:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1107:sourceVertex.equals(getEdgeTarget(e)) && targetVertex.equals(getEdgeSource(e)) |==> false
658:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1106:sourceVertex.equals(getEdgeTarget(e)) && targetVertex.equals(getEdgeSource(e)) |==> sourceVertex.equals(getEdgeTarget(e))
659:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1107:sourceVertex.equals(getEdgeTarget(e)) && targetVertex.equals(getEdgeSource(e)) |==> targetVertex.equals(getEdgeSource(e))
660:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1108:equalStraight || equalInverted |==> equalStraight != equalInverted
661:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1108:equalStraight || equalInverted |==> equalStraight
662:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1108:equalStraight || equalInverted |==> equalInverted
663:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@isEqualsStraightOrInverted(java.lang.Object,java.lang.Object,E):1108:equalStraight || equalInverted |==> true
664:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@addEdgeToTouchingVertices(E):1116:getEdgeSource(e) |==> null
665:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@addEdgeToTouchingVertices(E):1117:getEdgeTarget(e) |==> null
666:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@addEdgeToTouchingVertices(E):1119:getEdgeContainer(source).addEdge(e) |==> <NO-OP>
667:COR:source.equals(target):TRUE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@addEdgeToTouchingVertices(E):1121:source.equals(target) |==> false
668:COR:source.equals(target):FALSE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@addEdgeToTouchingVertices(E):1121:source.equals(target) |==> true
669:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@addEdgeToTouchingVertices(E):1122:getEdgeContainer(target).addEdge(e) |==> <NO-OP>
670:COR:allowingLoops:TRUE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1131:allowingLoops |==> false
671:COR:allowingLoops:FALSE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1131:allowingLoops |==> true
672:LVR:0:POS:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1133:0 |==> 1
673:LVR:0:NEG:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1133:0 |==> -1
674:EVR:<MEMBER_SELECT(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1134:getEdgeContainer(vertex).vertexEdges |==> null
675:COR:getEdgeSource(e).equals(getEdgeTarget(e)):TRUE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1137:getEdgeSource(e).equals(getEdgeTarget(e)) |==> false
676:COR:getEdgeSource(e).equals(getEdgeTarget(e)):FALSE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1137:getEdgeSource(e).equals(getEdgeTarget(e)) |==> true
677:LVR:POS:0:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1138:2 |==> 0
678:LVR:POS:NEG:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1138:2 |==> -2
679:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1138:degree += 2 |==> <NO-OP>
680:LVR:POS:0:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1140:1 |==> 0
681:LVR:POS:NEG:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1140:1 |==> -1
682:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1140:degree += 1 |==> <NO-OP>
683:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1144:degree |==> 0
684:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@degreeOf(V):1146:getEdgeContainer(vertex).edgeCount() |==> 0
685:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@edgesOf(V):1155:getEdgeContainer(vertex).getUnmodifiableVertexEdges() |==> null
686:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@removeEdgeFromTouchingVertices(E):1195:getEdgeSource(e) |==> null
687:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@removeEdgeFromTouchingVertices(E):1196:getEdgeTarget(e) |==> null
688:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@removeEdgeFromTouchingVertices(E):1198:getEdgeContainer(source).removeEdge(e) |==> <NO-OP>
689:COR:source.equals(target):TRUE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@removeEdgeFromTouchingVertices(E):1200:source.equals(target) |==> false
690:COR:source.equals(target):FALSE:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@removeEdgeFromTouchingVertices(E):1200:source.equals(target) |==> true
691:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@removeEdgeFromTouchingVertices(E):1201:getEdgeContainer(target).removeEdge(e) |==> <NO-OP>
692:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdgeContainer(V):1214:assertVertexExist(vertex) |==> <NO-OP>
693:EVR:<METHOD_INVOCATION(org.jgrapht.graph.AbstractBaseGraph.UndirectedEdgeContainer<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdgeContainer(V):1216:vertexMapUndirected.get(vertex) |==> null
694:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdgeContainer(V):1218:ec == null |==> false
695:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdgeContainer(V):1219:ec = new UndirectedEdgeContainer<V, E>(edgeSetFactory, vertex) |==> <NO-OP>
696:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdgeContainer(V):1222:vertexMapUndirected.put(vertex, ec) |==> <NO-OP>
697:EVR:<IDENTIFIER(org.jgrapht.graph.AbstractBaseGraph.UndirectedEdgeContainer<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractBaseGraph$UndirectedSpecifics@getEdgeContainer(V):1225:ec |==> null
698:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractGraph@containsEdge(V,V):79:getEdge(sourceVertex, targetVertex) != null |==> true
699:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractGraph@removeAllEdges(java.util.Collection<? extends E>):87:false |==> true
700:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@removeAllEdges(java.util.Collection<? extends E>):90:modified |= removeEdge(e) |==> <NO-OP>
701:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@removeAllEdges(java.util.Collection<? extends E>):93:modified |==> false
702:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@removeAllEdges(V,V):101:getAllEdges(sourceVertex, targetVertex) |==> null
703:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractGraph@removeAllEdges(V,V):102:removed == null |==> false
704:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@removeAllEdges(V,V):103:return null; |==> <NO-OP>
705:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@removeAllEdges(V,V):105:removeAllEdges(removed) |==> <NO-OP>
706:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@removeAllEdges(V,V):107:removed |==> null
707:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractGraph@removeAllVertices(java.util.Collection<? extends V>):115:false |==> true
708:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@removeAllVertices(java.util.Collection<? extends V>):118:modified |= removeVertex(v) |==> <NO-OP>
709:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@removeAllVertices(java.util.Collection<? extends V>):121:modified |==> false
710:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@toString():133:toStringFromSets(vertexSet(), edgeSet(), (this instanceof DirectedGraph<?, ?>)) |==> null
711:COR:containsVertex(v):TRUE:org.jgrapht.graph.AbstractGraph@assertVertexExist(V):153:containsVertex(v) |==> false
712:COR:containsVertex(v):FALSE:org.jgrapht.graph.AbstractGraph@assertVertexExist(V):153:containsVertex(v) |==> true
713:LVR:TRUE:FALSE:org.jgrapht.graph.AbstractGraph@assertVertexExist(V):154:true |==> false
714:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractGraph@assertVertexExist(V):155:v == null |==> false
715:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractGraph@removeAllEdges(E[]):177:false |==> true
716:LVR:0:POS:org.jgrapht.graph.AbstractGraph@removeAllEdges(E[]):179:0 |==> 1
717:LVR:0:NEG:org.jgrapht.graph.AbstractGraph@removeAllEdges(E[]):179:0 |==> -1
718:ROR:<(int,int):!=(int,int):org.jgrapht.graph.AbstractGraph@removeAllEdges(E[]):179:i < edges.length |==> i != edges.length
719:ROR:<(int,int):<=(int,int):org.jgrapht.graph.AbstractGraph@removeAllEdges(E[]):179:i < edges.length |==> i <= edges.length
720:ROR:<(int,int):FALSE(int,int):org.jgrapht.graph.AbstractGraph@removeAllEdges(E[]):179:i < edges.length |==> false
721:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@removeAllEdges(E[]):180:modified |= removeEdge(edges[i]) |==> <NO-OP>
722:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@removeAllEdges(E[]):183:modified |==> false
723:EVR:<NEW_CLASS(java.util.ArrayList<java.lang.String>)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):201:new ArrayList<String>() |==> null
724:EVR:<NEW_CLASS(java.lang.StringBuffer)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):203:new StringBuffer() |==> null
725:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):205:e.getClass() != DefaultEdge.class |==> true
726:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):206:e.getClass() != DefaultWeightedEdge.class |==> true
727:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):205:(e.getClass() != DefaultEdge.class) && (e.getClass() != DefaultWeightedEdge.class) |==> (e.getClass() != DefaultEdge.class) == (e.getClass() != DefaultWeightedEdge.class)
728:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):206:(e.getClass() != DefaultEdge.class) && (e.getClass() != DefaultWeightedEdge.class) |==> false
729:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):205:(e.getClass() != DefaultEdge.class) && (e.getClass() != DefaultWeightedEdge.class) |==> (e.getClass() != DefaultEdge.class)
730:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):206:(e.getClass() != DefaultEdge.class) && (e.getClass() != DefaultWeightedEdge.class) |==> (e.getClass() != DefaultWeightedEdge.class)
731:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):208:sb.append(e.toString()) |==> <NO-OP>
732:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):209:sb.append("=") |==> <NO-OP>
733:COR:directed:TRUE:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):211:directed |==> false
734:COR:directed:FALSE:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):211:directed |==> true
735:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):212:sb.append("(") |==> <NO-OP>
736:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):214:sb.append("{") |==> <NO-OP>
737:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):216:sb.append(getEdgeSource(e)) |==> <NO-OP>
738:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):217:sb.append(",") |==> <NO-OP>
739:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):218:sb.append(getEdgeTarget(e)) |==> <NO-OP>
740:COR:directed:TRUE:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):219:directed |==> false
741:COR:directed:FALSE:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):219:directed |==> true
742:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):220:sb.append(")") |==> <NO-OP>
743:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):222:sb.append("}") |==> <NO-OP>
744:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):226:renderedEdges.add(sb.toString()) |==> <NO-OP>
745:LVR:0:POS:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):227:0 |==> 1
746:LVR:0:NEG:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):227:0 |==> -1
747:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):227:sb.setLength(0) |==> <NO-OP>
748:EVR:<PLUS(java.lang.String)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@toStringFromSets(java.util.Collection<? extends V>,java.util.Collection<? extends E>,boolean):230:"(" + vertexSet + ", " + renderedEdges + ")" |==> null
749:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@hashCode():244:vertexSet().hashCode() |==> 0
750:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@hashCode():247:e.hashCode() |==> 0
751:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@hashCode():249:getEdgeSource(e).hashCode() |==> 0
752:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@hashCode():250:getEdgeTarget(e).hashCode() |==> 0
753:AOR:+(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:source + target |==> source % target
754:AOR:+(int,int):*(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:source + target |==> source * target
755:AOR:+(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:source + target |==> source - target
756:AOR:+(int,int):/(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:source + target |==> source / target
757:AOR:+(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():255:source + target |==> source % target
758:AOR:+(int,int):*(int,int):org.jgrapht.graph.AbstractGraph@hashCode():255:source + target |==> source * target
759:AOR:+(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():255:source + target |==> source - target
760:AOR:+(int,int):/(int,int):org.jgrapht.graph.AbstractGraph@hashCode():255:source + target |==> source / target
761:LVR:POS:0:org.jgrapht.graph.AbstractGraph@hashCode():255:1 |==> 0
762:LVR:POS:NEG:org.jgrapht.graph.AbstractGraph@hashCode():255:1 |==> -1
763:AOR:+(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():255:source + target + 1 |==> (source + target) % 1
764:AOR:+(int,int):*(int,int):org.jgrapht.graph.AbstractGraph@hashCode():255:source + target + 1 |==> (source + target) * 1
765:AOR:+(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():255:source + target + 1 |==> source + target - 1
766:AOR:+(int,int):/(int,int):org.jgrapht.graph.AbstractGraph@hashCode():255:source + target + 1 |==> (source + target) / 1
767:AOR:*(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:(source + target) * (source + target + 1) |==> (source + target) % (source + target + 1)
768:AOR:*(int,int):+(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:(source + target) * (source + target + 1) |==> (source + target) + (source + target + 1)
769:AOR:*(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:(source + target) * (source + target + 1) |==> (source + target) - (source + target + 1)
770:AOR:*(int,int):/(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:(source + target) * (source + target + 1) |==> (source + target) / (source + target + 1)
771:LVR:POS:0:org.jgrapht.graph.AbstractGraph@hashCode():255:2 |==> 0
772:LVR:POS:NEG:org.jgrapht.graph.AbstractGraph@hashCode():255:2 |==> -2
773:AOR:/(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:(source + target) * (source + target + 1) / 2 |==> (source + target) * (source + target + 1) % 2
774:AOR:/(int,int):*(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:(source + target) * (source + target + 1) / 2 |==> (source + target) * (source + target + 1) * 2
775:AOR:/(int,int):+(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:(source + target) * (source + target + 1) / 2 |==> (source + target) * (source + target + 1) + 2
776:AOR:/(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:(source + target) * (source + target + 1) / 2 |==> (source + target) * (source + target + 1) - 2
777:AOR:+(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:((source + target) * (source + target + 1) / 2) + target |==> ((source + target) * (source + target + 1) / 2) % target
778:AOR:+(int,int):*(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:((source + target) * (source + target + 1) / 2) + target |==> ((source + target) * (source + target + 1) / 2) * target
779:AOR:+(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:((source + target) * (source + target + 1) / 2) + target |==> ((source + target) * (source + target + 1) / 2) - target
780:AOR:+(int,int):/(int,int):org.jgrapht.graph.AbstractGraph@hashCode():254:((source + target) * (source + target + 1) / 2) + target |==> ((source + target) * (source + target + 1) / 2) / target
781:LVR:POS:0:org.jgrapht.graph.AbstractGraph@hashCode():256:27 |==> 0
782:LVR:POS:NEG:org.jgrapht.graph.AbstractGraph@hashCode():256:27 |==> -27
783:AOR:*(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():256:27 * part |==> 27 % part
784:AOR:*(int,int):+(int,int):org.jgrapht.graph.AbstractGraph@hashCode():256:27 * part |==> 27 + part
785:AOR:*(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():256:27 * part |==> 27 - part
786:AOR:*(int,int):/(int,int):org.jgrapht.graph.AbstractGraph@hashCode():256:27 * part |==> 27 / part
787:AOR:+(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():256:(27 * part) + pairing |==> (27 * part) % pairing
788:AOR:+(int,int):*(int,int):org.jgrapht.graph.AbstractGraph@hashCode():256:(27 * part) + pairing |==> (27 * part) * pairing
789:AOR:+(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():256:(27 * part) + pairing |==> (27 * part) - pairing
790:AOR:+(int,int):/(int,int):org.jgrapht.graph.AbstractGraph@hashCode():256:(27 * part) + pairing |==> (27 * part) / pairing
791:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@hashCode():256:part = (27 * part) + pairing |==> <NO-OP>
792:EVR:<TYPE_CAST(long)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@hashCode():258:(long)getEdgeWeight(e) |==> 0L
793:LVR:POS:0:org.jgrapht.graph.AbstractGraph@hashCode():259:27 |==> 0
794:LVR:POS:NEG:org.jgrapht.graph.AbstractGraph@hashCode():259:27 |==> -27
795:AOR:*(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():259:27 * part |==> 27 % part
796:AOR:*(int,int):+(int,int):org.jgrapht.graph.AbstractGraph@hashCode():259:27 * part |==> 27 + part
797:AOR:*(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():259:27 * part |==> 27 - part
798:AOR:*(int,int):/(int,int):org.jgrapht.graph.AbstractGraph@hashCode():259:27 * part |==> 27 / part
799:LVR:POS:0:org.jgrapht.graph.AbstractGraph@hashCode():259:32 |==> 0
800:LVR:POS:NEG:org.jgrapht.graph.AbstractGraph@hashCode():259:32 |==> -32
801:SOR:>>>(long,int):<<(long,int):org.jgrapht.graph.AbstractGraph@hashCode():259:weight >>> 32 |==> weight << 32
802:SOR:>>>(long,int):>>(long,int):org.jgrapht.graph.AbstractGraph@hashCode():259:weight >>> 32 |==> weight >> 32
803:LOR:^(long,long):&(long,long):org.jgrapht.graph.AbstractGraph@hashCode():259:weight ^ (weight >>> 32) |==> weight & (weight >>> 32)
804:LOR:^(long,long):|(long,long):org.jgrapht.graph.AbstractGraph@hashCode():259:weight ^ (weight >>> 32) |==> weight | (weight >>> 32)
805:AOR:+(int,int):%(int,int):org.jgrapht.graph.AbstractGraph@hashCode():259:(27 * part) + (int)(weight ^ (weight >>> 32)) |==> (27 * part) % (int)(weight ^ (weight >>> 32))
806:AOR:+(int,int):*(int,int):org.jgrapht.graph.AbstractGraph@hashCode():259:(27 * part) + (int)(weight ^ (weight >>> 32)) |==> (27 * part) * (int)(weight ^ (weight >>> 32))
807:AOR:+(int,int):-(int,int):org.jgrapht.graph.AbstractGraph@hashCode():259:(27 * part) + (int)(weight ^ (weight >>> 32)) |==> (27 * part) - (int)(weight ^ (weight >>> 32))
808:AOR:+(int,int):/(int,int):org.jgrapht.graph.AbstractGraph@hashCode():259:(27 * part) + (int)(weight ^ (weight >>> 32)) |==> (27 * part) / (int)(weight ^ (weight >>> 32))
809:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@hashCode():259:part = (27 * part) + (int)(weight ^ (weight >>> 32)) |==> <NO-OP>
810:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@hashCode():261:hash += part |==> <NO-OP>
811:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@hashCode():264:hash |==> 0
812:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):281:this == obj |==> false
813:LVR:TRUE:FALSE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):282:true |==> false
814:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):282:return Config.__M_NO == 0 && Config.COVERED(813, 813) ? true : Config.__M_NO == 813 ? false : true; |==> <NO-OP>
815:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):284:obj == null |==> false
816:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):284:getClass() != obj.getClass() |==> true
817:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):284:(obj == null) || (getClass() != obj.getClass()) |==> (obj == null) != (getClass() != obj.getClass())
818:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):284:(obj == null) || (getClass() != obj.getClass()) |==> (obj == null)
819:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):284:(obj == null) || (getClass() != obj.getClass()) |==> (getClass() != obj.getClass())
820:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):284:(obj == null) || (getClass() != obj.getClass()) |==> true
821:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):285:false |==> true
822:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):285:return Config.__M_NO == 0 && Config.COVERED(821, 821) ? false : Config.__M_NO == 821 ? true : false; |==> <NO-OP>
823:EVR:<METHOD_INVOCATION(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):289:TypeUtil.uncheckedCast(obj, typeDecl) |==> null
824:COR:vertexSet().equals(g.vertexSet()):TRUE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):291:vertexSet().equals(g.vertexSet()) |==> false
825:COR:vertexSet().equals(g.vertexSet()):FALSE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):291:vertexSet().equals(g.vertexSet()) |==> true
826:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):292:false |==> true
827:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):292:return Config.__M_NO == 0 && Config.COVERED(826, 826) ? false : Config.__M_NO == 826 ? true : false; |==> <NO-OP>
828:ROR:!=(int,int):<(int,int):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):294:edgeSet().size() != g.edgeSet().size() |==> edgeSet().size() < g.edgeSet().size()
829:ROR:!=(int,int):>(int,int):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):294:edgeSet().size() != g.edgeSet().size() |==> edgeSet().size() > g.edgeSet().size()
830:ROR:!=(int,int):TRUE(int,int):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):294:edgeSet().size() != g.edgeSet().size() |==> true
831:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):295:false |==> true
832:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):295:return Config.__M_NO == 0 && Config.COVERED(831, 831) ? false : Config.__M_NO == 831 ? true : false; |==> <NO-OP>
833:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):299:getEdgeSource(e) |==> null
834:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):300:getEdgeTarget(e) |==> null
835:COR:g.containsEdge(e):TRUE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):302:g.containsEdge(e) |==> false
836:COR:g.containsEdge(e):FALSE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):302:g.containsEdge(e) |==> true
837:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):303:false |==> true
838:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):303:return Config.__M_NO == 0 && Config.COVERED(837, 837) ? false : Config.__M_NO == 837 ? true : false; |==> <NO-OP>
839:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):306:!g.getEdgeSource(e).equals(source) || !g.getEdgeTarget(e).equals(target) |==> !g.getEdgeSource(e).equals(source) != !g.getEdgeTarget(e).equals(target)
840:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):306:!g.getEdgeSource(e).equals(source) || !g.getEdgeTarget(e).equals(target) |==> !g.getEdgeSource(e).equals(source)
841:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):307:!g.getEdgeSource(e).equals(source) || !g.getEdgeTarget(e).equals(target) |==> !g.getEdgeTarget(e).equals(target)
842:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):307:!g.getEdgeSource(e).equals(source) || !g.getEdgeTarget(e).equals(target) |==> true
843:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):309:false |==> true
844:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):309:return Config.__M_NO == 0 && Config.COVERED(843, 843) ? false : Config.__M_NO == 843 ? true : false; |==> <NO-OP>
845:AOR:-(double,double):%(double,double):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):312:getEdgeWeight(e) - g.getEdgeWeight(e) |==> getEdgeWeight(e) % g.getEdgeWeight(e)
846:AOR:-(double,double):*(double,double):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):312:getEdgeWeight(e) - g.getEdgeWeight(e) |==> getEdgeWeight(e) * g.getEdgeWeight(e)
847:AOR:-(double,double):+(double,double):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):312:getEdgeWeight(e) - g.getEdgeWeight(e) |==> getEdgeWeight(e) + g.getEdgeWeight(e)
848:AOR:-(double,double):/(double,double):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):312:getEdgeWeight(e) - g.getEdgeWeight(e) |==> getEdgeWeight(e) / g.getEdgeWeight(e)
849:LVR:POS:0:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):312:1.0E-6 |==> 0.0
850:LVR:POS:NEG:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):312:1.0E-6 |==> -1.0E-6
851:ROR:>(double,double):!=(double,double):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):312:Math.abs(getEdgeWeight(e) - g.getEdgeWeight(e)) > 1.0E-6 |==> Math.abs(getEdgeWeight(e) - g.getEdgeWeight(e)) != 1.0E-6
852:ROR:>(double,double):>=(double,double):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):312:Math.abs(getEdgeWeight(e) - g.getEdgeWeight(e)) > 1.0E-6 |==> Math.abs(getEdgeWeight(e) - g.getEdgeWeight(e)) >= 1.0E-6
853:ROR:>(double,double):FALSE(double,double):org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):312:Math.abs(getEdgeWeight(e) - g.getEdgeWeight(e)) > 1.0E-6 |==> false
854:LVR:FALSE:TRUE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):313:false |==> true
855:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):313:return Config.__M_NO == 0 && Config.COVERED(854, 854) ? false : Config.__M_NO == 854 ? true : false; |==> <NO-OP>
856:LVR:TRUE:FALSE:org.jgrapht.graph.AbstractGraph@equals(java.lang.Object):317:true |==> false
857:EVR:<IDENTIFIER(java.lang.Object)>:<DEFAULT>:org.jgrapht.graph.DefaultEdge@getSource():68:source |==> null
858:EVR:<IDENTIFIER(java.lang.Object)>:<DEFAULT>:org.jgrapht.graph.DefaultEdge@getTarget():79:target |==> null
859:EVR:<PLUS(java.lang.String)>:<DEFAULT>:org.jgrapht.graph.DefaultEdge@toString():84:"(" + source + " : " + target + ")" |==> null
860:EVR:<METHOD_INVOCATION(java.lang.Object)>:<DEFAULT>:org.jgrapht.graph.IntrusiveEdge@clone():71:super.clone() |==> null
861:EVR:<TYPE_CAST(T)>:<DEFAULT>:org.jgrapht.util.TypeUtil@uncheckedCast(java.lang.Object,org.jgrapht.util.TypeUtil<T>):60:(T)o |==> null
862:EVR:<IDENTIFIER(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@<init>(org.jgrapht.Graph<V,E>):71:graph |==> null
863:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@getAllMaximalCliques():88:cliques = new ArrayList<Set<V>>() |==> <NO-OP>
864:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@getAllMaximalCliques():89:new ArrayList<V>() |==> null
865:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@getAllMaximalCliques():90:new ArrayList<V>() |==> null
866:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@getAllMaximalCliques():91:new ArrayList<V>() |==> null
867:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@getAllMaximalCliques():92:candidates.addAll(graph.vertexSet()) |==> <NO-OP>
868:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@getAllMaximalCliques():93:findCliques(potential_clique, candidates, already_found) |==> <NO-OP>
869:EVR:<IDENTIFIER(java.util.Collection<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@getAllMaximalCliques():94:cliques |==> null
870:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():106:getAllMaximalCliques() |==> <NO-OP>
871:LVR:0:POS:org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():108:0 |==> 1
872:LVR:0:NEG:org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():108:0 |==> -1
873:EVR:<NEW_CLASS(java.util.ArrayList<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():109:new ArrayList<Set<V>>() |==> null
874:ROR:<(int,int):!=(int,int):org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():111:maximum < clique.size() |==> maximum != clique.size()
875:ROR:<(int,int):<=(int,int):org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():111:maximum < clique.size() |==> maximum <= clique.size()
876:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():111:maximum < clique.size() |==> false
877:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():112:maximum = clique.size() |==> <NO-OP>
878:ROR:==(int,int):<=(int,int):org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():116:maximum == clique.size() |==> maximum <= clique.size()
879:ROR:==(int,int):>=(int,int):org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():116:maximum == clique.size() |==> maximum >= clique.size()
880:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():116:maximum == clique.size() |==> false
881:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():117:biggest_cliques.add(clique) |==> <NO-OP>
882:EVR:<IDENTIFIER(java.util.Collection<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@getBiggestMaximalCliques():120:biggest_cliques |==> null
883:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):128:new ArrayList<V>(candidates) |==> null
884:COR:end(candidates, already_found):TRUE:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):129:end(candidates, already_found) |==> false
885:COR:end(candidates, already_found):FALSE:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):129:end(candidates, already_found) |==> true
886:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):132:new ArrayList<V>() |==> null
887:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):133:new ArrayList<V>() |==> null
888:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):136:potential_clique.add(candidate) |==> <NO-OP>
889:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):137:candidates.remove(candidate) |==> <NO-OP>
890:COR:graph.containsEdge(candidate, new_candidate):TRUE:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):142:graph.containsEdge(candidate, new_candidate) |==> false
891:COR:graph.containsEdge(candidate, new_candidate):FALSE:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):142:graph.containsEdge(candidate, new_candidate) |==> true
892:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):143:new_candidates.add(new_candidate) |==> <NO-OP>
893:COR:graph.containsEdge(candidate, new_found):TRUE:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):150:graph.containsEdge(candidate, new_found) |==> false
894:COR:graph.containsEdge(candidate, new_found):FALSE:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):150:graph.containsEdge(candidate, new_found) |==> true
895:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):151:new_already_found.add(new_found) |==> <NO-OP>
896:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):156:new_candidates.isEmpty() && new_already_found.isEmpty() |==> new_candidates.isEmpty() == new_already_found.isEmpty()
897:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):156:new_candidates.isEmpty() && new_already_found.isEmpty() |==> false
898:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):156:new_candidates.isEmpty() && new_already_found.isEmpty() |==> new_candidates.isEmpty()
899:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):156:new_candidates.isEmpty() && new_already_found.isEmpty() |==> new_already_found.isEmpty()
900:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):158:cliques.add(new HashSet<V>(potential_clique)) |==> <NO-OP>
901:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):162:findCliques(potential_clique, new_candidates, new_already_found) |==> <NO-OP>
902:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):169:already_found.add(candidate) |==> <NO-OP>
903:STD:<CALL>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@findCliques(java.util.List<V>,java.util.List<V>,java.util.List<V>):170:potential_clique.remove(candidate) |==> <NO-OP>
904:LVR:FALSE:TRUE:org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):178:false |==> true
905:LVR:0:POS:org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):181:0 |==> 1
906:LVR:0:NEG:org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):181:0 |==> -1
907:COR:graph.containsEdge(found, candidate):TRUE:org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):183:graph.containsEdge(found, candidate) |==> false
908:COR:graph.containsEdge(found, candidate):FALSE:org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):183:graph.containsEdge(found, candidate) |==> true
909:STD:<INC>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):184:edgecounter++ |==> <NO-OP>
910:ROR:==(int,int):<=(int,int):org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):187:edgecounter == candidates.size() |==> edgecounter <= candidates.size()
911:ROR:==(int,int):>=(int,int):org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):187:edgecounter == candidates.size() |==> edgecounter >= candidates.size()
912:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):187:edgecounter == candidates.size() |==> false
913:LVR:TRUE:FALSE:org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):188:true |==> false
914:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):188:end = true |==> <NO-OP>
915:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.alg.BronKerboschCliqueFinder@end(java.util.List<V>,java.util.List<V>):191:end |==> false
916:EVR:<METHOD_INVOCATION(java.util.Map<java.lang.Integer,java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyChromaticNumber(org.jgrapht.UndirectedGraph<V,E>):71:findGreedyColoredGroups(g) |==> null
917:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyChromaticNumber(org.jgrapht.UndirectedGraph<V,E>):72:coloredGroups.keySet().size() |==> 0
918:EVR:<NEW_CLASS(org.jgrapht.graph.UndirectedSubgraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):85:new UndirectedSubgraph<V, E>(g, null, null) |==> null
919:EVR:<NEW_CLASS(org.jgrapht.alg.util.VertexDegreeComparator<V,E>)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):90:new VertexDegreeComparator<V, E>(sg) |==> null
920:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):91:new LinkedList<V>(sg.vertexSet()) |==> null
921:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):92:Collections.sort(sortedVertices, comp) |==> <NO-OP>
922:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):93:Collections.reverse(sortedVertices) |==> <NO-OP>
923:EVR:<NEW_CLASS(java.util.HashMap<java.lang.Integer,java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):98:new HashMap<Integer, Set<V>>() |==> null
924:LVR:0:POS:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):103:0 |==> 1
925:LVR:0:NEG:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):103:0 |==> -1
926:LVR:0:POS:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):103:0 |==> 1
927:LVR:0:NEG:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):103:0 |==> -1
928:ROR:>(int,int):!=(int,int):org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):103:sg.vertexSet().size() > 0 |==> sg.vertexSet().size() != 0
929:ROR:>(int,int):>=(int,int):org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):103:sg.vertexSet().size() > 0 |==> sg.vertexSet().size() >= 0
930:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):103:sg.vertexSet().size() > 0 |==> false
931:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):106:new HashSet<V>() |==> null
932:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):108:sortedVertices.iterator() |==> null
933:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):111:iter.next() |==> null
934:LVR:TRUE:FALSE:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):116:true |==> false
935:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):118:currentColor.iterator() |==> null
936:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):121:innerIter.next() |==> null
937:COR:sg.containsEdge(temp, v):TRUE:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):122:sg.containsEdge(temp, v) |==> false
938:COR:sg.containsEdge(temp, v):FALSE:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):122:sg.containsEdge(temp, v) |==> true
939:LVR:FALSE:TRUE:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):123:false |==> true
940:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):123:flag = false |==> <NO-OP>
941:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):124:break; |==> <NO-OP>
942:COR:flag:TRUE:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):127:flag |==> false
943:COR:flag:FALSE:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):127:flag |==> true
944:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):128:currentColor.add(v) |==> <NO-OP>
945:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):129:iter.remove() |==> <NO-OP>
946:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):134:coloredGroups.put(color, currentColor) |==> <NO-OP>
947:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):138:sg.removeAllVertices(currentColor) |==> <NO-OP>
948:EVR:<IDENTIFIER(java.util.Map<java.lang.Integer,java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.ChromaticNumber@findGreedyColoredGroups(org.jgrapht.UndirectedGraph<V,E>):140:coloredGroups |==> null
949:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@<init>(org.jgrapht.UndirectedGraph<V,E>):91:init() |==> <NO-OP>
950:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@<init>(org.jgrapht.UndirectedGraph<V,E>):92:this.graph = g |==> <NO-OP>
951:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@<init>(org.jgrapht.DirectedGraph<V,E>):102:init() |==> <NO-OP>
952:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@<init>(org.jgrapht.DirectedGraph<V,E>):103:this.graph = new AsUndirectedGraph<V, E>(g) |==> <NO-OP>
953:LVR:POS:0:org.jgrapht.alg.ConnectivityInspector@isGraphConnected():116:1 |==> 0
954:LVR:POS:NEG:org.jgrapht.alg.ConnectivityInspector@isGraphConnected():116:1 |==> -1
955:ROR:==(int,int):<=(int,int):org.jgrapht.alg.ConnectivityInspector@isGraphConnected():116:lazyFindConnectedSets().size() == 1 |==> lazyFindConnectedSets().size() <= 1
956:ROR:==(int,int):>=(int,int):org.jgrapht.alg.ConnectivityInspector@isGraphConnected():116:lazyFindConnectedSets().size() == 1 |==> lazyFindConnectedSets().size() >= 1
957:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.ConnectivityInspector@isGraphConnected():116:lazyFindConnectedSets().size() == 1 |==> false
958:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector@connectedSetOf(V):133:vertexToConnectedSet.get(vertex) |==> null
959:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.ConnectivityInspector@connectedSetOf(V):135:connectedSet == null |==> false
960:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@connectedSetOf(V):136:connectedSet = new HashSet<V>() |==> <NO-OP>
961:EVR:<NEW_CLASS(org.jgrapht.traverse.BreadthFirstIterator<V,E>)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector@connectedSetOf(V):139:new BreadthFirstIterator<V, E>(graph, vertex) |==> null
962:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@connectedSetOf(V):142:connectedSet.add(i.next()) |==> <NO-OP>
963:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@connectedSetOf(V):145:vertexToConnectedSet.put(vertex, connectedSet) |==> <NO-OP>
964:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector@connectedSetOf(V):148:connectedSet |==> null
965:EVR:<METHOD_INVOCATION(java.util.List<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector@connectedSets():164:lazyFindConnectedSets() |==> null
966:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):172:init() |==> <NO-OP>
967:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):181:init() |==> <NO-OP>
968:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector@pathExists(V,V):205:connectedSetOf(sourceVertex) |==> null
969:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector@pathExists(V,V):207:sourceSet.contains(targetVertex) |==> false
970:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@vertexAdded(org.jgrapht.event.GraphVertexChangeEvent<V>):215:init() |==> <NO-OP>
971:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@vertexRemoved(org.jgrapht.event.GraphVertexChangeEvent<V>):224:init() |==> <NO-OP>
972:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@init():230:connectedSets = null |==> <NO-OP>
973:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@init():231:vertexToConnectedSet = new HashMap<V, Set<V>>() |==> <NO-OP>
974:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():236:connectedSets == null |==> false
975:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():237:connectedSets = new ArrayList<Set<V>>() |==> <NO-OP>
976:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():239:graph.vertexSet() |==> null
977:LVR:0:POS:org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():241:0 |==> 1
978:LVR:0:NEG:org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():241:0 |==> -1
979:ROR:>(int,int):!=(int,int):org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():241:vertexSet.size() > 0 |==> vertexSet.size() != 0
980:ROR:>(int,int):>=(int,int):org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():241:vertexSet.size() > 0 |==> vertexSet.size() >= 0
981:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():241:vertexSet.size() > 0 |==> false
982:EVR:<NEW_CLASS(org.jgrapht.traverse.BreadthFirstIterator<V,E>)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():243:new BreadthFirstIterator<V, E>(graph, null) |==> null
983:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():244:i.addTraversalListener(new MyTraversalListener()) |==> <NO-OP>
984:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():247:i.next() |==> <NO-OP>
985:EVR:<IDENTIFIER(java.util.List<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector@lazyFindConnectedSets():252:connectedSets |==> null
986:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector$MyTraversalListener@connectedComponentFinished(org.jgrapht.event.ConnectedComponentTraversalEvent):275:connectedSets.add(currentConnectedSet) |==> <NO-OP>
987:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector$MyTraversalListener@connectedComponentStarted(org.jgrapht.event.ConnectedComponentTraversalEvent):284:currentConnectedSet = new HashSet<V>() |==> <NO-OP>
988:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.ConnectivityInspector$MyTraversalListener@vertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):292:e.getVertex() |==> null
989:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector$MyTraversalListener@vertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):293:currentConnectedSet.add(v) |==> <NO-OP>
990:STD:<CALL>:<NO-OP>:org.jgrapht.alg.ConnectivityInspector$MyTraversalListener@vertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):294:vertexToConnectedSet.put(v, currentConnectedSet) |==> <NO-OP>
991:STD:<ASSIGN>:<NO-OP>:org.jgrapht.event.ConnectedComponentTraversalEvent@<init>(java.lang.Object,int):84:this.type = type |==> <NO-OP>
992:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.event.ConnectedComponentTraversalEvent@getType():96:type |==> 0
993:STD:<ASSIGN>:<NO-OP>:org.jgrapht.event.VertexTraversalEvent@<init>(java.lang.Object,V):74:this.vertex = vertex |==> <NO-OP>
994:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.event.VertexTraversalEvent@getVertex():86:vertex |==> null
995:STD:<ASSIGN>:<NO-OP>:org.jgrapht.event.EdgeTraversalEvent@<init>(java.lang.Object,E):74:this.edge = edge |==> <NO-OP>
996:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.event.EdgeTraversalEvent@getEdge():86:edge |==> null
997:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.CycleDetector@<init>(org.jgrapht.DirectedGraph<V,E>):73:this.graph = graph |==> <NO-OP>
998:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector@detectCycles():86:execute(null, null) |==> <NO-OP>
999:LVR:TRUE:FALSE:org.jgrapht.alg.CycleDetector@detectCycles():88:true |==> false
1000:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.CycleDetector@detectCycles():88:return Config.__M_NO == 0 && Config.COVERED(999, 999) ? true : Config.__M_NO == 999 ? false : true; |==> <NO-OP>
1001:LVR:FALSE:TRUE:org.jgrapht.alg.CycleDetector@detectCycles():91:false |==> true
1002:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector@detectCyclesContainingVertex(V):104:execute(null, v) |==> <NO-OP>
1003:LVR:TRUE:FALSE:org.jgrapht.alg.CycleDetector@detectCyclesContainingVertex(V):106:true |==> false
1004:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.CycleDetector@detectCyclesContainingVertex(V):106:return Config.__M_NO == 0 && Config.COVERED(1003, 1003) ? true : Config.__M_NO == 1003 ? false : true; |==> <NO-OP>
1005:LVR:FALSE:TRUE:org.jgrapht.alg.CycleDetector@detectCyclesContainingVertex(V):109:false |==> true
1006:EVR:<NEW_CLASS(org.jgrapht.alg.StrongConnectivityInspector<V,E>)>:<DEFAULT>:org.jgrapht.alg.CycleDetector@findCycles():123:new StrongConnectivityInspector<V, E>(graph) |==> null
1007:EVR:<METHOD_INVOCATION(java.util.List<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.CycleDetector@findCycles():124:inspector.stronglyConnectedSets() |==> null
1008:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.CycleDetector@findCycles():130:new HashSet<V>() |==> null
1009:LVR:POS:0:org.jgrapht.alg.CycleDetector@findCycles():132:1 |==> 0
1010:LVR:POS:NEG:org.jgrapht.alg.CycleDetector@findCycles():132:1 |==> -1
1011:ROR:>(int,int):!=(int,int):org.jgrapht.alg.CycleDetector@findCycles():132:component.size() > 1 |==> component.size() != 1
1012:ROR:>(int,int):>=(int,int):org.jgrapht.alg.CycleDetector@findCycles():132:component.size() > 1 |==> component.size() >= 1
1013:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.CycleDetector@findCycles():132:component.size() > 1 |==> false
1014:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector@findCycles():134:set.addAll(component) |==> <NO-OP>
1015:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.CycleDetector@findCycles():136:component.iterator().next() |==> null
1016:COR:graph.containsEdge(v, v):TRUE:org.jgrapht.alg.CycleDetector@findCycles():137:graph.containsEdge(v, v) |==> false
1017:COR:graph.containsEdge(v, v):FALSE:org.jgrapht.alg.CycleDetector@findCycles():137:graph.containsEdge(v, v) |==> true
1018:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector@findCycles():139:set.add(v) |==> <NO-OP>
1019:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.CycleDetector@findCycles():144:set |==> null
1020:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.CycleDetector@findCyclesContainingVertex(V):163:new HashSet<V>() |==> null
1021:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector@findCyclesContainingVertex(V):164:execute(set, v) |==> <NO-OP>
1022:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.CycleDetector@findCyclesContainingVertex(V):166:set |==> null
1023:EVR:<NEW_CLASS(org.jgrapht.alg.CycleDetector<V,E>.ProbeIterator)>:<DEFAULT>:org.jgrapht.alg.CycleDetector@execute(java.util.Set<V>,V):171:new ProbeIterator(s, v) |==> null
1024:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector@execute(java.util.Set<V>,V):174:iter.next() |==> <NO-OP>
1025:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.CycleDetector$ProbeIterator@<init>(java.util.Set<V>,V):204:root = startVertex |==> <NO-OP>
1026:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.CycleDetector$ProbeIterator@<init>(java.util.Set<V>,V):205:this.cycleSet = cycleSet |==> <NO-OP>
1027:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.CycleDetector$ProbeIterator@<init>(java.util.Set<V>,V):206:path = new ArrayList<V>() |==> <NO-OP>
1028:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):214:super.encounterVertexAgain(vertex, edge) |==> <NO-OP>
1029:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):218:root != null |==> true
1030:COR:vertex.equals(root):TRUE:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):222:vertex.equals(root) |==> false
1031:COR:vertex.equals(root):FALSE:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):222:vertex.equals(root) |==> true
1032:LVR:0:POS:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):223:0 |==> 1
1033:LVR:0:NEG:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):223:0 |==> -1
1034:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):224:cycleSet != null |==> true
1035:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):224:(cycleSet != null) && cycleSet.contains(vertex) |==> (cycleSet != null) == cycleSet.contains(vertex)
1036:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):224:(cycleSet != null) && cycleSet.contains(vertex) |==> false
1037:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):224:(cycleSet != null) && cycleSet.contains(vertex) |==> (cycleSet != null)
1038:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):224:(cycleSet != null) && cycleSet.contains(vertex) |==> cycleSet.contains(vertex)
1039:LVR:0:POS:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):225:0 |==> 1
1040:LVR:0:NEG:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):225:0 |==> -1
1041:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):230:path.indexOf(vertex) |==> 0
1042:LVR:NEG:0:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):233:-1 |==> 0
1043:LVR:NEG:POS:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):233:-1 |==> 1
1044:ROR:>(int,int):!=(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):233:i > -1 |==> i != -1
1045:ROR:>(int,int):>=(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):233:i > -1 |==> i >= -1
1046:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):233:i > -1 |==> false
1047:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):234:cycleSet == null |==> false
1048:ROR:<(int,int):!=(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):238:i < path.size() |==> i != path.size()
1049:ROR:<(int,int):<=(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):238:i < path.size() |==> i <= path.size()
1050:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):238:i < path.size() |==> false
1051:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector$ProbeIterator@encounterVertexAgain(V,E):239:cycleSet.add(path.get(i)) |==> <NO-OP>
1052:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():250:super.provideNextVertex() |==> null
1053:LVR:POS:0:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:1 |==> 0
1054:LVR:POS:NEG:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:1 |==> -1
1055:AOR:-(int,int):%(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:path.size() - 1 |==> path.size() % 1
1056:AOR:-(int,int):*(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:path.size() - 1 |==> path.size() * 1
1057:AOR:-(int,int):+(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:path.size() - 1 |==> path.size() + 1
1058:AOR:-(int,int):/(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:path.size() - 1 |==> path.size() / 1
1059:LVR:0:POS:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:0 |==> 1
1060:LVR:0:NEG:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:0 |==> -1
1061:ROR:>=(int,int):==(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:i >= 0 |==> i == 0
1062:ROR:>=(int,int):>(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:i >= 0 |==> i > 0
1063:ROR:>=(int,int):TRUE(int,int):org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():253:i >= 0 |==> true
1064:COR:graph.containsEdge(path.get(i), v):TRUE:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():254:graph.containsEdge(path.get(i), v) |==> false
1065:COR:graph.containsEdge(path.get(i), v):FALSE:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():254:graph.containsEdge(path.get(i), v) |==> true
1066:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():255:break; |==> <NO-OP>
1067:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():258:path.remove(i) |==> <NO-OP>
1068:STD:<CALL>:<NO-OP>:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():261:path.add(v) |==> <NO-OP>
1069:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.CycleDetector$ProbeIterator@provideNextVertex():263:v |==> null
1070:EVR:<NEW_CLASS(java.lang.Object)>:<DEFAULT>:org.jgrapht.traverse.DepthFirstIterator:74:new Object() |==> null
1071:EVR:<NEW_CLASS(java.util.ArrayDeque<java.lang.Object>)>:<DEFAULT>:org.jgrapht.traverse.DepthFirstIterator:81:new ArrayDeque<Object>() |==> null
1072:COR:stack.isEmpty():TRUE:org.jgrapht.traverse.DepthFirstIterator@isConnectedComponentExhausted():120:stack.isEmpty() |==> false
1073:COR:stack.isEmpty():FALSE:org.jgrapht.traverse.DepthFirstIterator@isConnectedComponentExhausted():120:stack.isEmpty() |==> true
1074:LVR:TRUE:FALSE:org.jgrapht.traverse.DepthFirstIterator@isConnectedComponentExhausted():121:true |==> false
1075:STD:<RETURN>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@isConnectedComponentExhausted():121:return Config.__M_NO == 0 && Config.COVERED(1074, 1074) ? true : Config.__M_NO == 1074 ? false : true; |==> <NO-OP>
1076:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.DepthFirstIterator@isConnectedComponentExhausted():123:stack.getLast() != SENTINEL |==> true
1077:LVR:FALSE:TRUE:org.jgrapht.traverse.DepthFirstIterator@isConnectedComponentExhausted():125:false |==> true
1078:STD:<RETURN>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@isConnectedComponentExhausted():125:return Config.__M_NO == 0 && Config.COVERED(1077, 1077) ? false : Config.__M_NO == 1077 ? true : false; |==> <NO-OP>
1079:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@isConnectedComponentExhausted():132:stack.removeLast() |==> <NO-OP>
1080:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@isConnectedComponentExhausted():135:recordFinish() |==> <NO-OP>
1081:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@encounterVertex(V,E):144:putSeenData(vertex, VisitColor.WHITE) |==> <NO-OP>
1082:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@encounterVertex(V,E):145:stack.addLast(vertex) |==> <NO-OP>
1083:EVR:<METHOD_INVOCATION(org.jgrapht.traverse.CrossComponentIterator.VisitColor)>:<DEFAULT>:org.jgrapht.traverse.DepthFirstIterator@encounterVertexAgain(V,E):153:getSeenData(vertex) |==> null
1084:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.DepthFirstIterator@encounterVertexAgain(V,E):154:color != VisitColor.WHITE |==> true
1085:STD:<RETURN>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@encounterVertexAgain(V,E):158:return; |==> <NO-OP>
1086:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.traverse.DepthFirstIterator@encounterVertexAgain(V,E):166:stack.removeLastOccurrence(vertex) |==> false
1087:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@encounterVertexAgain(V,E):168:stack.addLast(vertex) |==> <NO-OP>
1088:EVR:<METHOD_INVOCATION(java.lang.Object)>:<DEFAULT>:org.jgrapht.traverse.DepthFirstIterator@provideNextVertex():178:stack.removeLast() |==> null
1089:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.DepthFirstIterator@provideNextVertex():179:o == SENTINEL |==> false
1090:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@provideNextVertex():181:recordFinish() |==> <NO-OP>
1091:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.DepthFirstIterator@provideNextVertex():185:TypeUtil.uncheckedCast(o, vertexTypeDecl) |==> null
1092:STD:<BREAK>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@provideNextVertex():186:break; |==> <NO-OP>
1093:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@provideNextVertex():192:stack.addLast(v) |==> <NO-OP>
1094:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@provideNextVertex():193:stack.addLast(SENTINEL) |==> <NO-OP>
1095:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@provideNextVertex():194:putSeenData(v, VisitColor.GRAY) |==> <NO-OP>
1096:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.traverse.DepthFirstIterator@provideNextVertex():195:v |==> null
1097:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.DepthFirstIterator@recordFinish():200:TypeUtil.uncheckedCast(stack.removeLast(), vertexTypeDecl) |==> null
1098:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@recordFinish():201:putSeenData(v, VisitColor.BLACK) |==> <NO-OP>
1099:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.DepthFirstIterator@recordFinish():202:finishVertex(v) |==> <NO-OP>
1100:EVR:<IDENTIFIER(java.util.Deque<java.lang.Object>)>:<DEFAULT>:org.jgrapht.traverse.DepthFirstIterator@getStack():216:stack |==> null
1101:EVR:<NEW_CLASS(org.jgrapht.event.ConnectedComponentTraversalEvent)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator:99:new ConnectedComponentTraversalEvent(this, ConnectedComponentTraversalEvent.CONNECTED_COMPONENT_FINISHED) |==> null
1102:EVR:<NEW_CLASS(org.jgrapht.event.ConnectedComponentTraversalEvent)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator:103:new ConnectedComponentTraversalEvent(this, ConnectedComponentTraversalEvent.CONNECTED_COMPONENT_STARTED) |==> null
1103:EVR:<NEW_CLASS(java.util.HashMap<V,D>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator:117:new HashMap<V, D>() |==> null
1104:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator:126:CCS_BEFORE_COMPONENT |==> 0
1105:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):145:g == null |==> false
1106:EVR:<IDENTIFIER(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):148:g |==> null
1107:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):150:specifics = createGraphSpecifics(g) |==> <NO-OP>
1108:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):151:vertexIterator = g.vertexSet().iterator() |==> <NO-OP>
1109:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):152:startVertex == null |==> false
1110:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):152:setCrossComponentTraversal(startVertex == null) |==> <NO-OP>
1111:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):154:reusableEdgeEvent = new FlyweightEdgeEvent<V, E>(this, null) |==> <NO-OP>
1112:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):155:reusableVertexEvent = new FlyweightVertexEvent<V>(this, null) |==> <NO-OP>
1113:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):157:startVertex == null |==> false
1114:COR:vertexIterator.hasNext():TRUE:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):159:vertexIterator.hasNext() |==> false
1115:COR:vertexIterator.hasNext():FALSE:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):159:vertexIterator.hasNext() |==> true
1116:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):160:this.startVertex = vertexIterator.next() |==> <NO-OP>
1117:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):162:this.startVertex = null |==> <NO-OP>
1118:COR:g.containsVertex(startVertex):TRUE:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):164:g.containsVertex(startVertex) |==> false
1119:COR:g.containsVertex(startVertex):FALSE:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):164:g.containsVertex(startVertex) |==> true
1120:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@<init>(org.jgrapht.Graph<V,E>,V):165:this.startVertex = startVertex |==> <NO-OP>
1121:EVR:<IDENTIFIER(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@getGraph():179:graph |==> null
1122:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.CrossComponentIterator@hasNext():187:startVertex != null |==> true
1123:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@hasNext():188:encounterStartVertex() |==> <NO-OP>
1124:COR:isConnectedComponentExhausted():TRUE:org.jgrapht.traverse.CrossComponentIterator@hasNext():191:isConnectedComponentExhausted() |==> false
1125:COR:isConnectedComponentExhausted():FALSE:org.jgrapht.traverse.CrossComponentIterator@hasNext():191:isConnectedComponentExhausted() |==> true
1126:ROR:==(int,int):<=(int,int):org.jgrapht.traverse.CrossComponentIterator@hasNext():192:state == CCS_WITHIN_COMPONENT |==> state <= CCS_WITHIN_COMPONENT
1127:ROR:==(int,int):>=(int,int):org.jgrapht.traverse.CrossComponentIterator@hasNext():192:state == CCS_WITHIN_COMPONENT |==> state >= CCS_WITHIN_COMPONENT
1128:ROR:==(int,int):FALSE(int,int):org.jgrapht.traverse.CrossComponentIterator@hasNext():192:state == CCS_WITHIN_COMPONENT |==> false
1129:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@hasNext():193:state = CCS_AFTER_COMPONENT |==> <NO-OP>
1130:LVR:0:POS:org.jgrapht.traverse.CrossComponentIterator@hasNext():194:0 |==> 1
1131:LVR:0:NEG:org.jgrapht.traverse.CrossComponentIterator@hasNext():194:0 |==> -1
1132:ROR:!=(int,int):<(int,int):org.jgrapht.traverse.CrossComponentIterator@hasNext():194:nListeners != 0 |==> nListeners < 0
1133:ROR:!=(int,int):>(int,int):org.jgrapht.traverse.CrossComponentIterator@hasNext():194:nListeners != 0 |==> nListeners > 0
1134:ROR:!=(int,int):TRUE(int,int):org.jgrapht.traverse.CrossComponentIterator@hasNext():194:nListeners != 0 |==> true
1135:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@hasNext():195:fireConnectedComponentFinished(ccFinishedEvent) |==> <NO-OP>
1136:COR:isCrossComponentTraversal():TRUE:org.jgrapht.traverse.CrossComponentIterator@hasNext():199:isCrossComponentTraversal() |==> false
1137:COR:isCrossComponentTraversal():FALSE:org.jgrapht.traverse.CrossComponentIterator@hasNext():199:isCrossComponentTraversal() |==> true
1138:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@hasNext():201:vertexIterator.next() |==> null
1139:COR:isSeenVertex(v):TRUE:org.jgrapht.traverse.CrossComponentIterator@hasNext():203:isSeenVertex(v) |==> false
1140:COR:isSeenVertex(v):FALSE:org.jgrapht.traverse.CrossComponentIterator@hasNext():203:isSeenVertex(v) |==> true
1141:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@hasNext():204:encounterVertex(v, null) |==> <NO-OP>
1142:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@hasNext():205:state = CCS_BEFORE_COMPONENT |==> <NO-OP>
1143:LVR:TRUE:FALSE:org.jgrapht.traverse.CrossComponentIterator@hasNext():207:true |==> false
1144:STD:<RETURN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@hasNext():207:return Config.__M_NO == 0 && Config.COVERED(1143, 1143) ? true : Config.__M_NO == 1143 ? false : true; |==> <NO-OP>
1145:LVR:FALSE:TRUE:org.jgrapht.traverse.CrossComponentIterator@hasNext():211:false |==> true
1146:LVR:FALSE:TRUE:org.jgrapht.traverse.CrossComponentIterator@hasNext():213:false |==> true
1147:LVR:TRUE:FALSE:org.jgrapht.traverse.CrossComponentIterator@hasNext():216:true |==> false
1148:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.CrossComponentIterator@next():225:startVertex != null |==> true
1149:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@next():226:encounterStartVertex() |==> <NO-OP>
1150:COR:hasNext():TRUE:org.jgrapht.traverse.CrossComponentIterator@next():229:hasNext() |==> false
1151:COR:hasNext():FALSE:org.jgrapht.traverse.CrossComponentIterator@next():229:hasNext() |==> true
1152:ROR:==(int,int):<=(int,int):org.jgrapht.traverse.CrossComponentIterator@next():230:state == CCS_BEFORE_COMPONENT |==> state <= CCS_BEFORE_COMPONENT
1153:ROR:==(int,int):>=(int,int):org.jgrapht.traverse.CrossComponentIterator@next():230:state == CCS_BEFORE_COMPONENT |==> state >= CCS_BEFORE_COMPONENT
1154:ROR:==(int,int):FALSE(int,int):org.jgrapht.traverse.CrossComponentIterator@next():230:state == CCS_BEFORE_COMPONENT |==> false
1155:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@next():231:state = CCS_WITHIN_COMPONENT |==> <NO-OP>
1156:LVR:0:POS:org.jgrapht.traverse.CrossComponentIterator@next():232:0 |==> 1
1157:LVR:0:NEG:org.jgrapht.traverse.CrossComponentIterator@next():232:0 |==> -1
1158:ROR:!=(int,int):<(int,int):org.jgrapht.traverse.CrossComponentIterator@next():232:nListeners != 0 |==> nListeners < 0
1159:ROR:!=(int,int):>(int,int):org.jgrapht.traverse.CrossComponentIterator@next():232:nListeners != 0 |==> nListeners > 0
1160:ROR:!=(int,int):TRUE(int,int):org.jgrapht.traverse.CrossComponentIterator@next():232:nListeners != 0 |==> true
1161:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@next():233:fireConnectedComponentStarted(ccStartedEvent) |==> <NO-OP>
1162:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@next():237:provideNextVertex() |==> null
1163:LVR:0:POS:org.jgrapht.traverse.CrossComponentIterator@next():238:0 |==> 1
1164:LVR:0:NEG:org.jgrapht.traverse.CrossComponentIterator@next():238:0 |==> -1
1165:ROR:!=(int,int):<(int,int):org.jgrapht.traverse.CrossComponentIterator@next():238:nListeners != 0 |==> nListeners < 0
1166:ROR:!=(int,int):>(int,int):org.jgrapht.traverse.CrossComponentIterator@next():238:nListeners != 0 |==> nListeners > 0
1167:ROR:!=(int,int):TRUE(int,int):org.jgrapht.traverse.CrossComponentIterator@next():238:nListeners != 0 |==> true
1168:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@next():239:fireVertexTraversed(createVertexTraversalEvent(nextVertex)) |==> <NO-OP>
1169:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@next():242:addUnseenChildrenOf(nextVertex) |==> <NO-OP>
1170:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@next():244:nextVertex |==> null
1171:EVR:<METHOD_INVOCATION(D)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@getSeenData(V):288:seen.get(vertex) |==> null
1172:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@isSeenVertex(java.lang.Object):300:seen.containsKey(vertex) |==> false
1173:EVR:<METHOD_INVOCATION(D)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@putSeenData(V,D):325:seen.put(vertex, data) |==> null
1174:LVR:0:POS:org.jgrapht.traverse.CrossComponentIterator@finishVertex(V):336:0 |==> 1
1175:LVR:0:NEG:org.jgrapht.traverse.CrossComponentIterator@finishVertex(V):336:0 |==> -1
1176:ROR:!=(int,int):<(int,int):org.jgrapht.traverse.CrossComponentIterator@finishVertex(V):336:nListeners != 0 |==> nListeners < 0
1177:ROR:!=(int,int):>(int,int):org.jgrapht.traverse.CrossComponentIterator@finishVertex(V):336:nListeners != 0 |==> nListeners > 0
1178:ROR:!=(int,int):TRUE(int,int):org.jgrapht.traverse.CrossComponentIterator@finishVertex(V):336:nListeners != 0 |==> true
1179:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@finishVertex(V):337:fireVertexFinished(createVertexTraversalEvent(vertex)) |==> <NO-OP>
1180:EVR:<NEW_CLASS(org.jgrapht.traverse.CrossComponentIterator.DirectedSpecifics<V,E>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@createGraphSpecifics(org.jgrapht.Graph<V,E>):352:new DirectedSpecifics<V, E>((DirectedGraph<V, E>)g) |==> null
1181:EVR:<NEW_CLASS(org.jgrapht.traverse.CrossComponentIterator.UndirectedSpecifics<V,E>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@createGraphSpecifics(org.jgrapht.Graph<V,E>):354:new UndirectedSpecifics<V, E>(g) |==> null
1182:LVR:0:POS:org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):361:0 |==> 1
1183:LVR:0:NEG:org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):361:0 |==> -1
1184:ROR:!=(int,int):<(int,int):org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):361:nListeners != 0 |==> nListeners < 0
1185:ROR:!=(int,int):>(int,int):org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):361:nListeners != 0 |==> nListeners > 0
1186:ROR:!=(int,int):TRUE(int,int):org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):361:nListeners != 0 |==> true
1187:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):362:fireEdgeTraversed(createEdgeTraversalEvent(edge)) |==> <NO-OP>
1188:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):365:Graphs.getOppositeVertex(graph, edge, vertex) |==> null
1189:COR:isSeenVertex(oppositeV):TRUE:org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):367:isSeenVertex(oppositeV) |==> false
1190:COR:isSeenVertex(oppositeV):FALSE:org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):367:isSeenVertex(oppositeV) |==> true
1191:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):368:encounterVertexAgain(oppositeV, edge) |==> <NO-OP>
1192:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@addUnseenChildrenOf(V):370:encounterVertex(oppositeV, edge) |==> <NO-OP>
1193:COR:isReuseEvents():TRUE:org.jgrapht.traverse.CrossComponentIterator@createEdgeTraversalEvent(E):377:isReuseEvents() |==> false
1194:COR:isReuseEvents():FALSE:org.jgrapht.traverse.CrossComponentIterator@createEdgeTraversalEvent(E):377:isReuseEvents() |==> true
1195:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@createEdgeTraversalEvent(E):378:reusableEdgeEvent.setEdge(edge) |==> <NO-OP>
1196:EVR:<IDENTIFIER(org.jgrapht.traverse.CrossComponentIterator.FlyweightEdgeEvent<V,E>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@createEdgeTraversalEvent(E):380:reusableEdgeEvent |==> null
1197:EVR:<NEW_CLASS(org.jgrapht.event.EdgeTraversalEvent<V,E>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@createEdgeTraversalEvent(E):382:new EdgeTraversalEvent<V, E>(this, edge) |==> null
1198:COR:isReuseEvents():TRUE:org.jgrapht.traverse.CrossComponentIterator@createVertexTraversalEvent(V):388:isReuseEvents() |==> false
1199:COR:isReuseEvents():FALSE:org.jgrapht.traverse.CrossComponentIterator@createVertexTraversalEvent(V):388:isReuseEvents() |==> true
1200:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@createVertexTraversalEvent(V):389:reusableVertexEvent.setVertex(vertex) |==> <NO-OP>
1201:EVR:<IDENTIFIER(org.jgrapht.traverse.CrossComponentIterator.FlyweightVertexEvent<V>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@createVertexTraversalEvent(V):391:reusableVertexEvent |==> null
1202:EVR:<NEW_CLASS(org.jgrapht.event.VertexTraversalEvent<V>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator@createVertexTraversalEvent(V):393:new VertexTraversalEvent<V>(this, vertex) |==> null
1203:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@encounterStartVertex():399:encounterVertex(startVertex, null) |==> <NO-OP>
1204:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator@encounterStartVertex():400:startVertex = null |==> <NO-OP>
1205:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator$FlyweightEdgeEvent@setEdge(localE):477:this.edge = edge |==> <NO-OP>
1206:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator$FlyweightVertexEvent@setVertex(VV):507:this.vertex = vertex |==> <NO-OP>
1207:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator$DirectedSpecifics@<init>(org.jgrapht.DirectedGraph<VV,EE>):526:graph = g |==> <NO-OP>
1208:EVR:<METHOD_INVOCATION(java.util.Set<EE>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator$DirectedSpecifics@edgesOf(VV):534:graph.outgoingEdgesOf(vertex) |==> null
1209:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.CrossComponentIterator$UndirectedSpecifics@<init>(org.jgrapht.Graph<VV,EE>):554:graph = g |==> <NO-OP>
1210:EVR:<METHOD_INVOCATION(java.util.Set<EE>)>:<DEFAULT>:org.jgrapht.traverse.CrossComponentIterator$UndirectedSpecifics@edgesOf(VV):562:graph.edgesOf(vertex) |==> null
1211:EVR:<NEW_CLASS(java.util.ArrayList<org.jgrapht.event.TraversalListener<V,E>>)>:<DEFAULT>:org.jgrapht.traverse.AbstractGraphIterator:59:new ArrayList<TraversalListener<V, E>>() |==> null
1212:LVR:TRUE:FALSE:org.jgrapht.traverse.AbstractGraphIterator:60:true |==> false
1213:LVR:FALSE:TRUE:org.jgrapht.traverse.AbstractGraphIterator:61:false |==> true
1214:LVR:0:POS:org.jgrapht.traverse.AbstractGraphIterator:66:0 |==> 1
1215:LVR:0:NEG:org.jgrapht.traverse.AbstractGraphIterator:66:0 |==> -1
1216:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@setCrossComponentTraversal(boolean):79:this.crossComponentTraversal = crossComponentTraversal |==> <NO-OP>
1217:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.traverse.AbstractGraphIterator@isCrossComponentTraversal():91:crossComponentTraversal |==> false
1218:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@setReuseEvents(boolean):99:this.reuseEvents = reuseEvents |==> <NO-OP>
1219:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.traverse.AbstractGraphIterator@isReuseEvents():107:reuseEvents |==> false
1220:COR:traversalListeners.contains(l):TRUE:org.jgrapht.traverse.AbstractGraphIterator@addTraversalListener(org.jgrapht.event.TraversalListener<V,E>):117:traversalListeners.contains(l) |==> false
1221:COR:traversalListeners.contains(l):FALSE:org.jgrapht.traverse.AbstractGraphIterator@addTraversalListener(org.jgrapht.event.TraversalListener<V,E>):117:traversalListeners.contains(l) |==> true
1222:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@addTraversalListener(org.jgrapht.event.TraversalListener<V,E>):118:traversalListeners.add(l) |==> <NO-OP>
1223:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@addTraversalListener(org.jgrapht.event.TraversalListener<V,E>):119:nListeners = traversalListeners.size() |==> <NO-OP>
1224:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@removeTraversalListener(org.jgrapht.event.TraversalListener<V,E>):140:traversalListeners.remove(l) |==> <NO-OP>
1225:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@removeTraversalListener(org.jgrapht.event.TraversalListener<V,E>):141:nListeners = traversalListeners.size() |==> <NO-OP>
1226:LVR:0:POS:org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentFinished(org.jgrapht.event.ConnectedComponentTraversalEvent):153:0 |==> 1
1227:LVR:0:NEG:org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentFinished(org.jgrapht.event.ConnectedComponentTraversalEvent):153:0 |==> -1
1228:ROR:<(int,int):!=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentFinished(org.jgrapht.event.ConnectedComponentTraversalEvent):153:i < nListeners |==> i != nListeners
1229:ROR:<(int,int):<=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentFinished(org.jgrapht.event.ConnectedComponentTraversalEvent):153:i < nListeners |==> i <= nListeners
1230:ROR:<(int,int):FALSE(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentFinished(org.jgrapht.event.ConnectedComponentTraversalEvent):153:i < nListeners |==> false
1231:EVR:<METHOD_INVOCATION(org.jgrapht.event.TraversalListener<V,E>)>:<DEFAULT>:org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentFinished(org.jgrapht.event.ConnectedComponentTraversalEvent):154:traversalListeners.get(i) |==> null
1232:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentFinished(org.jgrapht.event.ConnectedComponentTraversalEvent):155:l.connectedComponentFinished(e) |==> <NO-OP>
1233:LVR:0:POS:org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentStarted(org.jgrapht.event.ConnectedComponentTraversalEvent):168:0 |==> 1
1234:LVR:0:NEG:org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentStarted(org.jgrapht.event.ConnectedComponentTraversalEvent):168:0 |==> -1
1235:ROR:<(int,int):!=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentStarted(org.jgrapht.event.ConnectedComponentTraversalEvent):168:i < nListeners |==> i != nListeners
1236:ROR:<(int,int):<=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentStarted(org.jgrapht.event.ConnectedComponentTraversalEvent):168:i < nListeners |==> i <= nListeners
1237:ROR:<(int,int):FALSE(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentStarted(org.jgrapht.event.ConnectedComponentTraversalEvent):168:i < nListeners |==> false
1238:EVR:<METHOD_INVOCATION(org.jgrapht.event.TraversalListener<V,E>)>:<DEFAULT>:org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentStarted(org.jgrapht.event.ConnectedComponentTraversalEvent):169:traversalListeners.get(i) |==> null
1239:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@fireConnectedComponentStarted(org.jgrapht.event.ConnectedComponentTraversalEvent):170:l.connectedComponentStarted(e) |==> <NO-OP>
1240:LVR:0:POS:org.jgrapht.traverse.AbstractGraphIterator@fireEdgeTraversed(org.jgrapht.event.EdgeTraversalEvent<V,E>):181:0 |==> 1
1241:LVR:0:NEG:org.jgrapht.traverse.AbstractGraphIterator@fireEdgeTraversed(org.jgrapht.event.EdgeTraversalEvent<V,E>):181:0 |==> -1
1242:ROR:<(int,int):!=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireEdgeTraversed(org.jgrapht.event.EdgeTraversalEvent<V,E>):181:i < nListeners |==> i != nListeners
1243:ROR:<(int,int):<=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireEdgeTraversed(org.jgrapht.event.EdgeTraversalEvent<V,E>):181:i < nListeners |==> i <= nListeners
1244:ROR:<(int,int):FALSE(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireEdgeTraversed(org.jgrapht.event.EdgeTraversalEvent<V,E>):181:i < nListeners |==> false
1245:EVR:<METHOD_INVOCATION(org.jgrapht.event.TraversalListener<V,E>)>:<DEFAULT>:org.jgrapht.traverse.AbstractGraphIterator@fireEdgeTraversed(org.jgrapht.event.EdgeTraversalEvent<V,E>):182:traversalListeners.get(i) |==> null
1246:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@fireEdgeTraversed(org.jgrapht.event.EdgeTraversalEvent<V,E>):183:l.edgeTraversed(e) |==> <NO-OP>
1247:LVR:0:POS:org.jgrapht.traverse.AbstractGraphIterator@fireVertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):194:0 |==> 1
1248:LVR:0:NEG:org.jgrapht.traverse.AbstractGraphIterator@fireVertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):194:0 |==> -1
1249:ROR:<(int,int):!=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireVertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):194:i < nListeners |==> i != nListeners
1250:ROR:<(int,int):<=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireVertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):194:i < nListeners |==> i <= nListeners
1251:ROR:<(int,int):FALSE(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireVertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):194:i < nListeners |==> false
1252:EVR:<METHOD_INVOCATION(org.jgrapht.event.TraversalListener<V,E>)>:<DEFAULT>:org.jgrapht.traverse.AbstractGraphIterator@fireVertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):195:traversalListeners.get(i) |==> null
1253:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@fireVertexTraversed(org.jgrapht.event.VertexTraversalEvent<V>):196:l.vertexTraversed(e) |==> <NO-OP>
1254:LVR:0:POS:org.jgrapht.traverse.AbstractGraphIterator@fireVertexFinished(org.jgrapht.event.VertexTraversalEvent<V>):207:0 |==> 1
1255:LVR:0:NEG:org.jgrapht.traverse.AbstractGraphIterator@fireVertexFinished(org.jgrapht.event.VertexTraversalEvent<V>):207:0 |==> -1
1256:ROR:<(int,int):!=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireVertexFinished(org.jgrapht.event.VertexTraversalEvent<V>):207:i < nListeners |==> i != nListeners
1257:ROR:<(int,int):<=(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireVertexFinished(org.jgrapht.event.VertexTraversalEvent<V>):207:i < nListeners |==> i <= nListeners
1258:ROR:<(int,int):FALSE(int,int):org.jgrapht.traverse.AbstractGraphIterator@fireVertexFinished(org.jgrapht.event.VertexTraversalEvent<V>):207:i < nListeners |==> false
1259:EVR:<METHOD_INVOCATION(org.jgrapht.event.TraversalListener<V,E>)>:<DEFAULT>:org.jgrapht.traverse.AbstractGraphIterator@fireVertexFinished(org.jgrapht.event.VertexTraversalEvent<V>):208:traversalListeners.get(i) |==> null
1260:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.AbstractGraphIterator@fireVertexFinished(org.jgrapht.event.VertexTraversalEvent<V>):209:l.vertexFinished(e) |==> <NO-OP>
1261:COR:graph.containsVertex(endVertex):TRUE:org.jgrapht.alg.DijkstraShortestPath@<init>(org.jgrapht.Graph<V,E>,V,V,double):97:graph.containsVertex(endVertex) |==> false
1262:COR:graph.containsVertex(endVertex):FALSE:org.jgrapht.alg.DijkstraShortestPath@<init>(org.jgrapht.Graph<V,E>,V,V,double):97:graph.containsVertex(endVertex) |==> true
1263:EVR:<NEW_CLASS(org.jgrapht.traverse.ClosestFirstIterator<V,E>)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@<init>(org.jgrapht.Graph<V,E>,V,V,double):103:new ClosestFirstIterator<V, E>(graph, startVertex, radius) |==> null
1264:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@<init>(org.jgrapht.Graph<V,E>,V,V,double):106:iter.next() |==> null
1265:COR:vertex.equals(endVertex):TRUE:org.jgrapht.alg.DijkstraShortestPath@<init>(org.jgrapht.Graph<V,E>,V,V,double):108:vertex.equals(endVertex) |==> false
1266:COR:vertex.equals(endVertex):FALSE:org.jgrapht.alg.DijkstraShortestPath@<init>(org.jgrapht.Graph<V,E>,V,V,double):108:vertex.equals(endVertex) |==> true
1267:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DijkstraShortestPath@<init>(org.jgrapht.Graph<V,E>,V,V,double):109:createEdgeList(graph, iter, startVertex, endVertex) |==> <NO-OP>
1268:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.DijkstraShortestPath@<init>(org.jgrapht.Graph<V,E>,V,V,double):110:return; |==> <NO-OP>
1269:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.DijkstraShortestPath@<init>(org.jgrapht.Graph<V,E>,V,V,double):114:path = null |==> <NO-OP>
1270:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.DijkstraShortestPath@getPathEdgeList():126:path == null |==> false
1271:EVR:<METHOD_INVOCATION(java.util.List<E>)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@getPathEdgeList():129:path.getEdgeList() |==> null
1272:EVR:<IDENTIFIER(org.jgrapht.GraphPath<V,E>)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@getPath():140:path |==> null
1273:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.DijkstraShortestPath@getPathLength():150:path == null |==> false
1274:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@getPathLength():151:Double.POSITIVE_INFINITY |==> 0.0
1275:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@getPathLength():153:path.getWeight() |==> 0.0
1276:EVR:<NEW_CLASS(org.jgrapht.alg.DijkstraShortestPath<V,E>)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@findPathBetween(org.jgrapht.Graph<V,E>,V,V):174:new DijkstraShortestPath<V, E>(graph, startVertex, endVertex) |==> null
1277:EVR:<METHOD_INVOCATION(java.util.List<E>)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@findPathBetween(org.jgrapht.Graph<V,E>,V,V):179:alg.getPathEdgeList() |==> null
1278:EVR:<NEW_CLASS(java.util.ArrayList<E>)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):188:new ArrayList<E>() |==> null
1279:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):190:endVertex |==> null
1280:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):193:iter.getSpanningTreeEdge(v) |==> null
1281:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):195:edge == null |==> false
1282:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):196:break; |==> <NO-OP>
1283:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):199:edgeList.add(edge) |==> <NO-OP>
1284:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):200:v = Graphs.getOppositeVertex(graph, edge, v) |==> <NO-OP>
1285:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):203:Collections.reverse(edgeList) |==> <NO-OP>
1286:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):204:iter.getShortestPathLength(endVertex) |==> 0.0
1287:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.DijkstraShortestPath@createEdgeList(org.jgrapht.Graph<V,E>,org.jgrapht.traverse.ClosestFirstIterator<V,E>,V,V):205:path = new GraphPathImpl<V, E>(graph, startVertex, endVertex, edgeList, pathLength) |==> <NO-OP>
1288:EVR:<NEW_CLASS(org.jgrapht.util.FibonacciHeap<org.jgrapht.traverse.ClosestFirstIterator.QueueEntry<V,E>>)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator:70:new FibonacciHeap<QueueEntry<V, E>>() |==> null
1289:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator:75:Double.POSITIVE_INFINITY |==> 0.0
1290:LVR:FALSE:TRUE:org.jgrapht.traverse.ClosestFirstIterator:77:false |==> true
1291:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@<init>(org.jgrapht.Graph<V,E>,V,double):122:this.radius = radius |==> <NO-OP>
1292:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@<init>(org.jgrapht.Graph<V,E>,V,double):123:checkRadiusTraversal(isCrossComponentTraversal()) |==> <NO-OP>
1293:LVR:TRUE:FALSE:org.jgrapht.traverse.ClosestFirstIterator@<init>(org.jgrapht.Graph<V,E>,V,double):124:true |==> false
1294:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@<init>(org.jgrapht.Graph<V,E>,V,double):124:initialized = true |==> <NO-OP>
1295:COR:initialized:TRUE:org.jgrapht.traverse.ClosestFirstIterator@setCrossComponentTraversal(boolean):132:initialized |==> false
1296:COR:initialized:FALSE:org.jgrapht.traverse.ClosestFirstIterator@setCrossComponentTraversal(boolean):132:initialized |==> true
1297:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@setCrossComponentTraversal(boolean):133:checkRadiusTraversal(crossComponentTraversal) |==> <NO-OP>
1298:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@setCrossComponentTraversal(boolean):135:super.setCrossComponentTraversal(crossComponentTraversal) |==> <NO-OP>
1299:EVR:<METHOD_INVOCATION(org.jgrapht.util.FibonacciHeapNode<org.jgrapht.traverse.ClosestFirstIterator.QueueEntry<V,E>>)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@getShortestPathLength(V):150:getSeenData(vertex) |==> null
1300:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.ClosestFirstIterator@getShortestPathLength(V):152:node == null |==> false
1301:STD:<RETURN>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@getShortestPathLength(V):153:return Double.POSITIVE_INFINITY; |==> <NO-OP>
1302:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@getShortestPathLength(V):156:node.getKey() |==> 0.0
1303:EVR:<METHOD_INVOCATION(org.jgrapht.util.FibonacciHeapNode<org.jgrapht.traverse.ClosestFirstIterator.QueueEntry<V,E>>)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@getSpanningTreeEdge(V):173:getSeenData(vertex) |==> null
1304:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.ClosestFirstIterator@getSpanningTreeEdge(V):175:node == null |==> false
1305:STD:<RETURN>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@getSpanningTreeEdge(V):176:return null; |==> <NO-OP>
1306:EVR:<MEMBER_SELECT(E)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@getSpanningTreeEdge(V):179:node.getData().spanningTreeEdge |==> null
1307:LVR:0:POS:org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():187:0 |==> 1
1308:LVR:0:NEG:org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():187:0 |==> -1
1309:ROR:==(int,int):<=(int,int):org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():187:heap.size() == 0 |==> heap.size() <= 0
1310:ROR:==(int,int):>=(int,int):org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():187:heap.size() == 0 |==> heap.size() >= 0
1311:ROR:==(int,int):FALSE(int,int):org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():187:heap.size() == 0 |==> false
1312:LVR:TRUE:FALSE:org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():188:true |==> false
1313:ROR:>(double,double):!=(double,double):org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():190:heap.min().getKey() > radius |==> heap.min().getKey() != radius
1314:ROR:>(double,double):>=(double,double):org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():190:heap.min().getKey() > radius |==> heap.min().getKey() >= radius
1315:ROR:>(double,double):FALSE(double,double):org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():190:heap.min().getKey() > radius |==> false
1316:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():191:heap.clear() |==> <NO-OP>
1317:LVR:TRUE:FALSE:org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():193:true |==> false
1318:LVR:FALSE:TRUE:org.jgrapht.traverse.ClosestFirstIterator@isConnectedComponentExhausted():195:false |==> true
1319:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.traverse.ClosestFirstIterator@encounterVertex(V,E):206:edge == null |==> false
1320:LVR:0:POS:org.jgrapht.traverse.ClosestFirstIterator@encounterVertex(V,E):207:0 |==> 1
1321:LVR:0:NEG:org.jgrapht.traverse.ClosestFirstIterator@encounterVertex(V,E):207:0 |==> -1
1322:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@encounterVertex(V,E):209:calculatePathLength(vertex, edge) |==> 0.0
1323:EVR:<METHOD_INVOCATION(org.jgrapht.util.FibonacciHeapNode<org.jgrapht.traverse.ClosestFirstIterator.QueueEntry<V,E>>)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@encounterVertex(V,E):211:createSeenData(vertex, edge) |==> null
1324:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@encounterVertex(V,E):212:putSeenData(vertex, node) |==> <NO-OP>
1325:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@encounterVertex(V,E):213:heap.insert(node, shortestPathLength) |==> <NO-OP>
1326:EVR:<METHOD_INVOCATION(org.jgrapht.util.FibonacciHeapNode<org.jgrapht.traverse.ClosestFirstIterator.QueueEntry<V,E>>)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):225:getSeenData(vertex) |==> null
1327:COR:node.getData().frozen:TRUE:org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):227:node.getData().frozen |==> false
1328:COR:node.getData().frozen:FALSE:org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):227:node.getData().frozen |==> true
1329:STD:<RETURN>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):229:return; |==> <NO-OP>
1330:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):232:calculatePathLength(vertex, edge) |==> 0.0
1331:ROR:<(double,double):!=(double,double):org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):234:candidatePathLength < node.getKey() |==> candidatePathLength != node.getKey()
1332:ROR:<(double,double):<=(double,double):org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):234:candidatePathLength < node.getKey() |==> candidatePathLength <= node.getKey()
1333:ROR:<(double,double):FALSE(double,double):org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):234:candidatePathLength < node.getKey() |==> false
1334:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):235:node.getData().spanningTreeEdge = edge |==> <NO-OP>
1335:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@encounterVertexAgain(V,E):236:heap.decreaseKey(node, candidatePathLength) |==> <NO-OP>
1336:EVR:<METHOD_INVOCATION(org.jgrapht.util.FibonacciHeapNode<org.jgrapht.traverse.ClosestFirstIterator.QueueEntry<V,E>>)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@provideNextVertex():245:heap.removeMin() |==> null
1337:LVR:TRUE:FALSE:org.jgrapht.traverse.ClosestFirstIterator@provideNextVertex():246:true |==> false
1338:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@provideNextVertex():246:node.getData().frozen = true |==> <NO-OP>
1339:EVR:<MEMBER_SELECT(V)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@provideNextVertex():248:node.getData().vertex |==> null
1340:LVR:0:POS:org.jgrapht.traverse.ClosestFirstIterator@assertNonNegativeEdge(E):253:0 |==> 1
1341:LVR:0:NEG:org.jgrapht.traverse.ClosestFirstIterator@assertNonNegativeEdge(E):253:0 |==> -1
1342:ROR:<(double,double):!=(double,double):org.jgrapht.traverse.ClosestFirstIterator@assertNonNegativeEdge(E):253:getGraph().getEdgeWeight(edge) < 0 |==> getGraph().getEdgeWeight(edge) != 0
1343:ROR:<(double,double):<=(double,double):org.jgrapht.traverse.ClosestFirstIterator@assertNonNegativeEdge(E):253:getGraph().getEdgeWeight(edge) < 0 |==> getGraph().getEdgeWeight(edge) <= 0
1344:ROR:<(double,double):FALSE(double,double):org.jgrapht.traverse.ClosestFirstIterator@assertNonNegativeEdge(E):253:getGraph().getEdgeWeight(edge) < 0 |==> false
1345:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@calculatePathLength(V,E):270:assertNonNegativeEdge(edge) |==> <NO-OP>
1346:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@calculatePathLength(V,E):272:Graphs.getOppositeVertex(getGraph(), edge, vertex) |==> null
1347:EVR:<METHOD_INVOCATION(org.jgrapht.util.FibonacciHeapNode<org.jgrapht.traverse.ClosestFirstIterator.QueueEntry<V,E>>)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@calculatePathLength(V,E):274:getSeenData(otherVertex) |==> null
1348:AOR:+(double,double):%(double,double):org.jgrapht.traverse.ClosestFirstIterator@calculatePathLength(V,E):276:otherEntry.getKey() + getGraph().getEdgeWeight(edge) |==> otherEntry.getKey() % getGraph().getEdgeWeight(edge)
1349:AOR:+(double,double):*(double,double):org.jgrapht.traverse.ClosestFirstIterator@calculatePathLength(V,E):276:otherEntry.getKey() + getGraph().getEdgeWeight(edge) |==> otherEntry.getKey() * getGraph().getEdgeWeight(edge)
1350:AOR:+(double,double):-(double,double):org.jgrapht.traverse.ClosestFirstIterator@calculatePathLength(V,E):276:otherEntry.getKey() + getGraph().getEdgeWeight(edge) |==> otherEntry.getKey() - getGraph().getEdgeWeight(edge)
1351:AOR:+(double,double):/(double,double):org.jgrapht.traverse.ClosestFirstIterator@calculatePathLength(V,E):276:otherEntry.getKey() + getGraph().getEdgeWeight(edge) |==> otherEntry.getKey() / getGraph().getEdgeWeight(edge)
1352:ROR:!=(double,double):<(double,double):org.jgrapht.traverse.ClosestFirstIterator@checkRadiusTraversal(boolean):282:radius != Double.POSITIVE_INFINITY |==> radius < Double.POSITIVE_INFINITY
1353:ROR:!=(double,double):>(double,double):org.jgrapht.traverse.ClosestFirstIterator@checkRadiusTraversal(boolean):282:radius != Double.POSITIVE_INFINITY |==> radius > Double.POSITIVE_INFINITY
1354:ROR:!=(double,double):TRUE(double,double):org.jgrapht.traverse.ClosestFirstIterator@checkRadiusTraversal(boolean):282:radius != Double.POSITIVE_INFINITY |==> true
1355:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.traverse.ClosestFirstIterator@checkRadiusTraversal(boolean):282:crossComponentTraversal && (radius != Double.POSITIVE_INFINITY) |==> crossComponentTraversal == (radius != Double.POSITIVE_INFINITY)
1356:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.traverse.ClosestFirstIterator@checkRadiusTraversal(boolean):282:crossComponentTraversal && (radius != Double.POSITIVE_INFINITY) |==> false
1357:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.traverse.ClosestFirstIterator@checkRadiusTraversal(boolean):282:crossComponentTraversal && (radius != Double.POSITIVE_INFINITY) |==> crossComponentTraversal
1358:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.traverse.ClosestFirstIterator@checkRadiusTraversal(boolean):282:crossComponentTraversal && (radius != Double.POSITIVE_INFINITY) |==> (radius != Double.POSITIVE_INFINITY)
1359:EVR:<NEW_CLASS(org.jgrapht.traverse.ClosestFirstIterator.QueueEntry<V,E>)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@createSeenData(V,E):300:new QueueEntry<V, E>() |==> null
1360:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@createSeenData(V,E):301:entry.vertex = vertex |==> <NO-OP>
1361:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.ClosestFirstIterator@createSeenData(V,E):302:entry.spanningTreeEdge = edge |==> <NO-OP>
1362:EVR:<NEW_CLASS(org.jgrapht.util.FibonacciHeapNode<org.jgrapht.traverse.ClosestFirstIterator.QueueEntry<V,E>>)>:<DEFAULT>:org.jgrapht.traverse.ClosestFirstIterator@createSeenData(V,E):304:new FibonacciHeapNode<QueueEntry<V, E>>(entry) |==> null
1363:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeapNode@<init>(T):113:right = this |==> <NO-OP>
1364:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeapNode@<init>(T):114:left = this |==> <NO-OP>
1365:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeapNode@<init>(T):115:this.data = data |==> <NO-OP>
1366:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.util.FibonacciHeapNode@getKey():127:key |==> 0.0
1367:EVR:<IDENTIFIER(T)>:<DEFAULT>:org.jgrapht.util.FibonacciHeapNode@getData():135:data |==> null
1368:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.util.FibonacciHeapNode@toString():145:Double.toString(key) |==> null
1369:LVR:POS:0:org.jgrapht.util.FibonacciHeap:81:1.0 |==> 0.0
1370:LVR:POS:NEG:org.jgrapht.util.FibonacciHeap:81:1.0 |==> -1.0
1371:LVR:POS:0:org.jgrapht.util.FibonacciHeap:81:1.0 |==> 0.0
1372:LVR:POS:NEG:org.jgrapht.util.FibonacciHeap:81:1.0 |==> -1.0
1373:LVR:POS:0:org.jgrapht.util.FibonacciHeap:81:5.0 |==> 0.0
1374:LVR:POS:NEG:org.jgrapht.util.FibonacciHeap:81:5.0 |==> -5.0
1375:AOR:+(double,double):%(double,double):org.jgrapht.util.FibonacciHeap:81:1.0 + Math.sqrt(5.0) |==> 1.0 % Math.sqrt(5.0)
1376:AOR:+(double,double):*(double,double):org.jgrapht.util.FibonacciHeap:81:1.0 + Math.sqrt(5.0) |==> 1.0 * Math.sqrt(5.0)
1377:AOR:+(double,double):-(double,double):org.jgrapht.util.FibonacciHeap:81:1.0 + Math.sqrt(5.0) |==> 1.0 - Math.sqrt(5.0)
1378:AOR:+(double,double):/(double,double):org.jgrapht.util.FibonacciHeap:81:1.0 + Math.sqrt(5.0) |==> 1.0 / Math.sqrt(5.0)
1379:LVR:POS:0:org.jgrapht.util.FibonacciHeap:81:2.0 |==> 0.0
1380:LVR:POS:NEG:org.jgrapht.util.FibonacciHeap:81:2.0 |==> -2.0
1381:AOR:/(double,double):%(double,double):org.jgrapht.util.FibonacciHeap:81:(1.0 + Math.sqrt(5.0)) / 2.0 |==> (1.0 + Math.sqrt(5.0)) % 2.0
1382:AOR:/(double,double):*(double,double):org.jgrapht.util.FibonacciHeap:81:(1.0 + Math.sqrt(5.0)) / 2.0 |==> (1.0 + Math.sqrt(5.0)) * 2.0
1383:AOR:/(double,double):+(double,double):org.jgrapht.util.FibonacciHeap:81:(1.0 + Math.sqrt(5.0)) / 2.0 |==> (1.0 + Math.sqrt(5.0)) + 2.0
1384:AOR:/(double,double):-(double,double):org.jgrapht.util.FibonacciHeap:81:(1.0 + Math.sqrt(5.0)) / 2.0 |==> (1.0 + Math.sqrt(5.0)) - 2.0
1385:AOR:/(double,double):%(double,double):org.jgrapht.util.FibonacciHeap:81:1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0) |==> 1.0 % Math.log((1.0 + Math.sqrt(5.0)) / 2.0)
1386:AOR:/(double,double):*(double,double):org.jgrapht.util.FibonacciHeap:81:1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0) |==> 1.0 * Math.log((1.0 + Math.sqrt(5.0)) / 2.0)
1387:AOR:/(double,double):+(double,double):org.jgrapht.util.FibonacciHeap:81:1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0) |==> 1.0 + Math.log((1.0 + Math.sqrt(5.0)) / 2.0)
1388:AOR:/(double,double):-(double,double):org.jgrapht.util.FibonacciHeap:81:1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0) |==> 1.0 - Math.log((1.0 + Math.sqrt(5.0)) / 2.0)
1389:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@isEmpty():116:minNode == null |==> false
1390:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@clear():126:minNode = null |==> <NO-OP>
1391:LVR:0:POS:org.jgrapht.util.FibonacciHeap@clear():127:0 |==> 1
1392:LVR:0:NEG:org.jgrapht.util.FibonacciHeap@clear():127:0 |==> -1
1393:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@clear():127:nNodes = 0 |==> <NO-OP>
1394:ROR:>(double,double):!=(double,double):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):146:k > x.key |==> k != x.key
1395:ROR:>(double,double):>=(double,double):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):146:k > x.key |==> k >= x.key
1396:ROR:>(double,double):FALSE(double,double):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):146:k > x.key |==> false
1397:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):151:x.key = k |==> <NO-OP>
1398:EVR:<MEMBER_SELECT(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):153:x.parent |==> null
1399:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):155:y != null |==> true
1400:ROR:<(double,double):!=(double,double):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):155:x.key < y.key |==> x.key != y.key
1401:ROR:<(double,double):<=(double,double):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):155:x.key < y.key |==> x.key <= y.key
1402:ROR:<(double,double):FALSE(double,double):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):155:x.key < y.key |==> false
1403:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):155:(y != null) && (x.key < y.key) |==> (y != null) == (x.key < y.key)
1404:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):155:(y != null) && (x.key < y.key) |==> false
1405:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):155:(y != null) && (x.key < y.key) |==> (y != null)
1406:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):155:(y != null) && (x.key < y.key) |==> (x.key < y.key)
1407:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):156:cut(x, y) |==> <NO-OP>
1408:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):157:cascadingCut(y) |==> <NO-OP>
1409:ROR:<(double,double):!=(double,double):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):160:x.key < minNode.key |==> x.key != minNode.key
1410:ROR:<(double,double):<=(double,double):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):160:x.key < minNode.key |==> x.key <= minNode.key
1411:ROR:<(double,double):FALSE(double,double):org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):160:x.key < minNode.key |==> false
1412:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@decreaseKey(org.jgrapht.util.FibonacciHeapNode<T>,double):161:minNode = x |==> <NO-OP>
1413:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@delete(org.jgrapht.util.FibonacciHeapNode<T>):180:decreaseKey(x, Double.NEGATIVE_INFINITY) |==> <NO-OP>
1414:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@delete(org.jgrapht.util.FibonacciHeapNode<T>):183:removeMin() |==> <NO-OP>
1415:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):200:node.key = key |==> <NO-OP>
1416:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):203:minNode != null |==> true
1417:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):204:node.left = minNode |==> <NO-OP>
1418:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):205:node.right = minNode.right |==> <NO-OP>
1419:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):206:minNode.right = node |==> <NO-OP>
1420:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):207:node.right.left = node |==> <NO-OP>
1421:ROR:<(double,double):!=(double,double):org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):209:key < minNode.key |==> key != minNode.key
1422:ROR:<(double,double):<=(double,double):org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):209:key < minNode.key |==> key <= minNode.key
1423:ROR:<(double,double):FALSE(double,double):org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):209:key < minNode.key |==> false
1424:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):210:minNode = node |==> <NO-OP>
1425:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):213:minNode = node |==> <NO-OP>
1426:STD:<INC>:<NO-OP>:org.jgrapht.util.FibonacciHeap@insert(org.jgrapht.util.FibonacciHeapNode<T>,double):216:nNodes++ |==> <NO-OP>
1427:EVR:<IDENTIFIER(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@min():231:minNode |==> null
1428:EVR:<IDENTIFIER(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@removeMin():246:minNode |==> null
1429:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@removeMin():248:z != null |==> true
1430:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@removeMin():249:z.degree |==> 0
1431:EVR:<MEMBER_SELECT(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@removeMin():250:z.child |==> null
1432:LVR:0:POS:org.jgrapht.util.FibonacciHeap@removeMin():254:0 |==> 1
1433:LVR:0:NEG:org.jgrapht.util.FibonacciHeap@removeMin():254:0 |==> -1
1434:ROR:>(int,int):!=(int,int):org.jgrapht.util.FibonacciHeap@removeMin():254:numKids > 0 |==> numKids != 0
1435:ROR:>(int,int):>=(int,int):org.jgrapht.util.FibonacciHeap@removeMin():254:numKids > 0 |==> numKids >= 0
1436:ROR:>(int,int):FALSE(int,int):org.jgrapht.util.FibonacciHeap@removeMin():254:numKids > 0 |==> false
1437:EVR:<MEMBER_SELECT(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@removeMin():255:x.right |==> null
1438:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():258:x.left.right = x.right |==> <NO-OP>
1439:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():259:x.right.left = x.left |==> <NO-OP>
1440:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():262:x.left = minNode |==> <NO-OP>
1441:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():263:x.right = minNode.right |==> <NO-OP>
1442:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():264:minNode.right = x |==> <NO-OP>
1443:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():265:x.right.left = x |==> <NO-OP>
1444:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():268:x.parent = null |==> <NO-OP>
1445:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():269:x = tempRight |==> <NO-OP>
1446:STD:<DEC>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():270:numKids-- |==> <NO-OP>
1447:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():274:z.left.right = z.right |==> <NO-OP>
1448:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():275:z.right.left = z.left |==> <NO-OP>
1449:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@removeMin():277:z == z.right |==> false
1450:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():278:minNode = null |==> <NO-OP>
1451:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():280:minNode = z.right |==> <NO-OP>
1452:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():281:consolidate() |==> <NO-OP>
1453:STD:<DEC>:<NO-OP>:org.jgrapht.util.FibonacciHeap@removeMin():285:nNodes-- |==> <NO-OP>
1454:EVR:<IDENTIFIER(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@removeMin():288:z |==> null
1455:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@size():303:nNodes |==> 0
1456:EVR:<NEW_CLASS(org.jgrapht.util.FibonacciHeap<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):323:new FibonacciHeap<T>() |==> null
1457:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):325:h1 != null |==> true
1458:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):325:h2 != null |==> true
1459:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):325:(h1 != null) && (h2 != null) |==> (h1 != null) == (h2 != null)
1460:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):325:(h1 != null) && (h2 != null) |==> false
1461:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):325:(h1 != null) && (h2 != null) |==> (h1 != null)
1462:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):325:(h1 != null) && (h2 != null) |==> (h2 != null)
1463:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):326:h.minNode = h1.minNode |==> <NO-OP>
1464:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):328:h.minNode != null |==> true
1465:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):329:h2.minNode != null |==> true
1466:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):330:h.minNode.right.left = h2.minNode.left |==> <NO-OP>
1467:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):331:h2.minNode.left.right = h.minNode.right |==> <NO-OP>
1468:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):332:h.minNode.right = h2.minNode |==> <NO-OP>
1469:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):333:h2.minNode.left = h.minNode |==> <NO-OP>
1470:ROR:<(double,double):!=(double,double):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):335:h2.minNode.key < h1.minNode.key |==> h2.minNode.key != h1.minNode.key
1471:ROR:<(double,double):<=(double,double):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):335:h2.minNode.key < h1.minNode.key |==> h2.minNode.key <= h1.minNode.key
1472:ROR:<(double,double):FALSE(double,double):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):335:h2.minNode.key < h1.minNode.key |==> false
1473:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):336:h.minNode = h2.minNode |==> <NO-OP>
1474:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):340:h.minNode = h2.minNode |==> <NO-OP>
1475:AOR:+(int,int):%(int,int):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):343:h1.nNodes + h2.nNodes |==> h1.nNodes % h2.nNodes
1476:AOR:+(int,int):*(int,int):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):343:h1.nNodes + h2.nNodes |==> h1.nNodes * h2.nNodes
1477:AOR:+(int,int):-(int,int):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):343:h1.nNodes + h2.nNodes |==> h1.nNodes - h2.nNodes
1478:AOR:+(int,int):/(int,int):org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):343:h1.nNodes + h2.nNodes |==> h1.nNodes / h2.nNodes
1479:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):343:h.nNodes = h1.nNodes + h2.nNodes |==> <NO-OP>
1480:EVR:<IDENTIFIER(org.jgrapht.util.FibonacciHeap<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@union(org.jgrapht.util.FibonacciHeap<T>,org.jgrapht.util.FibonacciHeap<T>):346:h |==> null
1481:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@toString():358:minNode == null |==> false
1482:STD:<RETURN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():359:return "FibonacciHeap=[]"; |==> <NO-OP>
1483:EVR:<NEW_CLASS(java.util.Stack<org.jgrapht.util.FibonacciHeapNode<T>>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@toString():363:new Stack<FibonacciHeapNode<T>>() |==> null
1484:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():364:stack.push(minNode) |==> <NO-OP>
1485:LVR:POS:0:org.jgrapht.util.FibonacciHeap@toString():366:512 |==> 0
1486:LVR:POS:NEG:org.jgrapht.util.FibonacciHeap@toString():366:512 |==> -512
1487:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():367:buf.append("FibonacciHeap=[") |==> <NO-OP>
1488:EVR:<METHOD_INVOCATION(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@toString():371:stack.pop() |==> null
1489:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():372:buf.append(curr) |==> <NO-OP>
1490:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():373:buf.append(", ") |==> <NO-OP>
1491:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@toString():375:curr.child != null |==> true
1492:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():376:stack.push(curr.child) |==> <NO-OP>
1493:EVR:<IDENTIFIER(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@toString():379:curr |==> null
1494:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():380:curr = curr.right |==> <NO-OP>
1495:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@toString():382:curr != start |==> true
1496:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():383:buf.append(curr) |==> <NO-OP>
1497:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():384:buf.append(", ") |==> <NO-OP>
1498:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@toString():386:curr.child != null |==> true
1499:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():387:stack.push(curr.child) |==> <NO-OP>
1500:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():390:curr = curr.right |==> <NO-OP>
1501:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@toString():394:buf.append(']') |==> <NO-OP>
1502:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@toString():396:buf.toString() |==> null
1503:EVR:<MEMBER_SELECT(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@cascadingCut(org.jgrapht.util.FibonacciHeapNode<T>):411:y.parent |==> null
1504:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@cascadingCut(org.jgrapht.util.FibonacciHeapNode<T>):414:z != null |==> true
1505:COR:y.mark:TRUE:org.jgrapht.util.FibonacciHeap@cascadingCut(org.jgrapht.util.FibonacciHeapNode<T>):416:y.mark |==> false
1506:COR:y.mark:FALSE:org.jgrapht.util.FibonacciHeap@cascadingCut(org.jgrapht.util.FibonacciHeapNode<T>):416:y.mark |==> true
1507:LVR:TRUE:FALSE:org.jgrapht.util.FibonacciHeap@cascadingCut(org.jgrapht.util.FibonacciHeapNode<T>):417:true |==> false
1508:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cascadingCut(org.jgrapht.util.FibonacciHeapNode<T>):417:y.mark = true |==> <NO-OP>
1509:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cascadingCut(org.jgrapht.util.FibonacciHeapNode<T>):420:cut(y, z) |==> <NO-OP>
1510:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cascadingCut(org.jgrapht.util.FibonacciHeapNode<T>):423:cascadingCut(z) |==> <NO-OP>
1511:AOR:*(double,double):%(double,double):org.jgrapht.util.FibonacciHeap@consolidate():433:Math.log(nNodes) * oneOverLogPhi |==> Math.log(nNodes) % oneOverLogPhi
1512:AOR:*(double,double):+(double,double):org.jgrapht.util.FibonacciHeap@consolidate():433:Math.log(nNodes) * oneOverLogPhi |==> Math.log(nNodes) + oneOverLogPhi
1513:AOR:*(double,double):-(double,double):org.jgrapht.util.FibonacciHeap@consolidate():433:Math.log(nNodes) * oneOverLogPhi |==> Math.log(nNodes) - oneOverLogPhi
1514:AOR:*(double,double):/(double,double):org.jgrapht.util.FibonacciHeap@consolidate():433:Math.log(nNodes) * oneOverLogPhi |==> Math.log(nNodes) / oneOverLogPhi
1515:LVR:POS:0:org.jgrapht.util.FibonacciHeap@consolidate():433:1 |==> 0
1516:LVR:POS:NEG:org.jgrapht.util.FibonacciHeap@consolidate():433:1 |==> -1
1517:AOR:+(int,int):%(int,int):org.jgrapht.util.FibonacciHeap@consolidate():433:((int)Math.floor(Math.log(nNodes) * oneOverLogPhi)) + 1 |==> ((int)Math.floor(Math.log(nNodes) * oneOverLogPhi)) % 1
1518:AOR:+(int,int):*(int,int):org.jgrapht.util.FibonacciHeap@consolidate():433:((int)Math.floor(Math.log(nNodes) * oneOverLogPhi)) + 1 |==> ((int)Math.floor(Math.log(nNodes) * oneOverLogPhi)) * 1
1519:AOR:+(int,int):-(int,int):org.jgrapht.util.FibonacciHeap@consolidate():433:((int)Math.floor(Math.log(nNodes) * oneOverLogPhi)) + 1 |==> ((int)Math.floor(Math.log(nNodes) * oneOverLogPhi)) - 1
1520:AOR:+(int,int):/(int,int):org.jgrapht.util.FibonacciHeap@consolidate():433:((int)Math.floor(Math.log(nNodes) * oneOverLogPhi)) + 1 |==> ((int)Math.floor(Math.log(nNodes) * oneOverLogPhi)) / 1
1521:EVR:<NEW_CLASS(java.util.ArrayList<org.jgrapht.util.FibonacciHeapNode<T>>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@consolidate():436:new ArrayList<FibonacciHeapNode<T>>(arraySize) |==> null
1522:LVR:0:POS:org.jgrapht.util.FibonacciHeap@consolidate():439:0 |==> 1
1523:LVR:0:NEG:org.jgrapht.util.FibonacciHeap@consolidate():439:0 |==> -1
1524:ROR:<(int,int):!=(int,int):org.jgrapht.util.FibonacciHeap@consolidate():439:i < arraySize |==> i != arraySize
1525:ROR:<(int,int):<=(int,int):org.jgrapht.util.FibonacciHeap@consolidate():439:i < arraySize |==> i <= arraySize
1526:ROR:<(int,int):FALSE(int,int):org.jgrapht.util.FibonacciHeap@consolidate():439:i < arraySize |==> false
1527:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():440:array.add(null) |==> <NO-OP>
1528:LVR:0:POS:org.jgrapht.util.FibonacciHeap@consolidate():444:0 |==> 1
1529:LVR:0:NEG:org.jgrapht.util.FibonacciHeap@consolidate():444:0 |==> -1
1530:EVR:<IDENTIFIER(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@consolidate():445:minNode |==> null
1531:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@consolidate():447:x != null |==> true
1532:STD:<INC>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():448:numRoots++ |==> <NO-OP>
1533:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():449:x = x.right |==> <NO-OP>
1534:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@consolidate():451:x != minNode |==> true
1535:STD:<INC>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():452:numRoots++ |==> <NO-OP>
1536:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():453:x = x.right |==> <NO-OP>
1537:LVR:0:POS:org.jgrapht.util.FibonacciHeap@consolidate():458:0 |==> 1
1538:LVR:0:NEG:org.jgrapht.util.FibonacciHeap@consolidate():458:0 |==> -1
1539:ROR:>(int,int):!=(int,int):org.jgrapht.util.FibonacciHeap@consolidate():458:numRoots > 0 |==> numRoots != 0
1540:ROR:>(int,int):>=(int,int):org.jgrapht.util.FibonacciHeap@consolidate():458:numRoots > 0 |==> numRoots >= 0
1541:ROR:>(int,int):FALSE(int,int):org.jgrapht.util.FibonacciHeap@consolidate():458:numRoots > 0 |==> false
1542:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@consolidate():460:x.degree |==> 0
1543:EVR:<MEMBER_SELECT(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@consolidate():461:x.right |==> null
1544:EVR:<METHOD_INVOCATION(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@consolidate():465:array.get(d) |==> null
1545:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@consolidate():466:y == null |==> false
1546:STD:<BREAK>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():468:break; |==> <NO-OP>
1547:ROR:>(double,double):!=(double,double):org.jgrapht.util.FibonacciHeap@consolidate():473:x.key > y.key |==> x.key != y.key
1548:ROR:>(double,double):>=(double,double):org.jgrapht.util.FibonacciHeap@consolidate():473:x.key > y.key |==> x.key >= y.key
1549:ROR:>(double,double):FALSE(double,double):org.jgrapht.util.FibonacciHeap@consolidate():473:x.key > y.key |==> false
1550:EVR:<IDENTIFIER(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@consolidate():474:y |==> null
1551:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():475:y = x |==> <NO-OP>
1552:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():476:x = temp |==> <NO-OP>
1553:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():480:link(y, x) |==> <NO-OP>
1554:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():483:array.set(d, null) |==> <NO-OP>
1555:STD:<INC>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():484:d++ |==> <NO-OP>
1556:STD:<CALL>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():489:array.set(d, x) |==> <NO-OP>
1557:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():492:x = next |==> <NO-OP>
1558:STD:<DEC>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():493:numRoots-- |==> <NO-OP>
1559:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():498:minNode = null |==> <NO-OP>
1560:LVR:0:POS:org.jgrapht.util.FibonacciHeap@consolidate():500:0 |==> 1
1561:LVR:0:NEG:org.jgrapht.util.FibonacciHeap@consolidate():500:0 |==> -1
1562:ROR:<(int,int):!=(int,int):org.jgrapht.util.FibonacciHeap@consolidate():500:i < arraySize |==> i != arraySize
1563:ROR:<(int,int):<=(int,int):org.jgrapht.util.FibonacciHeap@consolidate():500:i < arraySize |==> i <= arraySize
1564:ROR:<(int,int):FALSE(int,int):org.jgrapht.util.FibonacciHeap@consolidate():500:i < arraySize |==> false
1565:EVR:<METHOD_INVOCATION(org.jgrapht.util.FibonacciHeapNode<T>)>:<DEFAULT>:org.jgrapht.util.FibonacciHeap@consolidate():501:array.get(i) |==> null
1566:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@consolidate():502:y == null |==> false
1567:STD:<CONT>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():503:continue; |==> <NO-OP>
1568:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@consolidate():507:minNode != null |==> true
1569:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():509:y.left.right = y.right |==> <NO-OP>
1570:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():510:y.right.left = y.left |==> <NO-OP>
1571:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():513:y.left = minNode |==> <NO-OP>
1572:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():514:y.right = minNode.right |==> <NO-OP>
1573:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():515:minNode.right = y |==> <NO-OP>
1574:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():516:y.right.left = y |==> <NO-OP>
1575:ROR:<(double,double):!=(double,double):org.jgrapht.util.FibonacciHeap@consolidate():519:y.key < minNode.key |==> y.key != minNode.key
1576:ROR:<(double,double):<=(double,double):org.jgrapht.util.FibonacciHeap@consolidate():519:y.key < minNode.key |==> y.key <= minNode.key
1577:ROR:<(double,double):FALSE(double,double):org.jgrapht.util.FibonacciHeap@consolidate():519:y.key < minNode.key |==> false
1578:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():520:minNode = y |==> <NO-OP>
1579:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@consolidate():523:minNode = y |==> <NO-OP>
1580:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):542:x.left.right = x.right |==> <NO-OP>
1581:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):543:x.right.left = x.left |==> <NO-OP>
1582:STD:<DEC>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):544:y.degree-- |==> <NO-OP>
1583:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):547:y.child == x |==> false
1584:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):548:y.child = x.right |==> <NO-OP>
1585:LVR:0:POS:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):551:0 |==> 1
1586:LVR:0:NEG:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):551:0 |==> -1
1587:ROR:==(int,int):<=(int,int):org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):551:y.degree == 0 |==> y.degree <= 0
1588:ROR:==(int,int):>=(int,int):org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):551:y.degree == 0 |==> y.degree >= 0
1589:ROR:==(int,int):FALSE(int,int):org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):551:y.degree == 0 |==> false
1590:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):552:y.child = null |==> <NO-OP>
1591:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):556:x.left = minNode |==> <NO-OP>
1592:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):557:x.right = minNode.right |==> <NO-OP>
1593:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):558:minNode.right = x |==> <NO-OP>
1594:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):559:x.right.left = x |==> <NO-OP>
1595:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):562:x.parent = null |==> <NO-OP>
1596:LVR:FALSE:TRUE:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):565:false |==> true
1597:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@cut(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):565:x.mark = false |==> <NO-OP>
1598:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):581:y.left.right = y.right |==> <NO-OP>
1599:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):582:y.right.left = y.left |==> <NO-OP>
1600:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):585:y.parent = x |==> <NO-OP>
1601:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):587:x.child == null |==> false
1602:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):588:x.child = y |==> <NO-OP>
1603:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):589:y.right = y |==> <NO-OP>
1604:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):590:y.left = y |==> <NO-OP>
1605:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):592:y.left = x.child |==> <NO-OP>
1606:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):593:y.right = x.child.right |==> <NO-OP>
1607:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):594:x.child.right = y |==> <NO-OP>
1608:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):595:y.right.left = y |==> <NO-OP>
1609:STD:<INC>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):599:x.degree++ |==> <NO-OP>
1610:LVR:FALSE:TRUE:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):602:false |==> true
1611:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.FibonacciHeap@link(org.jgrapht.util.FibonacciHeapNode<T>,org.jgrapht.util.FibonacciHeapNode<T>):602:y.mark = false |==> <NO-OP>
1612:EVR:<NEW_CLASS(java.util.HashMap<V,org.jgrapht.alg.NeighborIndex.Neighbors<V,E>>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex:68:new HashMap<V, Neighbors<V, E>>() |==> null
1613:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.NeighborIndex@<init>(org.jgrapht.Graph<V,E>):81:graph = g |==> <NO-OP>
1614:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@neighborsOf(V):97:getNeighbors(v).getNeighbors() |==> null
1615:EVR:<METHOD_INVOCATION(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@neighborListOf(V):114:getNeighbors(v).getNeighborList() |==> null
1616:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):122:e.getEdge() |==> null
1617:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):123:graph.getEdgeSource(edge) |==> null
1618:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):124:graph.getEdgeTarget(edge) |==> null
1619:COR:neighborMap.containsKey(source):TRUE:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):131:neighborMap.containsKey(source) |==> false
1620:COR:neighborMap.containsKey(source):FALSE:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):131:neighborMap.containsKey(source) |==> true
1621:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):132:getNeighbors(source).addNeighbor(target) |==> <NO-OP>
1622:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):134:getNeighbors(source) |==> <NO-OP>
1623:COR:neighborMap.containsKey(target):TRUE:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):136:neighborMap.containsKey(target) |==> false
1624:COR:neighborMap.containsKey(target):FALSE:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):136:neighborMap.containsKey(target) |==> true
1625:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):137:getNeighbors(target).addNeighbor(source) |==> <NO-OP>
1626:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):139:getNeighbors(target) |==> <NO-OP>
1627:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):148:e.getEdge() |==> null
1628:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):149:e.getEdgeSource() |==> null
1629:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):150:e.getEdgeTarget() |==> null
1630:COR:neighborMap.containsKey(source):TRUE:org.jgrapht.alg.NeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):151:neighborMap.containsKey(source) |==> false
1631:COR:neighborMap.containsKey(source):FALSE:org.jgrapht.alg.NeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):151:neighborMap.containsKey(source) |==> true
1632:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):152:neighborMap.get(source).removeNeighbor(target) |==> <NO-OP>
1633:COR:neighborMap.containsKey(target):TRUE:org.jgrapht.alg.NeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):154:neighborMap.containsKey(target) |==> false
1634:COR:neighborMap.containsKey(target):FALSE:org.jgrapht.alg.NeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):154:neighborMap.containsKey(target) |==> true
1635:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):155:neighborMap.get(target).removeNeighbor(source) |==> <NO-OP>
1636:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex@vertexRemoved(org.jgrapht.event.GraphVertexChangeEvent<V>):172:neighborMap.remove(e.getVertex()) |==> <NO-OP>
1637:EVR:<METHOD_INVOCATION(org.jgrapht.alg.NeighborIndex.Neighbors<V,E>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@getNeighbors(V):177:neighborMap.get(v) |==> null
1638:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.NeighborIndex@getNeighbors(V):178:neighbors == null |==> false
1639:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.NeighborIndex@getNeighbors(V):179:neighbors = new Neighbors<V, E>(v, Graphs.neighborListOf(graph, v)) |==> <NO-OP>
1640:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex@getNeighbors(V):181:neighborMap.put(v, neighbors) |==> <NO-OP>
1641:EVR:<IDENTIFIER(org.jgrapht.alg.NeighborIndex.Neighbors<V,E>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex@getNeighbors(V):183:neighbors |==> null
1642:EVR:<NEW_CLASS(java.util.LinkedHashMap<V,org.jgrapht.util.ModifiableInteger>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex$Neighbors:195:new LinkedHashMap<V, ModifiableInteger>() |==> null
1643:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex$Neighbors:200:Collections.unmodifiableSet(neighborCounts.keySet()) |==> null
1644:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex$Neighbors@<init>(V,java.util.Collection<V>):207:addNeighbor(neighbor) |==> <NO-OP>
1645:EVR:<METHOD_INVOCATION(org.jgrapht.util.ModifiableInteger)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex$Neighbors@addNeighbor(V):213:neighborCounts.get(v) |==> null
1646:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.NeighborIndex$Neighbors@addNeighbor(V):214:count == null |==> false
1647:LVR:POS:0:org.jgrapht.alg.NeighborIndex$Neighbors@addNeighbor(V):215:1 |==> 0
1648:LVR:POS:NEG:org.jgrapht.alg.NeighborIndex$Neighbors@addNeighbor(V):215:1 |==> -1
1649:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.NeighborIndex$Neighbors@addNeighbor(V):215:count = new ModifiableInteger(1) |==> <NO-OP>
1650:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex$Neighbors@addNeighbor(V):216:neighborCounts.put(v, count) |==> <NO-OP>
1651:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex$Neighbors@addNeighbor(V):218:count.increment() |==> <NO-OP>
1652:EVR:<METHOD_INVOCATION(org.jgrapht.util.ModifiableInteger)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex$Neighbors@removeNeighbor(V):224:neighborCounts.get(v) |==> null
1653:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.NeighborIndex$Neighbors@removeNeighbor(V):225:count == null |==> false
1654:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex$Neighbors@removeNeighbor(V):230:count.decrement() |==> <NO-OP>
1655:LVR:0:POS:org.jgrapht.alg.NeighborIndex$Neighbors@removeNeighbor(V):231:0 |==> 1
1656:LVR:0:NEG:org.jgrapht.alg.NeighborIndex$Neighbors@removeNeighbor(V):231:0 |==> -1
1657:ROR:==(int,int):<=(int,int):org.jgrapht.alg.NeighborIndex$Neighbors@removeNeighbor(V):231:count.getValue() == 0 |==> count.getValue() <= 0
1658:ROR:==(int,int):>=(int,int):org.jgrapht.alg.NeighborIndex$Neighbors@removeNeighbor(V):231:count.getValue() == 0 |==> count.getValue() >= 0
1659:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.NeighborIndex$Neighbors@removeNeighbor(V):231:count.getValue() == 0 |==> false
1660:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex$Neighbors@removeNeighbor(V):232:neighborCounts.remove(v) |==> <NO-OP>
1661:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex$Neighbors@getNeighbors():238:neighborSet |==> null
1662:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():243:new ArrayList<V>() |==> null
1663:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():248:entry.getKey() |==> null
1664:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():249:entry.getValue().intValue() |==> 0
1665:LVR:0:POS:org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():250:0 |==> 1
1666:LVR:0:NEG:org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():250:0 |==> -1
1667:ROR:<(int,int):!=(int,int):org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():250:i < count |==> i != count
1668:ROR:<(int,int):<=(int,int):org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():250:i < count |==> i <= count
1669:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():250:i < count |==> false
1670:STD:<CALL>:<NO-OP>:org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():251:neighbors.add(v) |==> <NO-OP>
1671:EVR:<IDENTIFIER(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.NeighborIndex$Neighbors@getNeighborList():254:neighbors |==> null
1672:EVR:<NEW_CLASS(java.util.HashMap<V,org.jgrapht.alg.NeighborIndex.Neighbors<V,E>>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex:64:new HashMap<V, Neighbors<V, E>>() |==> null
1673:EVR:<NEW_CLASS(java.util.HashMap<V,org.jgrapht.alg.NeighborIndex.Neighbors<V,E>>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex:65:new HashMap<V, Neighbors<V, E>>() |==> null
1674:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@<init>(org.jgrapht.DirectedGraph<V,E>):77:graph = g |==> <NO-OP>
1675:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@predecessorsOf(V):94:getPredecessors(v).getNeighbors() |==> null
1676:EVR:<METHOD_INVOCATION(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@predecessorListOf(V):111:getPredecessors(v).getNeighborList() |==> null
1677:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@successorsOf(V):126:getSuccessors(v).getNeighbors() |==> null
1678:EVR:<METHOD_INVOCATION(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@successorListOf(V):143:getSuccessors(v).getNeighborList() |==> null
1679:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):151:e.getEdge() |==> null
1680:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):152:graph.getEdgeSource(edge) |==> null
1681:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):153:graph.getEdgeTarget(edge) |==> null
1682:COR:successorMap.containsKey(source):TRUE:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):160:successorMap.containsKey(source) |==> false
1683:COR:successorMap.containsKey(source):FALSE:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):160:successorMap.containsKey(source) |==> true
1684:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):161:getSuccessors(source).addNeighbor(target) |==> <NO-OP>
1685:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):163:getSuccessors(source) |==> <NO-OP>
1686:COR:predecessorMap.containsKey(target):TRUE:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):165:predecessorMap.containsKey(target) |==> false
1687:COR:predecessorMap.containsKey(target):FALSE:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):165:predecessorMap.containsKey(target) |==> true
1688:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):166:getPredecessors(target).addNeighbor(source) |==> <NO-OP>
1689:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):168:getPredecessors(target) |==> <NO-OP>
1690:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):177:e.getEdge() |==> null
1691:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):178:e.getEdgeSource() |==> null
1692:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):179:e.getEdgeTarget() |==> null
1693:COR:successorMap.containsKey(source):TRUE:org.jgrapht.alg.DirectedNeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):180:successorMap.containsKey(source) |==> false
1694:COR:successorMap.containsKey(source):FALSE:org.jgrapht.alg.DirectedNeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):180:successorMap.containsKey(source) |==> true
1695:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):181:successorMap.get(source).removeNeighbor(target) |==> <NO-OP>
1696:COR:predecessorMap.containsKey(target):TRUE:org.jgrapht.alg.DirectedNeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):183:predecessorMap.containsKey(target) |==> false
1697:COR:predecessorMap.containsKey(target):FALSE:org.jgrapht.alg.DirectedNeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):183:predecessorMap.containsKey(target) |==> true
1698:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):184:predecessorMap.get(target).removeNeighbor(source) |==> <NO-OP>
1699:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@vertexRemoved(org.jgrapht.event.GraphVertexChangeEvent<V>):201:predecessorMap.remove(e.getVertex()) |==> <NO-OP>
1700:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@vertexRemoved(org.jgrapht.event.GraphVertexChangeEvent<V>):202:successorMap.remove(e.getVertex()) |==> <NO-OP>
1701:EVR:<METHOD_INVOCATION(org.jgrapht.alg.NeighborIndex.Neighbors<V,E>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@getPredecessors(V):207:predecessorMap.get(v) |==> null
1702:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.DirectedNeighborIndex@getPredecessors(V):208:neighbors == null |==> false
1703:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@getPredecessors(V):209:neighbors = new Neighbors<V, E>(v, Graphs.predecessorListOf(graph, v)) |==> <NO-OP>
1704:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@getPredecessors(V):212:predecessorMap.put(v, neighbors) |==> <NO-OP>
1705:EVR:<IDENTIFIER(org.jgrapht.alg.NeighborIndex.Neighbors<V,E>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@getPredecessors(V):214:neighbors |==> null
1706:EVR:<METHOD_INVOCATION(org.jgrapht.alg.NeighborIndex.Neighbors<V,E>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@getSuccessors(V):219:successorMap.get(v) |==> null
1707:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.DirectedNeighborIndex@getSuccessors(V):220:neighbors == null |==> false
1708:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@getSuccessors(V):221:neighbors = new Neighbors<V, E>(v, Graphs.successorListOf(graph, v)) |==> <NO-OP>
1709:STD:<CALL>:<NO-OP>:org.jgrapht.alg.DirectedNeighborIndex@getSuccessors(V):224:successorMap.put(v, neighbors) |==> <NO-OP>
1710:EVR:<IDENTIFIER(org.jgrapht.alg.NeighborIndex.Neighbors<V,E>)>:<DEFAULT>:org.jgrapht.alg.DirectedNeighborIndex@getSuccessors(V):226:neighbors |==> null
1711:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.ModifiableInteger@<init>(int):102:this.value = value |==> <NO-OP>
1712:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.ModifiableInteger@setValue(int):114:this.value = value |==> <NO-OP>
1713:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@getValue():126:this.value |==> 0
1714:STD:<INC>:<NO-OP>:org.jgrapht.util.ModifiableInteger@increment():134:this.value++ |==> <NO-OP>
1715:STD:<DEC>:<NO-OP>:org.jgrapht.util.ModifiableInteger@decrement():142:this.value-- |==> <NO-OP>
1716:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):160:this.value |==> 0
1717:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):161:anotherInteger.value |==> 0
1718:ROR:<(int,int):!=(int,int):org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:thisVal < anotherVal |==> thisVal != anotherVal
1719:ROR:<(int,int):<=(int,int):org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:thisVal < anotherVal |==> thisVal <= anotherVal
1720:ROR:<(int,int):FALSE(int,int):org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:thisVal < anotherVal |==> false
1721:LVR:NEG:0:org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:-1 |==> 0
1722:LVR:NEG:POS:org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:-1 |==> 1
1723:ROR:==(int,int):<=(int,int):org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:thisVal == anotherVal |==> thisVal <= anotherVal
1724:ROR:==(int,int):>=(int,int):org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:thisVal == anotherVal |==> thisVal >= anotherVal
1725:ROR:==(int,int):FALSE(int,int):org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:thisVal == anotherVal |==> false
1726:LVR:0:POS:org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:0 |==> 1
1727:LVR:0:NEG:org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:0 |==> -1
1728:LVR:POS:0:org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:1 |==> 0
1729:LVR:POS:NEG:org.jgrapht.util.ModifiableInteger@compareTo(org.jgrapht.util.ModifiableInteger):163:1 |==> -1
1730:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@doubleValue():171:this.value |==> 0
1731:ROR:==(int,int):<=(int,int):org.jgrapht.util.ModifiableInteger@equals(java.lang.Object):188:this.value == ((ModifiableInteger)o).value |==> this.value <= ((ModifiableInteger)o).value
1732:ROR:==(int,int):>=(int,int):org.jgrapht.util.ModifiableInteger@equals(java.lang.Object):188:this.value == ((ModifiableInteger)o).value |==> this.value >= ((ModifiableInteger)o).value
1733:ROR:==(int,int):FALSE(int,int):org.jgrapht.util.ModifiableInteger@equals(java.lang.Object):188:this.value == ((ModifiableInteger)o).value |==> false
1734:STD:<RETURN>:<NO-OP>:org.jgrapht.util.ModifiableInteger@equals(java.lang.Object):188:return Config.__M_NO == 1733 ? false : Config.__M_NO == 1732 ? this.value >= ((ModifiableInteger)o).value : Config.__M_NO == 1731 ? this.value <= ((ModifiableInteger)o).value : Config.__M_NO == 0 && Config.COVERED(1731, 1733) ? this.value == ((ModifiableInteger)o).value : this.value == ((ModifiableInteger)o).value; |==> <NO-OP>
1735:LVR:FALSE:TRUE:org.jgrapht.util.ModifiableInteger@equals(java.lang.Object):191:false |==> true
1736:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@floatValue():199:this.value |==> 0
1737:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@hashCode():211:this.value |==> 0
1738:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@intValue():219:this.value |==> 0
1739:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@longValue():227:this.value |==> 0
1740:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@toInteger():239:Integer.valueOf(this.value) |==> null
1741:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.util.ModifiableInteger@toString():254:String.valueOf(this.value) |==> null
1742:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@<init>(org.jgrapht.UndirectedGraph<V,E>):81:this.graph = G |==> <NO-OP>
1743:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch(org.jgrapht.UndirectedGraph<V,E>):94:new EdmondsBlossomShrinking<V, E>(g).getMatching() |==> null
1744:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsBlossomShrinking@getMatching():102:matching == null |==> false
1745:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@getMatching():103:matching = findMatch() |==> <NO-OP>
1746:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@getMatching():105:Collections.unmodifiableSet(matching) |==> null
1747:EVR:<NEW_CLASS(org.jgrapht.util.ArrayUnenforcedSet<E>)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():115:new ArrayUnenforcedSet<E>() |==> null
1748:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():116:match = new HashMap<V, V>() |==> <NO-OP>
1749:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():117:p = new HashMap<V, V>() |==> <NO-OP>
1750:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():118:q = new ArrayDeque<V>() |==> <NO-OP>
1751:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():119:base = new HashMap<V, V>() |==> <NO-OP>
1752:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():120:used = new HashSet<V>() |==> <NO-OP>
1753:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():121:blossom = new HashSet<V>() |==> <NO-OP>
1754:COR:match.containsKey(i):TRUE:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():124:match.containsKey(i) |==> false
1755:COR:match.containsKey(i):FALSE:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():124:match.containsKey(i) |==> true
1756:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():125:findPath(i) |==> null
1757:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():126:v != null |==> true
1758:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():127:p.get(v) |==> null
1759:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():128:match.get(pv) |==> null
1760:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():129:match.put(v, pv) |==> <NO-OP>
1761:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():130:match.put(pv, v) |==> <NO-OP>
1762:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():131:v = ppv |==> <NO-OP>
1763:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():136:new HashSet<V>() |==> null
1764:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():138:!seen.contains(v) && match.containsKey(v) |==> !seen.contains(v) == match.containsKey(v)
1765:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():138:!seen.contains(v) && match.containsKey(v) |==> false
1766:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():138:!seen.contains(v) && match.containsKey(v) |==> !seen.contains(v)
1767:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():138:!seen.contains(v) && match.containsKey(v) |==> match.containsKey(v)
1768:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():139:seen.add(v) |==> <NO-OP>
1769:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():140:seen.add(match.get(v)) |==> <NO-OP>
1770:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():141:result.add(graph.getEdge(v, match.get(v))) |==> <NO-OP>
1771:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findMatch():145:result |==> null
1772:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):150:used.clear() |==> <NO-OP>
1773:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):151:p.clear() |==> <NO-OP>
1774:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):152:base.clear() |==> <NO-OP>
1775:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):155:base.put(i, i) |==> <NO-OP>
1776:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):158:used.add(root) |==> <NO-OP>
1777:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):159:q.add(root) |==> <NO-OP>
1778:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):161:q.remove() |==> null
1779:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):163:graph.getEdgeSource(e) |==> null
1780:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):164:to == v |==> false
1781:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):165:to = graph.getEdgeTarget(e) |==> <NO-OP>
1782:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):167:base.get(v) == base.get(to) |==> false
1783:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):167:match.get(v) == to |==> false
1784:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):167:(base.get(v) == base.get(to)) || (match.get(v) == to) |==> (base.get(v) == base.get(to)) != (match.get(v) == to)
1785:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):167:(base.get(v) == base.get(to)) || (match.get(v) == to) |==> (base.get(v) == base.get(to))
1786:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):167:(base.get(v) == base.get(to)) || (match.get(v) == to) |==> (match.get(v) == to)
1787:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):167:(base.get(v) == base.get(to)) || (match.get(v) == to) |==> true
1788:STD:<CONT>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):168:continue; |==> <NO-OP>
1789:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):170:to == root |==> false
1790:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):171:(match.containsKey(to)) && (p.containsKey(match.get(to))) |==> (match.containsKey(to)) == (p.containsKey(match.get(to)))
1791:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):172:(match.containsKey(to)) && (p.containsKey(match.get(to))) |==> false
1792:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):171:(match.containsKey(to)) && (p.containsKey(match.get(to))) |==> (match.containsKey(to))
1793:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):172:(match.containsKey(to)) && (p.containsKey(match.get(to))) |==> (p.containsKey(match.get(to)))
1794:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):170:(to == root) || ((match.containsKey(to)) && (p.containsKey(match.get(to)))) |==> (to == root) != ((match.containsKey(to)) && (p.containsKey(match.get(to))))
1795:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):170:(to == root) || ((match.containsKey(to)) && (p.containsKey(match.get(to)))) |==> (to == root)
1796:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):171:(to == root) || ((match.containsKey(to)) && (p.containsKey(match.get(to)))) |==> ((match.containsKey(to)) && (p.containsKey(match.get(to))))
1797:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):171:(to == root) || ((match.containsKey(to)) && (p.containsKey(match.get(to)))) |==> true
1798:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):174:lca(graph, v, to) |==> null
1799:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):175:blossom.clear() |==> <NO-OP>
1800:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):176:markPath(v, curbase, to) |==> <NO-OP>
1801:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):177:markPath(to, curbase, v) |==> <NO-OP>
1802:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):180:base.containsKey(i) && blossom.contains(base.get(i)) |==> base.containsKey(i) == blossom.contains(base.get(i))
1803:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):181:base.containsKey(i) && blossom.contains(base.get(i)) |==> false
1804:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):180:base.containsKey(i) && blossom.contains(base.get(i)) |==> base.containsKey(i)
1805:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):181:base.containsKey(i) && blossom.contains(base.get(i)) |==> blossom.contains(base.get(i))
1806:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):183:base.put(i, curbase) |==> <NO-OP>
1807:COR:used.contains(i):TRUE:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):184:used.contains(i) |==> false
1808:COR:used.contains(i):FALSE:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):184:used.contains(i) |==> true
1809:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):185:used.add(i) |==> <NO-OP>
1810:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):186:q.add(i) |==> <NO-OP>
1811:COR:p.containsKey(to):TRUE:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):190:p.containsKey(to) |==> false
1812:COR:p.containsKey(to):FALSE:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):190:p.containsKey(to) |==> true
1813:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):191:p.put(to, v) |==> <NO-OP>
1814:COR:match.containsKey(to):TRUE:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):192:match.containsKey(to) |==> false
1815:COR:match.containsKey(to):FALSE:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):192:match.containsKey(to) |==> true
1816:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):193:return to; |==> <NO-OP>
1817:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):195:to = match.get(to) |==> <NO-OP>
1818:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):196:used.add(to) |==> <NO-OP>
1819:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@findPath(V):197:q.add(to) |==> <NO-OP>
1820:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsBlossomShrinking@markPath(V,V,V):206:base.get(v) != b |==> true
1821:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@markPath(V,V,V):207:blossom.add(base.get(v)) |==> <NO-OP>
1822:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@markPath(V,V,V):208:blossom.add(base.get(match.get(v))) |==> <NO-OP>
1823:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@markPath(V,V,V):209:p.put(v, child) |==> <NO-OP>
1824:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@markPath(V,V,V):210:child = match.get(v) |==> <NO-OP>
1825:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@markPath(V,V,V):211:v = p.get(match.get(v)) |==> <NO-OP>
1826:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):217:new HashSet<V>() |==> null
1827:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):219:a = base.get(a) |==> <NO-OP>
1828:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):220:seen.add(a) |==> <NO-OP>
1829:COR:match.containsKey(a):TRUE:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):221:match.containsKey(a) |==> false
1830:COR:match.containsKey(a):FALSE:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):221:match.containsKey(a) |==> true
1831:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):222:break; |==> <NO-OP>
1832:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):224:a = p.get(match.get(a)) |==> <NO-OP>
1833:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):227:b = base.get(b) |==> <NO-OP>
1834:COR:seen.contains(b):TRUE:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):228:seen.contains(b) |==> false
1835:COR:seen.contains(b):FALSE:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):228:seen.contains(b) |==> true
1836:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):229:return b; |==> <NO-OP>
1837:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsBlossomShrinking@lca(org.jgrapht.UndirectedGraph<V,E>,V,V):231:b = p.get(match.get(b)) |==> <NO-OP>
1838:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):110:network == null |==> false
1839:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):113:0 |==> 1
1840:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):113:0 |==> -1
1841:ROR:<=(double,double):<(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):113:epsilon <= 0 |==> epsilon < 0
1842:ROR:<=(double,double):==(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):113:epsilon <= 0 |==> epsilon == 0
1843:ROR:<=(double,double):TRUE(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):113:epsilon <= 0 |==> true
1844:ORU:-(double):+(double):org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):118:-epsilon |==> +epsilon
1845:ROR:<(double,double):!=(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):118:network.getEdgeWeight(e) < -epsilon |==> network.getEdgeWeight(e) != -epsilon
1846:ROR:<(double,double):<=(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):118:network.getEdgeWeight(e) < -epsilon |==> network.getEdgeWeight(e) <= -epsilon
1847:ROR:<(double,double):FALSE(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):118:network.getEdgeWeight(e) < -epsilon |==> false
1848:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):124:this.network = network |==> <NO-OP>
1849:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):125:this.epsilon = epsilon |==> <NO-OP>
1850:LVR:NEG:0:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):127:-1 |==> 0
1851:LVR:NEG:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):127:-1 |==> 1
1852:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):127:currentSource = -1 |==> <NO-OP>
1853:LVR:NEG:0:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):128:-1 |==> 0
1854:LVR:NEG:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):128:-1 |==> 1
1855:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):128:currentSink = -1 |==> <NO-OP>
1856:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):129:maximumFlow = null |==> <NO-OP>
1857:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):130:maximumFlowValue = null |==> <NO-OP>
1858:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@<init>(org.jgrapht.DirectedGraph<V,E>,double):132:buildInternalNetwork() |==> <NO-OP>
1859:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():140:numNodes = network.vertexSet().size() |==> <NO-OP>
1860:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():141:nodes = new ArrayList<Node>() |==> <NO-OP>
1861:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():142:network.vertexSet().iterator() |==> null
1862:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():143:indexer = new HashMap<V, Integer>() |==> <NO-OP>
1863:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():144:0 |==> 1
1864:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():144:0 |==> -1
1865:ROR:<(int,int):!=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():144:i < numNodes |==> i != numNodes
1866:ROR:<(int,int):<=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():144:i < numNodes |==> i <= numNodes
1867:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():144:i < numNodes |==> false
1868:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():145:it.next() |==> null
1869:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():146:nodes.add(new Node(currentNode)) |==> <NO-OP>
1870:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():147:indexer.put(currentNode, i) |==> <NO-OP>
1871:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():149:0 |==> 1
1872:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():149:0 |==> -1
1873:ROR:<(int,int):!=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():149:i < numNodes |==> i != numNodes
1874:ROR:<(int,int):<=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():149:i < numNodes |==> i <= numNodes
1875:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():149:i < numNodes |==> false
1876:EVR:<MEMBER_SELECT(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():150:nodes.get(i).prototype |==> null
1877:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():152:network.getEdgeTarget(e) |==> null
1878:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():153:indexer.get(he) |==> null
1879:EVR:<NEW_CLASS(org.jgrapht.alg.EdmondsKarpMaximumFlow<V,E>.Arc)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():154:new Arc(i, j, network.getEdgeWeight(e), e) |==> null
1880:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():155:0.0 |==> 1.0
1881:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():155:0.0 |==> -1.0
1882:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():156:e1.reversed = e2 |==> <NO-OP>
1883:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():157:e2.reversed = e1 |==> <NO-OP>
1884:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():158:nodes.get(i).outgoingArcs.add(e1) |==> <NO-OP>
1885:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@buildInternalNetwork():159:nodes.get(j).outgoingArcs.add(e2) |==> <NO-OP>
1886:COR:network.containsVertex(source):TRUE:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):177:network.containsVertex(source) |==> false
1887:COR:network.containsVertex(source):FALSE:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):177:network.containsVertex(source) |==> true
1888:COR:network.containsVertex(sink):TRUE:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):181:network.containsVertex(sink) |==> false
1889:COR:network.containsVertex(sink):FALSE:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):181:network.containsVertex(sink) |==> true
1890:COR:source.equals(sink):TRUE:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):186:source.equals(sink) |==> false
1891:COR:source.equals(sink):FALSE:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):186:source.equals(sink) |==> true
1892:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):190:currentSource = indexer.get(source) |==> <NO-OP>
1893:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):191:currentSink = indexer.get(sink) |==> <NO-OP>
1894:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):193:0 |==> 1
1895:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):193:0 |==> -1
1896:ROR:<(int,int):!=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):193:i < numNodes |==> i != numNodes
1897:ROR:<(int,int):<=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):193:i < numNodes |==> i <= numNodes
1898:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):193:i < numNodes |==> false
1899:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):195:0.0 |==> 1.0
1900:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):195:0.0 |==> -1.0
1901:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):195:currentArc.flow = 0.0 |==> <NO-OP>
1902:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):198:0.0 |==> 1.0
1903:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):198:0.0 |==> -1.0
1904:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):198:maximumFlowValue = 0.0 |==> <NO-OP>
1905:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):200:breadthFirstSearch() |==> <NO-OP>
1906:COR:nodes.get(currentSink).visited:TRUE:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):201:nodes.get(currentSink).visited |==> false
1907:COR:nodes.get(currentSink).visited:FALSE:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):201:nodes.get(currentSink).visited |==> true
1908:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):202:maximumFlow = new HashMap<E, Double>() |==> <NO-OP>
1909:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):203:0 |==> 1
1910:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):203:0 |==> -1
1911:ROR:<(int,int):!=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):203:i < numNodes |==> i != numNodes
1912:ROR:<(int,int):<=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):203:i < numNodes |==> i <= numNodes
1913:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):203:i < numNodes |==> false
1914:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):205:currentArc.prototype != null |==> true
1915:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):206:maximumFlow.put(currentArc.prototype, currentArc.flow) |==> <NO-OP>
1916:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):212:return; |==> <NO-OP>
1917:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@calculateMaximumFlow(V,V):214:augmentFlow() |==> <NO-OP>
1918:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():220:0 |==> 1
1919:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():220:0 |==> -1
1920:ROR:<(int,int):!=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():220:i < numNodes |==> i != numNodes
1921:ROR:<(int,int):<=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():220:i < numNodes |==> i <= numNodes
1922:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():220:i < numNodes |==> false
1923:LVR:FALSE:TRUE:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():221:false |==> true
1924:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():221:nodes.get(i).visited = false |==> <NO-OP>
1925:EVR:<NEW_CLASS(java.util.LinkedList<java.lang.Integer>)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():223:new LinkedList<Integer>() |==> null
1926:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():224:queue.offer(currentSource) |==> <NO-OP>
1927:LVR:TRUE:FALSE:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():225:true |==> false
1928:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():225:nodes.get(currentSource).visited = true |==> <NO-OP>
1929:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():226:nodes.get(currentSource).flowAmount = Double.POSITIVE_INFINITY |==> <NO-OP>
1930:LVR:0:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():227:0 |==> 1
1931:LVR:0:NEG:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():227:0 |==> -1
1932:ROR:!=(int,int):<(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():227:queue.size() != 0 |==> queue.size() < 0
1933:ROR:!=(int,int):>(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():227:queue.size() != 0 |==> queue.size() > 0
1934:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():227:queue.size() != 0 |==> true
1935:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():228:queue.poll() |==> null
1936:AOR:+(double,double):%(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():230:currentArc.flow + epsilon |==> currentArc.flow % epsilon
1937:AOR:+(double,double):*(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():230:currentArc.flow + epsilon |==> currentArc.flow * epsilon
1938:AOR:+(double,double):-(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():230:currentArc.flow + epsilon |==> currentArc.flow - epsilon
1939:AOR:+(double,double):/(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():230:currentArc.flow + epsilon |==> currentArc.flow / epsilon
1940:ROR:<(double,double):!=(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():230:(currentArc.flow + epsilon) < currentArc.capacity |==> (currentArc.flow + epsilon) != currentArc.capacity
1941:ROR:<(double,double):<=(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():230:(currentArc.flow + epsilon) < currentArc.capacity |==> (currentArc.flow + epsilon) <= currentArc.capacity
1942:ROR:<(double,double):FALSE(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():230:(currentArc.flow + epsilon) < currentArc.capacity |==> false
1943:COR:nodes.get(currentArc.head).visited:TRUE:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():231:nodes.get(currentArc.head).visited |==> false
1944:COR:nodes.get(currentArc.head).visited:FALSE:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():231:nodes.get(currentArc.head).visited |==> true
1945:LVR:TRUE:FALSE:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():232:true |==> false
1946:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():232:nodes.get(currentArc.head).visited = true |==> <NO-OP>
1947:AOR:-(double,double):%(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():236:currentArc.capacity - currentArc.flow |==> currentArc.capacity % currentArc.flow
1948:AOR:-(double,double):*(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():236:currentArc.capacity - currentArc.flow |==> currentArc.capacity * currentArc.flow
1949:AOR:-(double,double):+(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():236:currentArc.capacity - currentArc.flow |==> currentArc.capacity + currentArc.flow
1950:AOR:-(double,double):/(double,double):org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():236:currentArc.capacity - currentArc.flow |==> currentArc.capacity / currentArc.flow
1951:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():233:nodes.get(currentArc.head).flowAmount = Math.min(nodes.get(currentNode).flowAmount, currentArc.capacity - currentArc.flow) |==> <NO-OP>
1952:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():237:nodes.get(currentArc.head).lastArc = currentArc |==> <NO-OP>
1953:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@breadthFirstSearch():238:queue.add(currentArc.head) |==> <NO-OP>
1954:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@augmentFlow():247:nodes.get(currentSink).flowAmount |==> 0.0
1955:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@augmentFlow():248:maximumFlowValue += deltaFlow |==> <NO-OP>
1956:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@augmentFlow():249:currentSink |==> 0
1957:ROR:!=(int,int):<(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@augmentFlow():250:currentNode != currentSource |==> currentNode < currentSource
1958:ROR:!=(int,int):>(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@augmentFlow():250:currentNode != currentSource |==> currentNode > currentSource
1959:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@augmentFlow():250:currentNode != currentSource |==> true
1960:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@augmentFlow():251:nodes.get(currentNode).lastArc.flow += deltaFlow |==> <NO-OP>
1961:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@augmentFlow():252:nodes.get(currentNode).lastArc.reversed.flow -= deltaFlow |==> <NO-OP>
1962:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@augmentFlow():253:currentNode = nodes.get(currentNode).lastArc.tail |==> <NO-OP>
1963:EVR:<IDENTIFIER(java.lang.Double)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@getMaximumFlowValue():266:maximumFlowValue |==> null
1964:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.EdmondsKarpMaximumFlow@getMaximumFlow():278:maximumFlow == null |==> false
1965:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@getMaximumFlow():279:return null; |==> <NO-OP>
1966:EVR:<METHOD_INVOCATION(java.util.Map<E,java.lang.Double>)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@getMaximumFlow():281:Collections.unmodifiableMap(maximumFlow) |==> null
1967:LVR:NEG:0:org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSource():292:-1 |==> 0
1968:LVR:NEG:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSource():292:-1 |==> 1
1969:ROR:==(int,int):<=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSource():292:currentSource == -1 |==> currentSource <= -1
1970:ROR:==(int,int):>=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSource():292:currentSource == -1 |==> currentSource >= -1
1971:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSource():292:currentSource == -1 |==> false
1972:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSource():293:return null; |==> <NO-OP>
1973:EVR:<MEMBER_SELECT(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSource():295:nodes.get(currentSource).prototype |==> null
1974:LVR:NEG:0:org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSink():306:-1 |==> 0
1975:LVR:NEG:POS:org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSink():306:-1 |==> 1
1976:ROR:==(int,int):<=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSink():306:currentSink == -1 |==> currentSink <= -1
1977:ROR:==(int,int):>=(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSink():306:currentSink == -1 |==> currentSink >= -1
1978:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSink():306:currentSink == -1 |==> false
1979:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSink():307:return null; |==> <NO-OP>
1980:EVR:<MEMBER_SELECT(V)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow@getCurrentSink():309:nodes.get(currentSink).prototype |==> null
1981:EVR:<NEW_CLASS(java.util.ArrayList<org.jgrapht.alg.EdmondsKarpMaximumFlow<V,E>.Arc>)>:<DEFAULT>:org.jgrapht.alg.EdmondsKarpMaximumFlow$Node:318:new ArrayList<Arc>() |==> null
1982:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow$Node@<init>(V):328:this.prototype = prototype |==> <NO-OP>
1983:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow$Arc@<init>(int,int,double,E):350:this.tail = tail |==> <NO-OP>
1984:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow$Arc@<init>(int,int,double,E):351:this.head = head |==> <NO-OP>
1985:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow$Arc@<init>(int,int,double,E):352:this.capacity = capacity |==> <NO-OP>
1986:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EdmondsKarpMaximumFlow$Arc@<init>(int,int,double,E):353:this.prototype = prototype |==> <NO-OP>
1987:COR:(new ConnectivityInspector<V, E>(g)).isGraphConnected():TRUE:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):69:(new ConnectivityInspector<V, E>(g)).isGraphConnected() |==> false
1988:COR:(new ConnectivityInspector<V, E>(g)).isGraphConnected():FALSE:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):69:(new ConnectivityInspector<V, E>(g)).isGraphConnected() |==> true
1989:LVR:FALSE:TRUE:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):70:false |==> true
1990:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):70:return Config.__M_NO == 0 && Config.COVERED(1989, 1989) ? false : Config.__M_NO == 1989 ? true : false; |==> <NO-OP>
1991:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):75:g.vertexSet().iterator() |==> null
1992:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):77:iter.next() |==> null
1993:LVR:POS:0:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:2 |==> 0
1994:LVR:POS:NEG:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:2 |==> -2
1995:AOR:%(int,int):*(int,int):org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:g.degreeOf(v) % 2 |==> g.degreeOf(v) * 2
1996:AOR:%(int,int):+(int,int):org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:g.degreeOf(v) % 2 |==> g.degreeOf(v) + 2
1997:AOR:%(int,int):-(int,int):org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:g.degreeOf(v) % 2 |==> g.degreeOf(v) - 2
1998:AOR:%(int,int):/(int,int):org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:g.degreeOf(v) % 2 |==> g.degreeOf(v) / 2
1999:LVR:POS:0:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:1 |==> 0
2000:LVR:POS:NEG:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:1 |==> -1
2001:ROR:==(int,int):<=(int,int):org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:(g.degreeOf(v) % 2) == 1 |==> (g.degreeOf(v) % 2) <= 1
2002:ROR:==(int,int):>=(int,int):org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:(g.degreeOf(v) % 2) == 1 |==> (g.degreeOf(v) % 2) >= 1
2003:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):78:(g.degreeOf(v) % 2) == 1 |==> false
2004:LVR:FALSE:TRUE:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):79:false |==> true
2005:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):79:return Config.__M_NO == 0 && Config.COVERED(2004, 2004) ? false : Config.__M_NO == 2004 ? true : false; |==> <NO-OP>
2006:LVR:TRUE:FALSE:org.jgrapht.alg.EulerianCircuit@isEulerian(org.jgrapht.UndirectedGraph<V,E>):82:true |==> false
2007:COR:isEulerian(g):TRUE:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):99:isEulerian(g) |==> false
2008:COR:isEulerian(g):FALSE:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):99:isEulerian(g) |==> true
2009:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):100:return null; |==> <NO-OP>
2010:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):104:new LinkedList<V>() |==> null
2011:EVR:<NEW_CLASS(org.jgrapht.graph.UndirectedSubgraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):105:new UndirectedSubgraph<V, E>(g, null, null) |==> null
2012:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):106:path.add(sg.vertexSet().iterator().next()) |==> <NO-OP>
2013:LVR:0:POS:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):111:0 |==> 1
2014:LVR:0:NEG:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):111:0 |==> -1
2015:ROR:>(int,int):!=(int,int):org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):111:sg.edgeSet().size() > 0 |==> sg.edgeSet().size() != 0
2016:ROR:>(int,int):>=(int,int):org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):111:sg.edgeSet().size() > 0 |==> sg.edgeSet().size() >= 0
2017:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):111:sg.edgeSet().size() > 0 |==> false
2018:LVR:0:POS:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):116:0 |==> 1
2019:LVR:0:NEG:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):116:0 |==> -1
2020:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):117:path.iterator() |==> null
2021:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):118:v = iter.next() |==> <NO-OP>
2022:LVR:0:POS:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):119:0 |==> 1
2023:LVR:0:NEG:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):119:0 |==> -1
2024:ROR:>(int,int):!=(int,int):org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):119:sg.degreeOf(v) > 0 |==> sg.degreeOf(v) != 0
2025:ROR:>(int,int):>=(int,int):org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):119:sg.degreeOf(v) > 0 |==> sg.degreeOf(v) >= 0
2026:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):119:sg.degreeOf(v) > 0 |==> false
2027:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):120:break; |==> <NO-OP>
2028:LVR:0:POS:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):126:0 |==> 1
2029:LVR:0:NEG:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):126:0 |==> -1
2030:ROR:>(int,int):!=(int,int):org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):126:sg.degreeOf(v) > 0 |==> sg.degreeOf(v) != 0
2031:ROR:>(int,int):>=(int,int):org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):126:sg.degreeOf(v) > 0 |==> sg.degreeOf(v) >= 0
2032:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):126:sg.degreeOf(v) > 0 |==> false
2033:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):128:sg.vertexSet().iterator() |==> null
2034:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):131:iter.next() |==> null
2035:COR:sg.containsEdge(v, temp):TRUE:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):132:sg.containsEdge(v, temp) |==> false
2036:COR:sg.containsEdge(v, temp):FALSE:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):132:sg.containsEdge(v, temp) |==> true
2037:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):133:path.add(index, temp) |==> <NO-OP>
2038:STD:<CALL>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):134:sg.removeEdge(v, temp) |==> <NO-OP>
2039:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):135:v = temp |==> <NO-OP>
2040:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):136:break; |==> <NO-OP>
2041:EVR:<IDENTIFIER(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.EulerianCircuit@getEulerianCircuitVertices(org.jgrapht.UndirectedGraph<V,E>):141:path |==> null
2042:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths:61:0 |==> 1
2043:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths:61:0 |==> -1
2044:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths:62:Double.NaN |==> 0.0
2045:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@<init>(org.jgrapht.Graph<V,E>):71:this.graph = graph |==> <NO-OP>
2046:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@<init>(org.jgrapht.Graph<V,E>):72:this.vertices = new ArrayList<V>(graph.vertexSet()) |==> <NO-OP>
2047:EVR:<IDENTIFIER(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getGraph():82:graph |==> null
2048:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathsCount():90:lazyCalculatePaths() |==> <NO-OP>
2049:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathsCount():91:nShortestPaths |==> 0
2050:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():100:d != null |==> true
2051:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():102:return; |==> <NO-OP>
2052:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():105:vertices.size() |==> 0
2053:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():108:backtrace = new int[n][n] |==> <NO-OP>
2054:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():109:0 |==> 1
2055:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():109:0 |==> -1
2056:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():109:i < n |==> i != n
2057:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():109:i < n |==> i <= n
2058:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():109:i < n |==> false
2059:LVR:NEG:0:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():110:-1 |==> 0
2060:LVR:NEG:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():110:-1 |==> 1
2061:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():110:Arrays.fill(backtrace[i], -1) |==> <NO-OP>
2062:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():114:d = new double[n][n] |==> <NO-OP>
2063:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():115:0 |==> 1
2064:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():115:0 |==> -1
2065:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():115:i < n |==> i != n
2066:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():115:i < n |==> i <= n
2067:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():115:i < n |==> false
2068:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():116:Arrays.fill(d[i], Double.POSITIVE_INFINITY) |==> <NO-OP>
2069:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():120:0 |==> 1
2070:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():120:0 |==> -1
2071:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():120:i < n |==> i != n
2072:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():120:i < n |==> i <= n
2073:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():120:i < n |==> false
2074:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():121:0.0 |==> 1.0
2075:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():121:0.0 |==> -1.0
2076:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():121:d[i][i] = 0.0 |==> <NO-OP>
2077:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():125:graph.edgeSet() |==> null
2078:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():127:graph.getEdgeSource(edge) |==> null
2079:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():128:graph.getEdgeTarget(edge) |==> null
2080:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():130:vertices.indexOf(v1) |==> 0
2081:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():131:vertices.indexOf(v2) |==> 0
2082:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():133:d[v_1][v_2] = graph.getEdgeWeight(edge) |==> <NO-OP>
2083:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():135:d[v_2][v_1] = graph.getEdgeWeight(edge) |==> <NO-OP>
2084:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():140:0 |==> 1
2085:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():140:0 |==> -1
2086:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():140:k < n |==> k != n
2087:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():140:k < n |==> k <= n
2088:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():140:k < n |==> false
2089:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():141:0 |==> 1
2090:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():141:0 |==> -1
2091:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():141:i < n |==> i != n
2092:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():141:i < n |==> i <= n
2093:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():141:i < n |==> false
2094:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():142:0 |==> 1
2095:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():142:0 |==> -1
2096:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():142:j < n |==> j != n
2097:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():142:j < n |==> j <= n
2098:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():142:j < n |==> false
2099:AOR:+(double,double):%(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():143:d[i][k] + d[k][j] |==> d[i][k] % d[k][j]
2100:AOR:+(double,double):*(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():143:d[i][k] + d[k][j] |==> d[i][k] * d[k][j]
2101:AOR:+(double,double):-(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():143:d[i][k] + d[k][j] |==> d[i][k] - d[k][j]
2102:AOR:+(double,double):/(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():143:d[i][k] + d[k][j] |==> d[i][k] / d[k][j]
2103:ROR:<(double,double):!=(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():144:ik_kj < d[i][j] |==> ik_kj != d[i][j]
2104:ROR:<(double,double):<=(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():144:ik_kj < d[i][j] |==> ik_kj <= d[i][j]
2105:ROR:<(double,double):FALSE(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():144:ik_kj < d[i][j] |==> false
2106:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():145:d[i][j] = ik_kj |==> <NO-OP>
2107:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculateMatrix():146:backtrace[i][j] = k |==> <NO-OP>
2108:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@shortestDistance(V,V):163:lazyCalculateMatrix() |==> <NO-OP>
2109:EVR:<ARRAY_ACCESS(double)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@shortestDistance(V,V):165:d[vertices.indexOf(a)][vertices.indexOf(b)] |==> 0.0
2110:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():174:lazyCalculateMatrix() |==> <NO-OP>
2111:COR:Double.isNaN(diameter):TRUE:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():176:Double.isNaN(diameter) |==> false
2112:COR:Double.isNaN(diameter):FALSE:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():176:Double.isNaN(diameter) |==> true
2113:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():177:0.0 |==> 1.0
2114:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():177:0.0 |==> -1.0
2115:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():177:diameter = 0.0 |==> <NO-OP>
2116:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():178:vertices.size() |==> 0
2117:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():179:0 |==> 1
2118:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():179:0 |==> -1
2119:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():179:i < n |==> i != n
2120:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():179:i < n |==> i <= n
2121:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():179:i < n |==> false
2122:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():180:0 |==> 1
2123:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():180:0 |==> -1
2124:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():180:j < n |==> j != n
2125:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():180:j < n |==> j <= n
2126:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():180:j < n |==> false
2127:ROR:>(double,double):!=(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():181:d[i][j] > diameter |==> d[i][j] != diameter
2128:ROR:>(double,double):>=(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():181:d[i][j] > diameter |==> d[i][j] >= diameter
2129:ROR:>(double,double):FALSE(double,double):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():181:d[i][j] > diameter |==> false
2130:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():181:!Double.isInfinite(d[i][j]) && (d[i][j] > diameter) |==> !Double.isInfinite(d[i][j]) == (d[i][j] > diameter)
2131:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():181:!Double.isInfinite(d[i][j]) && (d[i][j] > diameter) |==> false
2132:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():181:!Double.isInfinite(d[i][j]) && (d[i][j] > diameter) |==> !Double.isInfinite(d[i][j])
2133:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():181:!Double.isInfinite(d[i][j]) && (d[i][j] > diameter) |==> (d[i][j] > diameter)
2134:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():182:diameter = d[i][j] |==> <NO-OP>
2135:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getDiameter():187:diameter |==> 0.0
2136:EVR:<ARRAY_ACCESS(int)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):192:backtrace[v_a][v_b] |==> 0
2137:LVR:NEG:0:org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):193:-1 |==> 0
2138:LVR:NEG:POS:org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):193:-1 |==> 1
2139:ROR:==(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):193:k == -1 |==> k <= -1
2140:ROR:==(int,int):>=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):193:k == -1 |==> k >= -1
2141:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):193:k == -1 |==> false
2142:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):194:graph.getEdge(vertices.get(v_a), vertices.get(v_b)) |==> null
2143:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):195:edge != null |==> true
2144:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):196:edges.add(edge) |==> <NO-OP>
2145:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):199:shortestPathRecur(edges, v_a, k) |==> <NO-OP>
2146:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@shortestPathRecur(java.util.List<E>,int,int):200:shortestPathRecur(edges, k, v_b) |==> <NO-OP>
2147:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPath(V,V):216:lazyCalculatePaths() |==> <NO-OP>
2148:EVR:<METHOD_INVOCATION(org.jgrapht.GraphPath<V,E>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPath(V,V):217:getShortestPathImpl(a, b) |==> null
2149:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):222:vertices.indexOf(a) |==> 0
2150:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):223:vertices.indexOf(b) |==> 0
2151:EVR:<NEW_CLASS(java.util.ArrayList<E>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):225:new ArrayList<E>() |==> null
2152:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):226:shortestPathRecur(edges, v_a, v_b) |==> <NO-OP>
2153:LVR:POS:0:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):229:1 |==> 0
2154:LVR:POS:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):229:1 |==> -1
2155:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):229:edges.size() < 1 |==> edges.size() != 1
2156:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):229:edges.size() < 1 |==> edges.size() <= 1
2157:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):229:edges.size() < 1 |==> false
2158:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):230:return null; |==> <NO-OP>
2159:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):233:0.0 |==> 1.0
2160:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):233:0.0 |==> -1.0
2161:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):235:weight += graph.getEdgeWeight(e) |==> <NO-OP>
2162:EVR:<NEW_CLASS(org.jgrapht.graph.GraphPathImpl<V,E>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):239:new GraphPathImpl<V, E>(graph, a, b, edges, weight) |==> null
2163:EVR:<IDENTIFIER(org.jgrapht.graph.GraphPathImpl<V,E>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPathImpl(V,V):241:path |==> null
2164:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():250:paths != null |==> true
2165:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():251:return; |==> <NO-OP>
2166:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():254:lazyCalculateMatrix() |==> <NO-OP>
2167:EVR:<NEW_CLASS(java.util.HashMap<org.jgrapht.util.VertexPair<V>,org.jgrapht.GraphPath<V,E>>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():257:new HashMap<VertexPair<V>, GraphPath<V, E>>() |==> null
2168:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():258:vertices.size() |==> 0
2169:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():260:0 |==> 1
2170:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():260:0 |==> -1
2171:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():260:nShortestPaths = 0 |==> <NO-OP>
2172:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():261:0 |==> 1
2173:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():261:0 |==> -1
2174:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():261:i < n |==> i != n
2175:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():261:i < n |==> i <= n
2176:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():261:i < n |==> false
2177:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():262:vertices.get(i) |==> null
2178:LVR:0:POS:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():263:0 |==> 1
2179:LVR:0:NEG:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():263:0 |==> -1
2180:ROR:<(int,int):!=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():263:j < n |==> j != n
2181:ROR:<(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():263:j < n |==> j <= n
2182:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():263:j < n |==> false
2183:ROR:==(int,int):<=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():265:i == j |==> i <= j
2184:ROR:==(int,int):>=(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():265:i == j |==> i >= j
2185:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():265:i == j |==> false
2186:STD:<CONT>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():266:continue; |==> <NO-OP>
2187:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():269:vertices.get(j) |==> null
2188:EVR:<METHOD_INVOCATION(org.jgrapht.GraphPath<V,E>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():271:getShortestPathImpl(v_i, v_j) |==> null
2189:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():274:path != null |==> true
2190:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():275:sps.put(new VertexPair<V>(v_i, v_j), path) |==> <NO-OP>
2191:STD:<INC>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():276:nShortestPaths++ |==> <NO-OP>
2192:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@lazyCalculatePaths():281:this.paths = sps |==> <NO-OP>
2193:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPaths(V):293:lazyCalculatePaths() |==> <NO-OP>
2194:EVR:<NEW_CLASS(java.util.ArrayList<org.jgrapht.GraphPath<V,E>>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPaths(V):294:new ArrayList<GraphPath<V, E>>() |==> null
2195:COR:pair.getFirst().equals(v):TRUE:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPaths(V):299:pair.getFirst().equals(v) |==> false
2196:COR:pair.getFirst().equals(v):FALSE:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPaths(V):299:pair.getFirst().equals(v) |==> true
2197:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPaths(V):300:found.add(paths.get(pair)) |==> <NO-OP>
2198:EVR:<IDENTIFIER(java.util.List<org.jgrapht.GraphPath<V,E>>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPaths(V):304:found |==> null
2199:STD:<CALL>:<NO-OP>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPaths():314:lazyCalculatePaths() |==> <NO-OP>
2200:EVR:<METHOD_INVOCATION(java.util.Collection<org.jgrapht.GraphPath<V,E>>)>:<DEFAULT>:org.jgrapht.alg.FloydWarshallShortestPaths@getShortestPaths():315:paths.values() |==> null
2201:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.VertexPair@<init>(V,V):55:this.n1 = n1 |==> <NO-OP>
2202:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.VertexPair@<init>(V,V):56:this.n2 = n2 |==> <NO-OP>
2203:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.util.VertexPair@getFirst():63:n1 |==> null
2204:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.util.VertexPair@getSecond():68:n2 |==> null
2205:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.util.VertexPair@hasVertex(V):80:v.equals(n1) || v.equals(n2) |==> v.equals(n1) != v.equals(n2)
2206:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.util.VertexPair@hasVertex(V):80:v.equals(n1) || v.equals(n2) |==> v.equals(n1)
2207:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.util.VertexPair@hasVertex(V):80:v.equals(n1) || v.equals(n2) |==> v.equals(n2)
2208:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.util.VertexPair@hasVertex(V):80:v.equals(n1) || v.equals(n2) |==> true
2209:COR:one.equals(n1):TRUE:org.jgrapht.util.VertexPair@getOther(V):85:one.equals(n1) |==> false
2210:COR:one.equals(n1):FALSE:org.jgrapht.util.VertexPair@getOther(V):85:one.equals(n1) |==> true
2211:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.util.VertexPair@getOther(V):86:n2 |==> null
2212:COR:one.equals(n2):TRUE:org.jgrapht.util.VertexPair@getOther(V):87:one.equals(n2) |==> false
2213:COR:one.equals(n2):FALSE:org.jgrapht.util.VertexPair@getOther(V):87:one.equals(n2) |==> true
2214:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.util.VertexPair@getOther(V):88:n1 |==> null
2215:EVR:<PLUS(java.lang.String)>:<DEFAULT>:org.jgrapht.util.VertexPair@toString():96:n1 + "," + n2 |==> null
2216:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.util.VertexPair@equals(java.lang.Object):101:this == o |==> false
2217:LVR:TRUE:FALSE:org.jgrapht.util.VertexPair@equals(java.lang.Object):102:true |==> false
2218:STD:<RETURN>:<NO-OP>:org.jgrapht.util.VertexPair@equals(java.lang.Object):102:return Config.__M_NO == 0 && Config.COVERED(2217, 2217) ? true : Config.__M_NO == 2217 ? false : true; |==> <NO-OP>
2219:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.util.VertexPair@equals(java.lang.Object):104:o == null |==> false
2220:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.VertexPair@equals(java.lang.Object):104:getClass() != o.getClass() |==> true
2221:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.util.VertexPair@equals(java.lang.Object):104:(o == null) || (getClass() != o.getClass()) |==> (o == null) != (getClass() != o.getClass())
2222:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.util.VertexPair@equals(java.lang.Object):104:(o == null) || (getClass() != o.getClass()) |==> (o == null)
2223:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.util.VertexPair@equals(java.lang.Object):104:(o == null) || (getClass() != o.getClass()) |==> (getClass() != o.getClass())
2224:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.util.VertexPair@equals(java.lang.Object):104:(o == null) || (getClass() != o.getClass()) |==> true
2225:LVR:FALSE:TRUE:org.jgrapht.util.VertexPair@equals(java.lang.Object):105:false |==> true
2226:STD:<RETURN>:<NO-OP>:org.jgrapht.util.VertexPair@equals(java.lang.Object):105:return Config.__M_NO == 0 && Config.COVERED(2225, 2225) ? false : Config.__M_NO == 2225 ? true : false; |==> <NO-OP>
2227:EVR:<TYPE_CAST(org.jgrapht.util.VertexPair<V>)>:<DEFAULT>:org.jgrapht.util.VertexPair@equals(java.lang.Object):109:(VertexPair<V>)o |==> null
2228:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.VertexPair@equals(java.lang.Object):111:n1 != null |==> true
2229:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.VertexPair@equals(java.lang.Object):111:that.n1 != null |==> true
2230:LVR:FALSE:TRUE:org.jgrapht.util.VertexPair@equals(java.lang.Object):112:false |==> true
2231:STD:<RETURN>:<NO-OP>:org.jgrapht.util.VertexPair@equals(java.lang.Object):112:return Config.__M_NO == 0 && Config.COVERED(2230, 2230) ? false : Config.__M_NO == 2230 ? true : false; |==> <NO-OP>
2232:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.VertexPair@equals(java.lang.Object):114:n2 != null |==> true
2233:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.VertexPair@equals(java.lang.Object):114:that.n2 != null |==> true
2234:LVR:FALSE:TRUE:org.jgrapht.util.VertexPair@equals(java.lang.Object):115:false |==> true
2235:STD:<RETURN>:<NO-OP>:org.jgrapht.util.VertexPair@equals(java.lang.Object):115:return Config.__M_NO == 0 && Config.COVERED(2234, 2234) ? false : Config.__M_NO == 2234 ? true : false; |==> <NO-OP>
2236:LVR:TRUE:FALSE:org.jgrapht.util.VertexPair@equals(java.lang.Object):118:true |==> false
2237:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.VertexPair@hashCode():123:n1 != null |==> true
2238:LVR:0:POS:org.jgrapht.util.VertexPair@hashCode():123:0 |==> 1
2239:LVR:0:NEG:org.jgrapht.util.VertexPair@hashCode():123:0 |==> -1
2240:LVR:POS:0:org.jgrapht.util.VertexPair@hashCode():124:31 |==> 0
2241:LVR:POS:NEG:org.jgrapht.util.VertexPair@hashCode():124:31 |==> -31
2242:AOR:*(int,int):%(int,int):org.jgrapht.util.VertexPair@hashCode():124:31 * result |==> 31 % result
2243:AOR:*(int,int):+(int,int):org.jgrapht.util.VertexPair@hashCode():124:31 * result |==> 31 + result
2244:AOR:*(int,int):-(int,int):org.jgrapht.util.VertexPair@hashCode():124:31 * result |==> 31 - result
2245:AOR:*(int,int):/(int,int):org.jgrapht.util.VertexPair@hashCode():124:31 * result |==> 31 / result
2246:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.util.VertexPair@hashCode():124:n2 != null |==> true
2247:LVR:0:POS:org.jgrapht.util.VertexPair@hashCode():124:0 |==> 1
2248:LVR:0:NEG:org.jgrapht.util.VertexPair@hashCode():124:0 |==> -1
2249:AOR:+(int,int):%(int,int):org.jgrapht.util.VertexPair@hashCode():124:(31 * result) + ((n2 != null) ? n2.hashCode() : 0) |==> (31 * result) % ((n2 != null) ? n2.hashCode() : 0)
2250:AOR:+(int,int):*(int,int):org.jgrapht.util.VertexPair@hashCode():124:(31 * result) + ((n2 != null) ? n2.hashCode() : 0) |==> (31 * result) * ((n2 != null) ? n2.hashCode() : 0)
2251:AOR:+(int,int):-(int,int):org.jgrapht.util.VertexPair@hashCode():124:(31 * result) + ((n2 != null) ? n2.hashCode() : 0) |==> (31 * result) - ((n2 != null) ? n2.hashCode() : 0)
2252:AOR:+(int,int):/(int,int):org.jgrapht.util.VertexPair@hashCode():124:(31 * result) + ((n2 != null) ? n2.hashCode() : 0) |==> (31 * result) / ((n2 != null) ? n2.hashCode() : 0)
2253:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.VertexPair@hashCode():124:result = (31 * result) + ((n2 != null) ? n2.hashCode() : 0) |==> <NO-OP>
2254:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.util.VertexPair@hashCode():125:result |==> 0
2255:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):75:new LinkedList<V>(g.vertexSet()) |==> null
2256:LVR:POS:0:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:1 |==> 0
2257:LVR:POS:NEG:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:1 |==> -1
2258:AOR:-(int,int):%(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() - 1 |==> vertices.size() % 1
2259:AOR:-(int,int):*(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() - 1 |==> vertices.size() * 1
2260:AOR:-(int,int):+(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() - 1 |==> vertices.size() + 1
2261:AOR:-(int,int):/(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() - 1 |==> vertices.size() / 1
2262:AOR:*(int,int):%(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() * (vertices.size() - 1) |==> vertices.size() % (vertices.size() - 1)
2263:AOR:*(int,int):+(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() * (vertices.size() - 1) |==> vertices.size() + (vertices.size() - 1)
2264:AOR:*(int,int):-(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() * (vertices.size() - 1) |==> vertices.size() - (vertices.size() - 1)
2265:AOR:*(int,int):/(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() * (vertices.size() - 1) |==> vertices.size() / (vertices.size() - 1)
2266:LVR:POS:0:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:2 |==> 0
2267:LVR:POS:NEG:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:2 |==> -2
2268:AOR:/(int,int):%(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() * (vertices.size() - 1) / 2 |==> vertices.size() * (vertices.size() - 1) % 2
2269:AOR:/(int,int):*(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() * (vertices.size() - 1) / 2 |==> vertices.size() * (vertices.size() - 1) * 2
2270:AOR:/(int,int):+(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() * (vertices.size() - 1) / 2 |==> vertices.size() * (vertices.size() - 1) + 2
2271:AOR:/(int,int):-(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:vertices.size() * (vertices.size() - 1) / 2 |==> vertices.size() * (vertices.size() - 1) - 2
2272:ROR:!=(int,int):<(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:(vertices.size() * (vertices.size() - 1) / 2) != g.edgeSet().size() |==> (vertices.size() * (vertices.size() - 1) / 2) < g.edgeSet().size()
2273:ROR:!=(int,int):>(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):79:(vertices.size() * (vertices.size() - 1) / 2) != g.edgeSet().size() |==> (vertices.size() * (vertices.size() - 1) / 2) > g.edgeSet().size()
2274:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):80:(vertices.size() * (vertices.size() - 1) / 2) != g.edgeSet().size() |==> true
2275:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):82:return null; |==> <NO-OP>
2276:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):85:new LinkedList<V>() |==> null
2277:ROR:!=(int,int):<(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):89:tour.size() != g.vertexSet().size() |==> tour.size() < g.vertexSet().size()
2278:ROR:!=(int,int):>(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):89:tour.size() != g.vertexSet().size() |==> tour.size() > g.vertexSet().size()
2279:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):89:tour.size() != g.vertexSet().size() |==> true
2280:LVR:TRUE:FALSE:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):90:true |==> false
2281:LVR:0:POS:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):91:0 |==> 1
2282:LVR:0:NEG:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):91:0 |==> -1
2283:LVR:0:POS:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):92:0 |==> 1
2284:LVR:0:NEG:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):92:0 |==> -1
2285:LVR:0:POS:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):93:0 |==> 1
2286:LVR:0:NEG:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):93:0 |==> -1
2287:LVR:0:POS:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):97:0 |==> 1
2288:LVR:0:NEG:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):97:0 |==> -1
2289:ROR:<(int,int):!=(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):97:i < tour.size() |==> i != tour.size()
2290:ROR:<(int,int):<=(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):97:i < tour.size() |==> i <= tour.size()
2291:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):97:i < tour.size() |==> false
2292:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):98:tour.get(i) |==> null
2293:LVR:0:POS:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):99:0 |==> 1
2294:LVR:0:NEG:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):99:0 |==> -1
2295:ROR:<(int,int):!=(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):99:j < vertices.size() |==> j != vertices.size()
2296:ROR:<(int,int):<=(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):99:j < vertices.size() |==> j <= vertices.size()
2297:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):99:j < vertices.size() |==> false
2298:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):101:g.getEdgeWeight(g.getEdge(v, vertices.get(j))) |==> 0.0
2299:ROR:<(double,double):!=(double,double):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):102:weight < minEdgeValue |==> weight != minEdgeValue
2300:ROR:<(double,double):<=(double,double):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):102:weight < minEdgeValue |==> weight <= minEdgeValue
2301:ROR:<(double,double):FALSE(double,double):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):102:weight < minEdgeValue |==> false
2302:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):102:firstEdge || (weight < minEdgeValue) |==> firstEdge != (weight < minEdgeValue)
2303:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):102:firstEdge || (weight < minEdgeValue) |==> firstEdge
2304:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):102:firstEdge || (weight < minEdgeValue) |==> (weight < minEdgeValue)
2305:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):102:firstEdge || (weight < minEdgeValue) |==> true
2306:LVR:FALSE:TRUE:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):103:false |==> true
2307:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):103:firstEdge = false |==> <NO-OP>
2308:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):104:minEdgeValue = weight |==> <NO-OP>
2309:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):105:minVertexFound = j |==> <NO-OP>
2310:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):106:vertexConnectedTo = i |==> <NO-OP>
2311:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):110:tour.add(vertexConnectedTo, vertices.get(minVertexFound)) |==> <NO-OP>
2312:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):111:vertices.remove(minVertexFound) |==> <NO-OP>
2313:EVR:<IDENTIFIER(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.HamiltonianCycle@getApproximateOptimalForCompleteGraph(org.jgrapht.graph.SimpleWeightedGraph<V,E>):113:tour |==> null
2314:EVR:<IDENTIFIER(org.jgrapht.UndirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@<init>(org.jgrapht.UndirectedGraph<V,E>,java.util.Set<V>,java.util.Set<V>):79:graph |==> null
2315:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@<init>(org.jgrapht.UndirectedGraph<V,E>,java.util.Set<V>,java.util.Set<V>):80:partition1 |==> null
2316:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@<init>(org.jgrapht.UndirectedGraph<V,E>,java.util.Set<V>,java.util.Set<V>):81:partition2 |==> null
2317:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@<init>(org.jgrapht.UndirectedGraph<V,E>,java.util.Set<V>,java.util.Set<V>):82:matching = new HashSet<E>() |==> <NO-OP>
2318:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@<init>(org.jgrapht.UndirectedGraph<V,E>,java.util.Set<V>,java.util.Set<V>):84:new HashSet<V>(partition1) |==> null
2319:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@<init>(org.jgrapht.UndirectedGraph<V,E>,java.util.Set<V>,java.util.Set<V>):85:new HashSet<V>(partition2) |==> null
2320:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@<init>(org.jgrapht.UndirectedGraph<V,E>,java.util.Set<V>,java.util.Set<V>):88:this.maxMatching() |==> <NO-OP>
2321:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@checkInputData():105:new HashSet<V>() |==> null
2322:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@checkInputData():107:neighborsSet1.addAll(Graphs.neighborListOf(graph, v)) |==> <NO-OP>
2323:COR:interSectionNotEmpty(partition1, neighborsSet1):TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@checkInputData():109:interSectionNotEmpty(partition1, neighborsSet1) |==> false
2324:COR:interSectionNotEmpty(partition1, neighborsSet1):FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@checkInputData():109:interSectionNotEmpty(partition1, neighborsSet1) |==> true
2325:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@checkInputData():113:new HashSet<V>() |==> null
2326:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@checkInputData():115:neighborsSet2.addAll(Graphs.neighborListOf(graph, v)) |==> <NO-OP>
2327:COR:interSectionNotEmpty(partition2, neighborsSet2):TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@checkInputData():117:interSectionNotEmpty(partition2, neighborsSet2) |==> false
2328:COR:interSectionNotEmpty(partition2, neighborsSet2):FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@checkInputData():117:interSectionNotEmpty(partition2, neighborsSet2) |==> true
2329:LVR:TRUE:FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@checkInputData():121:true |==> false
2330:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@greedyMatch():131:new HashSet<V>() |==> null
2331:COR:usedVertices.contains(vertex2):TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@greedyMatch():135:usedVertices.contains(vertex2) |==> false
2332:COR:usedVertices.contains(vertex2):FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@greedyMatch():135:usedVertices.contains(vertex2) |==> true
2333:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@greedyMatch():136:usedVertices.add(vertex2) |==> <NO-OP>
2334:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@greedyMatch():137:unmatchedVertices1.remove(vertex1) |==> <NO-OP>
2335:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@greedyMatch():138:unmatchedVertices2.remove(vertex2) |==> <NO-OP>
2336:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@greedyMatch():139:matching.add(graph.getEdge(vertex1, vertex2)) |==> <NO-OP>
2337:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@greedyMatch():140:break; |==> <NO-OP>
2338:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@maxMatching():153:this.greedyMatch() |==> <NO-OP>
2339:EVR:<METHOD_INVOCATION(java.util.List<java.util.LinkedList<V>>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@maxMatching():155:this.getAugmentingPaths() |==> null
2340:EVR:<METHOD_INVOCATION(java.util.Iterator<java.util.LinkedList<V>>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@maxMatching():158:augmentingPaths.iterator() |==> null
2341:EVR:<METHOD_INVOCATION(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@maxMatching():161:it.next() |==> null
2342:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@maxMatching():162:unmatchedVertices1.remove(augmentingPath.getFirst()) |==> <NO-OP>
2343:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@maxMatching():163:unmatchedVertices2.remove(augmentingPath.getLast()) |==> <NO-OP>
2344:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@maxMatching():164:this.symmetricDifference(augmentingPath) |==> <NO-OP>
2345:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@maxMatching():165:it.remove() |==> <NO-OP>
2346:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@maxMatching():167:augmentingPaths.addAll(this.getAugmentingPaths()) |==> <NO-OP>
2347:LVR:0:POS:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):181:0 |==> 1
2348:LVR:0:NEG:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):181:0 |==> -1
2349:LVR:0:POS:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):186:0 |==> 1
2350:LVR:0:NEG:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):186:0 |==> -1
2351:ROR:>(int,int):!=(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):186:augmentingPath.size() > 0 |==> augmentingPath.size() != 0
2352:ROR:>(int,int):>=(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):186:augmentingPath.size() > 0 |==> augmentingPath.size() >= 0
2353:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):186:augmentingPath.size() > 0 |==> false
2354:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):188:graph.getEdge(augmentingPath.poll(), augmentingPath.peek()) |==> null
2355:LVR:POS:0:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:2 |==> 0
2356:LVR:POS:NEG:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:2 |==> -2
2357:AOR:%(int,int):*(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:operation % 2 |==> operation * 2
2358:AOR:%(int,int):+(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:operation % 2 |==> operation + 2
2359:AOR:%(int,int):-(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:operation % 2 |==> operation - 2
2360:AOR:%(int,int):/(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:operation % 2 |==> operation / 2
2361:LVR:0:POS:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:0 |==> 1
2362:LVR:0:NEG:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:0 |==> -1
2363:ROR:==(int,int):<=(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:(operation % 2) == 0 |==> (operation % 2) <= 0
2364:ROR:==(int,int):>=(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:(operation % 2) == 0 |==> (operation % 2) >= 0
2365:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):189:(operation % 2) == 0 |==> false
2366:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):190:matching.add(edge) |==> <NO-OP>
2367:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):192:matching.remove(edge) |==> <NO-OP>
2368:STD:<INC>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@symmetricDifference(java.util.LinkedList<V>):194:operation++ |==> <NO-OP>
2369:EVR:<NEW_CLASS(java.util.ArrayList<java.util.LinkedList<V>>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():200:new ArrayList<LinkedList<V>>() |==> null
2370:EVR:<NEW_CLASS(java.util.HashMap<V,java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():203:new HashMap<V, Set<V>>() |==> null
2371:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():205:layeredMap.put(vertex, new HashSet<V>()) |==> <NO-OP>
2372:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():208:new HashSet<V>(unmatchedVertices1) |==> null
2373:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():210:new HashSet<V>(unmatchedVertices1) |==> null
2374:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():216:new HashSet<V>() |==> null
2375:EVR:<METHOD_INVOCATION(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():219:Graphs.neighborListOf(graph, vertex) |==> null
2376:COR:usedVertices.contains(neighbor):TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():221:usedVertices.contains(neighbor) |==> false
2377:COR:usedVertices.contains(neighbor):FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():221:usedVertices.contains(neighbor) |==> true
2378:STD:<CONT>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():224:continue; |==> <NO-OP>
2379:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():226:evenLayer.add(neighbor) |==> <NO-OP>
2380:COR:layeredMap.containsKey(neighbor):TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():227:layeredMap.containsKey(neighbor) |==> false
2381:COR:layeredMap.containsKey(neighbor):FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():227:layeredMap.containsKey(neighbor) |==> true
2382:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():228:layeredMap.put(neighbor, new HashSet<V>()) |==> <NO-OP>
2383:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():230:layeredMap.get(neighbor).add(vertex) |==> <NO-OP>
2384:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():234:usedVertices.addAll(evenLayer) |==> <NO-OP>
2385:LVR:0:POS:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():239:0 |==> 1
2386:LVR:0:NEG:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():239:0 |==> -1
2387:ROR:==(int,int):<=(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():239:evenLayer.size() == 0 |==> evenLayer.size() <= 0
2388:ROR:==(int,int):>=(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():239:evenLayer.size() == 0 |==> evenLayer.size() >= 0
2389:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():239:evenLayer.size() == 0 |==> false
2390:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():239:(evenLayer.size() == 0) || this.interSectionNotEmpty(evenLayer, unmatchedVertices2) |==> (evenLayer.size() == 0) != this.interSectionNotEmpty(evenLayer, unmatchedVertices2)
2391:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():239:(evenLayer.size() == 0) || this.interSectionNotEmpty(evenLayer, unmatchedVertices2) |==> (evenLayer.size() == 0)
2392:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():240:(evenLayer.size() == 0) || this.interSectionNotEmpty(evenLayer, unmatchedVertices2) |==> this.interSectionNotEmpty(evenLayer, unmatchedVertices2)
2393:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():240:(evenLayer.size() == 0) || this.interSectionNotEmpty(evenLayer, unmatchedVertices2) |==> true
2394:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():242:break; |==> <NO-OP>
2395:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():248:oddLayer = new HashSet<V>() |==> <NO-OP>
2396:EVR:<METHOD_INVOCATION(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():250:Graphs.neighborListOf(graph, vertex) |==> null
2397:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():252:usedVertices.contains(neighbor) || !matching.contains(graph.getEdge(vertex, neighbor)) |==> usedVertices.contains(neighbor) != !matching.contains(graph.getEdge(vertex, neighbor))
2398:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():252:usedVertices.contains(neighbor) || !matching.contains(graph.getEdge(vertex, neighbor)) |==> usedVertices.contains(neighbor)
2399:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():253:usedVertices.contains(neighbor) || !matching.contains(graph.getEdge(vertex, neighbor)) |==> !matching.contains(graph.getEdge(vertex, neighbor))
2400:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():253:usedVertices.contains(neighbor) || !matching.contains(graph.getEdge(vertex, neighbor)) |==> true
2401:STD:<CONT>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():256:continue; |==> <NO-OP>
2402:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():258:oddLayer.add(neighbor) |==> <NO-OP>
2403:COR:layeredMap.containsKey(neighbor):TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():259:layeredMap.containsKey(neighbor) |==> false
2404:COR:layeredMap.containsKey(neighbor):FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():259:layeredMap.containsKey(neighbor) |==> true
2405:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():260:layeredMap.put(neighbor, new HashSet<V>()) |==> <NO-OP>
2406:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():262:layeredMap.get(neighbor).add(vertex) |==> <NO-OP>
2407:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():266:usedVertices.addAll(oddLayer) |==> <NO-OP>
2408:LVR:0:POS:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():273:0 |==> 1
2409:LVR:0:NEG:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():273:0 |==> -1
2410:ROR:==(int,int):<=(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():273:evenLayer.size() == 0 |==> evenLayer.size() <= 0
2411:ROR:==(int,int):>=(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():273:evenLayer.size() == 0 |==> evenLayer.size() >= 0
2412:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():273:evenLayer.size() == 0 |==> false
2413:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():274:return augmentingPaths; |==> <NO-OP>
2414:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():276:evenLayer.retainAll(unmatchedVertices2) |==> <NO-OP>
2415:EVR:<METHOD_INVOCATION(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():284:dfs(vertex, layeredMap) |==> null
2416:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():289:augmentingPath != null |==> true
2417:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():290:augmentingPaths.add(augmentingPath) |==> <NO-OP>
2418:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():292:layeredMap.remove(augmentingVertex) |==> <NO-OP>
2419:EVR:<IDENTIFIER(java.util.List<java.util.LinkedList<V>>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getAugmentingPaths():297:augmentingPaths |==> null
2420:COR:layeredMap.containsKey(startVertex):TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):302:layeredMap.containsKey(startVertex) |==> false
2421:COR:layeredMap.containsKey(startVertex):FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):302:layeredMap.containsKey(startVertex) |==> true
2422:COR:unmatchedVertices1.contains(startVertex):TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):304:unmatchedVertices1.contains(startVertex) |==> false
2423:COR:unmatchedVertices1.contains(startVertex):FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):304:unmatchedVertices1.contains(startVertex) |==> true
2424:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):305:new LinkedList<V>() |==> null
2425:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):306:list.add(startVertex) |==> <NO-OP>
2426:EVR:<IDENTIFIER(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):307:list |==> null
2427:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):311:partialPath = dfs(vertex, layeredMap) |==> <NO-OP>
2428:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):312:partialPath != null |==> true
2429:STD:<CALL>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):313:partialPath.add(startVertex) |==> <NO-OP>
2430:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):314:break; |==> <NO-OP>
2431:EVR:<IDENTIFIER(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@dfs(V,java.util.Map<V,java.util.Set<V>>):317:partialPath |==> null
2432:COR:vertexSet2.contains(vertex):TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@interSectionNotEmpty(java.util.Set<V>,java.util.Set<V>):332:vertexSet2.contains(vertex) |==> false
2433:COR:vertexSet2.contains(vertex):FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@interSectionNotEmpty(java.util.Set<V>,java.util.Set<V>):332:vertexSet2.contains(vertex) |==> true
2434:LVR:TRUE:FALSE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@interSectionNotEmpty(java.util.Set<V>,java.util.Set<V>):333:true |==> false
2435:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@interSectionNotEmpty(java.util.Set<V>,java.util.Set<V>):333:return Config.__M_NO == 0 && Config.COVERED(2434, 2434) ? true : Config.__M_NO == 2434 ? false : true; |==> <NO-OP>
2436:LVR:FALSE:TRUE:org.jgrapht.alg.HopcroftKarpBipartiteMatching@interSectionNotEmpty(java.util.Set<V>,java.util.Set<V>):336:false |==> true
2437:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.HopcroftKarpBipartiteMatching@getMatching():341:Collections.unmodifiableSet(matching) |==> null
2438:LVR:POS:0:org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int):86:1 |==> 0
2439:LVR:POS:NEG:org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int):86:1 |==> -1
2440:AOR:-(int,int):%(int,int):org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int):86:graph.vertexSet().size() - 1 |==> graph.vertexSet().size() % 1
2441:AOR:-(int,int):*(int,int):org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int):86:graph.vertexSet().size() - 1 |==> graph.vertexSet().size() * 1
2442:AOR:-(int,int):+(int,int):org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int):86:graph.vertexSet().size() - 1 |==> graph.vertexSet().size() + 1
2443:AOR:-(int,int):/(int,int):org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int):86:graph.vertexSet().size() - 1 |==> graph.vertexSet().size() / 1
2444:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int,int):110:assertKShortestPathsFinder(graph, startVertex, nPaths, nMaxHops) |==> <NO-OP>
2445:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int,int):112:this.graph = graph |==> <NO-OP>
2446:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int,int):113:this.startVertex = startVertex |==> <NO-OP>
2447:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int,int):114:this.nPaths = nPaths |==> <NO-OP>
2448:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPaths@<init>(org.jgrapht.Graph<V,E>,V,int,int):115:this.nMaxHops = nMaxHops |==> <NO-OP>
2449:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPaths@getPaths(V):130:assertGetPaths(endVertex) |==> <NO-OP>
2450:EVR:<NEW_CLASS(org.jgrapht.alg.KShortestPathsIterator<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths@getPaths(V):133:new KShortestPathsIterator<V, E>(this.graph, this.startVertex, endVertex, this.nPaths) |==> null
2451:LVR:POS:0:org.jgrapht.alg.KShortestPaths@getPaths(V):142:1 |==> 0
2452:LVR:POS:NEG:org.jgrapht.alg.KShortestPaths@getPaths(V):142:1 |==> -1
2453:ROR:<=(int,int):<(int,int):org.jgrapht.alg.KShortestPaths@getPaths(V):143:passNumber <= this.nMaxHops |==> passNumber < this.nMaxHops
2454:ROR:<=(int,int):==(int,int):org.jgrapht.alg.KShortestPaths@getPaths(V):143:passNumber <= this.nMaxHops |==> passNumber == this.nMaxHops
2455:ROR:<=(int,int):TRUE(int,int):org.jgrapht.alg.KShortestPaths@getPaths(V):143:passNumber <= this.nMaxHops |==> true
2456:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.KShortestPaths@getPaths(V):143:(passNumber <= this.nMaxHops) && iter.hasNext() |==> (passNumber <= this.nMaxHops) == iter.hasNext()
2457:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.KShortestPaths@getPaths(V):144:(passNumber <= this.nMaxHops) && iter.hasNext() |==> false
2458:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.KShortestPaths@getPaths(V):143:(passNumber <= this.nMaxHops) && iter.hasNext() |==> (passNumber <= this.nMaxHops)
2459:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.KShortestPaths@getPaths(V):144:(passNumber <= this.nMaxHops) && iter.hasNext() |==> iter.hasNext()
2460:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPaths@getPaths(V):147:iter.next() |==> <NO-OP>
2461:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths@getPaths(V):150:iter.getPathElements(endVertex) |==> null
2462:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.KShortestPaths@getPaths(V):152:list == null |==> false
2463:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.KShortestPaths@getPaths(V):153:return null; |==> <NO-OP>
2464:EVR:<NEW_CLASS(java.util.ArrayList<org.jgrapht.GraphPath<V,E>>)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths@getPaths(V):156:new ArrayList<GraphPath<V, E>>() |==> null
2465:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPaths@getPaths(V):159:pathList.add(new PathWrapper(element)) |==> <NO-OP>
2466:EVR:<IDENTIFIER(java.util.List<org.jgrapht.GraphPath<V,E>>)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths@getPaths(V):162:pathList |==> null
2467:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.KShortestPaths@assertGetPaths(V):167:endVertex == null |==> false
2468:COR:endVertex.equals(this.startVertex):TRUE:org.jgrapht.alg.KShortestPaths@assertGetPaths(V):170:endVertex.equals(this.startVertex) |==> false
2469:COR:endVertex.equals(this.startVertex):FALSE:org.jgrapht.alg.KShortestPaths@assertGetPaths(V):170:endVertex.equals(this.startVertex) |==> true
2470:COR:this.graph.vertexSet().contains(endVertex):TRUE:org.jgrapht.alg.KShortestPaths@assertGetPaths(V):174:this.graph.vertexSet().contains(endVertex) |==> false
2471:COR:this.graph.vertexSet().contains(endVertex):FALSE:org.jgrapht.alg.KShortestPaths@assertGetPaths(V):174:this.graph.vertexSet().contains(endVertex) |==> true
2472:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):186:graph == null |==> false
2473:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):189:startVertex == null |==> false
2474:LVR:0:POS:org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):192:0 |==> 1
2475:LVR:0:NEG:org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):192:0 |==> -1
2476:ROR:<=(int,int):<(int,int):org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):192:nPaths <= 0 |==> nPaths < 0
2477:ROR:<=(int,int):==(int,int):org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):192:nPaths <= 0 |==> nPaths == 0
2478:ROR:<=(int,int):TRUE(int,int):org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):192:nPaths <= 0 |==> true
2479:LVR:0:POS:org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):195:0 |==> 1
2480:LVR:0:NEG:org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):195:0 |==> -1
2481:ROR:<=(int,int):<(int,int):org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):195:nMaxHops <= 0 |==> nMaxHops < 0
2482:ROR:<=(int,int):==(int,int):org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):195:nMaxHops <= 0 |==> nMaxHops == 0
2483:ROR:<=(int,int):TRUE(int,int):org.jgrapht.alg.KShortestPaths@assertKShortestPathsFinder(org.jgrapht.Graph<V,E>,V,int,int):195:nMaxHops <= 0 |==> true
2484:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPaths$PathWrapper@<init>(org.jgrapht.alg.RankingPathElement<V,E>):211:this.rankingPathElement = rankingPathElement |==> <NO-OP>
2485:EVR:<IDENTIFIER(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths$PathWrapper@getGraph():217:graph |==> null
2486:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths$PathWrapper@getStartVertex():223:startVertex |==> null
2487:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths$PathWrapper@getEndVertex():229:rankingPathElement.getVertex() |==> null
2488:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.KShortestPaths$PathWrapper@getEdgeList():235:edgeList == null |==> false
2489:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPaths$PathWrapper@getEdgeList():236:edgeList = rankingPathElement.createEdgeListPath() |==> <NO-OP>
2490:EVR:<IDENTIFIER(java.util.List<E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths$PathWrapper@getEdgeList():238:edgeList |==> null
2491:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths$PathWrapper@getWeight():244:rankingPathElement.getWeight() |==> 0.0
2492:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.alg.KShortestPaths$PathWrapper@toString():250:getEdgeList().toString() |==> null
2493:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElement@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.alg.RankingPathElement<V,E>,E,double):75:this.weight = weight |==> <NO-OP>
2494:LVR:0:POS:org.jgrapht.alg.RankingPathElement@<init>(V):86:0 |==> 1
2495:LVR:0:NEG:org.jgrapht.alg.RankingPathElement@<init>(V):86:0 |==> -1
2496:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElement@<init>(V):86:this.weight = 0 |==> <NO-OP>
2497:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.RankingPathElement@getWeight():98:this.weight |==> 0.0
2498:EVR:<TYPE_CAST(org.jgrapht.alg.RankingPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElement@getPrevPathElement():108:(RankingPathElement<V, E>)super.getPrevPathElement() |==> null
2499:LVR:POS:0:org.jgrapht.alg.KShortestPathsIterator:100:1 |==> 0
2500:LVR:POS:NEG:org.jgrapht.alg.KShortestPathsIterator:100:1 |==> -1
2501:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@<init>(org.jgrapht.Graph<V,E>,V,V,int):116:assertKShortestPathsIterator(graph, startVertex) |==> <NO-OP>
2502:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@<init>(org.jgrapht.Graph<V,E>,V,V,int):118:this.graph = graph |==> <NO-OP>
2503:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@<init>(org.jgrapht.Graph<V,E>,V,V,int):119:this.startVertex = startVertex |==> <NO-OP>
2504:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@<init>(org.jgrapht.Graph<V,E>,V,V,int):120:this.endVertex = endVertex |==> <NO-OP>
2505:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@<init>(org.jgrapht.Graph<V,E>,V,V,int):122:this.k = maxSize |==> <NO-OP>
2506:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@<init>(org.jgrapht.Graph<V,E>,V,V,int):124:this.seenDataContainer = new HashMap<V, RankingPathElementList<V, E>>() |==> <NO-OP>
2507:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@<init>(org.jgrapht.Graph<V,E>,V,V,int):125:this.prevSeenDataContainer = new HashMap<V, RankingPathElementList<V, E>>() |==> <NO-OP>
2508:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@<init>(org.jgrapht.Graph<V,E>,V,V,int):128:this.prevImprovedVertices = new HashSet<V>() |==> <NO-OP>
2509:COR:this.startVertexEncountered:TRUE:org.jgrapht.alg.KShortestPathsIterator@hasNext():139:this.startVertexEncountered |==> false
2510:COR:this.startVertexEncountered:FALSE:org.jgrapht.alg.KShortestPathsIterator@hasNext():139:this.startVertexEncountered |==> true
2511:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@hasNext():140:encounterStartVertex() |==> <NO-OP>
2512:EVR:<LOGICAL_COMPLEMENT(boolean)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@hasNext():143:!(this.prevImprovedVertices.isEmpty()) |==> false
2513:COR:this.startVertexEncountered:TRUE:org.jgrapht.alg.KShortestPathsIterator@next():160:this.startVertexEncountered |==> false
2514:COR:this.startVertexEncountered:FALSE:org.jgrapht.alg.KShortestPathsIterator@next():160:this.startVertexEncountered |==> true
2515:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@next():161:encounterStartVertex() |==> <NO-OP>
2516:COR:hasNext():TRUE:org.jgrapht.alg.KShortestPathsIterator@next():165:hasNext() |==> false
2517:COR:hasNext():FALSE:org.jgrapht.alg.KShortestPathsIterator@next():165:hasNext() |==> true
2518:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@next():166:new HashSet<V>() |==> null
2519:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@next():169:this.prevImprovedVertices.iterator() |==> null
2520:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@next():172:iter.next() |==> null
2521:COR:vertex.equals(this.endVertex):TRUE:org.jgrapht.alg.KShortestPathsIterator@next():173:vertex.equals(this.endVertex) |==> false
2522:COR:vertex.equals(this.endVertex):FALSE:org.jgrapht.alg.KShortestPathsIterator@next():173:vertex.equals(this.endVertex) |==> true
2523:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@next():174:updateOutgoingVertices(vertex, improvedVertices) |==> <NO-OP>
2524:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@next():178:savePassData(improvedVertices) |==> <NO-OP>
2525:STD:<INC>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@next():179:this.passNumber++ |==> <NO-OP>
2526:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@next():181:return improvedVertices; |==> <NO-OP>
2527:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@getPathElements(V):207:this.seenDataContainer.get(endVertex) |==> null
2528:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.KShortestPathsIterator@assertKShortestPathsIterator(org.jgrapht.Graph<V,E>,V):212:graph == null |==> false
2529:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.KShortestPathsIterator@assertKShortestPathsIterator(org.jgrapht.Graph<V,E>,V):215:startVertex == null |==> false
2530:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@createSeenData(V,E):230:Graphs.getOppositeVertex(this.graph, edge, vertex) |==> null
2531:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@createSeenData(V,E):233:this.prevSeenDataContainer.get(oppositeVertex) |==> null
2532:EVR:<NEW_CLASS(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@createSeenData(V,E):238:new RankingPathElementList<V, E>(this.graph, this.k, oppositeData, edge, this.endVertex) |==> null
2533:EVR:<IDENTIFIER(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@createSeenData(V,E):245:data |==> null
2534:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@edgesOfIterator(V):260:((DirectedGraph<V, E>)this.graph).outgoingEdgesOf(vertex).iterator() |==> null
2535:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@edgesOfIterator(V):262:this.graph.edgesOf(vertex).iterator() |==> null
2536:EVR:<NEW_CLASS(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@encounterStartVertex():272:new RankingPathElementList<V, E>(this.graph, this.k, new RankingPathElement<V, E>(this.startVertex)) |==> null
2537:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@encounterStartVertex():278:this.seenDataContainer.put(this.startVertex, data) |==> <NO-OP>
2538:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@encounterStartVertex():279:this.prevSeenDataContainer.put(this.startVertex, data) |==> <NO-OP>
2539:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@encounterStartVertex():283:this.prevImprovedVertices.add(this.startVertex) |==> <NO-OP>
2540:LVR:TRUE:FALSE:org.jgrapht.alg.KShortestPathsIterator@encounterStartVertex():285:true |==> false
2541:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@encounterStartVertex():285:this.startVertexEncountered = true |==> <NO-OP>
2542:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):290:improvedVertices.iterator() |==> null
2543:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):291:iter.next() |==> null
2544:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):294:this.seenDataContainer.get(vertex) |==> null
2545:EVR:<NEW_CLASS(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):297:new RankingPathElementList<V, E>(this.graph, pathElementList.maxSize, vertex) |==> null
2546:EVR:<METHOD_INVOCATION(java.util.Iterator<org.jgrapht.alg.RankingPathElement<V,E>>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):304:pathElementList.iterator() |==> null
2547:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):307:pathIter.next() |==> null
2548:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):308:path.getHopCount() == this.passNumber |==> path.getHopCount() <= this.passNumber
2549:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):308:path.getHopCount() == this.passNumber |==> path.getHopCount() >= this.passNumber
2550:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):308:path.getHopCount() == this.passNumber |==> false
2551:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):310:improvedPaths.pathElements.add(path) |==> <NO-OP>
2552:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):314:this.prevSeenDataContainer.put(vertex, improvedPaths) |==> <NO-OP>
2553:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@savePassData(java.util.Set<V>):317:this.prevImprovedVertices = improvedVertices |==> <NO-OP>
2554:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@tryToAddFirstPaths(V,E):332:createSeenData(vertex, edge) |==> null
2555:COR:data.isEmpty():TRUE:org.jgrapht.alg.KShortestPathsIterator@tryToAddFirstPaths(V,E):334:data.isEmpty() |==> false
2556:COR:data.isEmpty():FALSE:org.jgrapht.alg.KShortestPathsIterator@tryToAddFirstPaths(V,E):334:data.isEmpty() |==> true
2557:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@tryToAddFirstPaths(V,E):335:this.seenDataContainer.put(vertex, data) |==> <NO-OP>
2558:LVR:TRUE:FALSE:org.jgrapht.alg.KShortestPathsIterator@tryToAddFirstPaths(V,E):336:true |==> false
2559:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@tryToAddFirstPaths(V,E):336:return Config.__M_NO == 0 && Config.COVERED(2558, 2558) ? true : Config.__M_NO == 2558 ? false : true; |==> <NO-OP>
2560:LVR:FALSE:TRUE:org.jgrapht.alg.KShortestPathsIterator@tryToAddFirstPaths(V,E):338:false |==> true
2561:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@tryToAddNewPaths(V,E):352:this.seenDataContainer.get(vertex) |==> null
2562:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@tryToAddNewPaths(V,E):354:Graphs.getOppositeVertex(this.graph, edge, vertex) |==> null
2563:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElementList<V,E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@tryToAddNewPaths(V,E):356:this.prevSeenDataContainer.get(oppositeVertex) |==> null
2564:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@tryToAddNewPaths(V,E):358:data.addPathElements(oppositeData, edge) |==> false
2565:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):385:edgesOfIterator(vertex) |==> null
2566:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):386:iter.next() |==> null
2567:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):388:Graphs.getOppositeVertex(this.graph, edge, vertex) |==> null
2568:COR:vertexReachedByEdge.equals(this.startVertex):TRUE:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):392:vertexReachedByEdge.equals(this.startVertex) |==> false
2569:COR:vertexReachedByEdge.equals(this.startVertex):FALSE:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):392:vertexReachedByEdge.equals(this.startVertex) |==> true
2570:COR:this.seenDataContainer.containsKey(vertexReachedByEdge):TRUE:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):393:this.seenDataContainer.containsKey(vertexReachedByEdge) |==> false
2571:COR:this.seenDataContainer.containsKey(vertexReachedByEdge):FALSE:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):393:this.seenDataContainer.containsKey(vertexReachedByEdge) |==> true
2572:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):395:tryToAddNewPaths(vertexReachedByEdge, edge) |==> false
2573:COR:relaxed:TRUE:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):397:relaxed |==> false
2574:COR:relaxed:FALSE:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):397:relaxed |==> true
2575:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):398:improvedVertices.add(vertexReachedByEdge) |==> <NO-OP>
2576:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):402:tryToAddFirstPaths(vertexReachedByEdge, edge) |==> false
2577:COR:relaxed:TRUE:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):404:relaxed |==> false
2578:COR:relaxed:FALSE:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):404:relaxed |==> true
2579:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KShortestPathsIterator@updateOutgoingVertices(V,java.util.Set<V>):405:improvedVertices.add(vertexReachedByEdge) |==> <NO-OP>
2580:EVR:<NEW_CLASS(java.util.HashMap<org.jgrapht.alg.RankingPathElement<V,E>,java.lang.Boolean>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList:64:new HashMap<RankingPathElement<V, E>, Boolean>() |==> null
2581:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):118:this.guardVertexToNotDisconnect = guardVertexToNotDisconnect |==> <NO-OP>
2582:LVR:0:POS:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:0 |==> 1
2583:LVR:0:NEG:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:0 |==> -1
2584:ROR:<(int,int):!=(int,int):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:i < elementList.size() |==> i != elementList.size()
2585:ROR:<(int,int):<=(int,int):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:i < elementList.size() |==> i <= elementList.size()
2586:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:i < elementList.size() |==> false
2587:ROR:<(int,int):!=(int,int):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:size() < maxSize |==> size() != maxSize
2588:ROR:<(int,int):<=(int,int):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:size() < maxSize |==> size() <= maxSize
2589:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:size() < maxSize |==> false
2590:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:(i < elementList.size()) && (size() < maxSize) |==> (i < elementList.size()) == (size() < maxSize)
2591:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:(i < elementList.size()) && (size() < maxSize) |==> false
2592:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:(i < elementList.size()) && (size() < maxSize) |==> (i < elementList.size())
2593:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):121:(i < elementList.size()) && (size() < maxSize) |==> (size() < maxSize)
2594:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):122:elementList.get(i) |==> null
2595:COR:isNotValidPath(prevPathElement, edge):TRUE:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):124:isNotValidPath(prevPathElement, edge) |==> false
2596:COR:isNotValidPath(prevPathElement, edge):FALSE:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):124:isNotValidPath(prevPathElement, edge) |==> true
2597:STD:<CONT>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):126:continue; |==> <NO-OP>
2598:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):129:calculatePathWeight(prevPathElement, edge) |==> 0.0
2599:EVR:<NEW_CLASS(org.jgrapht.alg.RankingPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):131:new RankingPathElement<V, E>(this.graph, prevPathElement, edge, weight) |==> null
2600:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@<init>(org.jgrapht.Graph<V,E>,int,org.jgrapht.alg.RankingPathElementList<V,E>,E,V):138:this.pathElements.add(newPathElement) |==> <NO-OP>
2601:LVR:FALSE:TRUE:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):189:false |==> true
2602:LVR:0:POS:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):193:0 |==> 1
2603:LVR:0:NEG:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):193:0 |==> -1
2604:LVR:0:POS:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):193:0 |==> 1
2605:LVR:0:NEG:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):193:0 |==> -1
2606:ROR:<(int,int):!=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):194:vIndex < elementList.size() |==> vIndex != elementList.size()
2607:ROR:<(int,int):<=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):194:vIndex < elementList.size() |==> vIndex <= elementList.size()
2608:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):194:vIndex < elementList.size() |==> false
2609:EVR:<METHOD_INVOCATION(org.jgrapht.alg.RankingPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):197:elementList.get(vIndex) |==> null
2610:COR:isNotValidPath(prevPathElement, edge):TRUE:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):199:isNotValidPath(prevPathElement, edge) |==> false
2611:COR:isNotValidPath(prevPathElement, edge):FALSE:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):199:isNotValidPath(prevPathElement, edge) |==> true
2612:STD:<CONT>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):202:continue; |==> <NO-OP>
2613:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):204:calculatePathWeight(prevPathElement, edge) |==> 0.0
2614:EVR:<NEW_CLASS(org.jgrapht.alg.RankingPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):206:new RankingPathElement<V, E>(this.graph, prevPathElement, edge, newPathWeight) |==> null
2615:ROR:<(int,int):!=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):215:yIndex < size() |==> yIndex != size()
2616:ROR:<(int,int):<=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):215:yIndex < size() |==> yIndex <= size()
2617:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):215:yIndex < size() |==> false
2618:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):216:yPathElement = get(yIndex) |==> <NO-OP>
2619:ROR:<(double,double):!=(double,double):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):220:newPathWeight < yPathElement.getWeight() |==> newPathWeight != yPathElement.getWeight()
2620:ROR:<(double,double):<=(double,double):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):220:newPathWeight < yPathElement.getWeight() |==> newPathWeight <= yPathElement.getWeight()
2621:ROR:<(double,double):FALSE(double,double):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):220:newPathWeight < yPathElement.getWeight() |==> false
2622:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):221:this.pathElements.add(yIndex, newPathElement) |==> <NO-OP>
2623:LVR:TRUE:FALSE:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):222:true |==> false
2624:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):222:pathAdded = true |==> <NO-OP>
2625:ROR:>(int,int):!=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):225:size() > this.maxSize |==> size() != this.maxSize
2626:ROR:>(int,int):>=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):225:size() > this.maxSize |==> size() >= this.maxSize
2627:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):225:size() > this.maxSize |==> false
2628:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):226:this.pathElements.remove(this.maxSize) |==> <NO-OP>
2629:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):228:break; |==> <NO-OP>
2630:ROR:==(double,double):<=(double,double):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):233:newPathWeight == yPathElement.getWeight() |==> newPathWeight <= yPathElement.getWeight()
2631:ROR:==(double,double):>=(double,double):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):233:newPathWeight == yPathElement.getWeight() |==> newPathWeight >= yPathElement.getWeight()
2632:ROR:==(double,double):FALSE(double,double):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):233:newPathWeight == yPathElement.getWeight() |==> false
2633:LVR:POS:0:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):234:1 |==> 0
2634:LVR:POS:NEG:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):234:1 |==> -1
2635:AOR:+(int,int):%(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):234:yIndex + 1 |==> yIndex % 1
2636:AOR:+(int,int):*(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):234:yIndex + 1 |==> yIndex * 1
2637:AOR:+(int,int):-(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):234:yIndex + 1 |==> yIndex - 1
2638:AOR:+(int,int):/(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):234:yIndex + 1 |==> yIndex / 1
2639:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):234:this.pathElements.add(yIndex + 1, newPathElement) |==> <NO-OP>
2640:LVR:TRUE:FALSE:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):235:true |==> false
2641:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):235:pathAdded = true |==> <NO-OP>
2642:ROR:>(int,int):!=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):238:size() > this.maxSize |==> size() != this.maxSize
2643:ROR:>(int,int):>=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):238:size() > this.maxSize |==> size() >= this.maxSize
2644:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):238:size() > this.maxSize |==> false
2645:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):239:this.pathElements.remove(this.maxSize) |==> <NO-OP>
2646:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):241:break; |==> <NO-OP>
2647:ROR:>(double,double):!=(double,double):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):247:newPathWeight > yPathElement.getWeight() |==> newPathWeight != yPathElement.getWeight()
2648:ROR:>(double,double):>=(double,double):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):247:newPathWeight > yPathElement.getWeight() |==> newPathWeight >= yPathElement.getWeight()
2649:ROR:>(double,double):FALSE(double,double):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):247:newPathWeight > yPathElement.getWeight() |==> false
2650:ROR:<(int,int):!=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):249:size() < this.maxSize |==> size() != this.maxSize
2651:ROR:<(int,int):<=(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):249:size() < this.maxSize |==> size() <= this.maxSize
2652:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):249:size() < this.maxSize |==> false
2653:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):251:this.pathElements.add(newPathElement) |==> <NO-OP>
2654:LVR:TRUE:FALSE:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):252:true |==> false
2655:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):252:pathAdded = true |==> <NO-OP>
2656:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):256:break; |==> <NO-OP>
2657:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@addPathElements(org.jgrapht.alg.RankingPathElementList<V,E>,E):261:pathAdded |==> false
2658:EVR:<MEMBER_SELECT(java.util.ArrayList<org.jgrapht.alg.RankingPathElement<V,E>>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@getPathElements():269:this.pathElements |==> null
2659:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@calculatePathWeight(org.jgrapht.alg.RankingPathElement<V,E>,E):287:this.graph.getEdgeWeight(edge) |==> 0.0
2660:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.RankingPathElementList@calculatePathWeight(org.jgrapht.alg.RankingPathElement<V,E>,E):290:pathElement.getPrevEdge() != null |==> true
2661:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@calculatePathWeight(org.jgrapht.alg.RankingPathElement<V,E>,E):291:pathWeight += pathElement.getWeight() |==> <NO-OP>
2662:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@calculatePathWeight(org.jgrapht.alg.RankingPathElement<V,E>,E):294:pathWeight |==> 0.0
2663:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):306:this.guardVertexToNotDisconnect == null |==> false
2664:LVR:FALSE:TRUE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):307:false |==> true
2665:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):307:return Config.__M_NO == 0 && Config.COVERED(2664, 2664) ? false : Config.__M_NO == 2664 ? true : false; |==> <NO-OP>
2666:COR:this.path2disconnect.containsKey(prevPathElement):TRUE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):310:this.path2disconnect.containsKey(prevPathElement) |==> false
2667:COR:this.path2disconnect.containsKey(prevPathElement):FALSE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):310:this.path2disconnect.containsKey(prevPathElement) |==> true
2668:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):311:return this.path2disconnect.get(prevPathElement); |==> <NO-OP>
2669:EVR:<NEW_CLASS(org.jgrapht.alg.RankingPathElementList.PathMask<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):318:new PathMask<V, E>(prevPathElement) |==> null
2670:EVR:<NEW_CLASS(org.jgrapht.graph.DirectedMaskSubgraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):320:new DirectedMaskSubgraph<V, E>((DirectedGraph<V, E>)this.graph, connectivityMask) |==> null
2671:EVR:<NEW_CLASS(org.jgrapht.alg.ConnectivityInspector<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):324:new ConnectivityInspector<V, E>(connectivityGraph) |==> null
2672:EVR:<NEW_CLASS(org.jgrapht.alg.RankingPathElementList.PathMask<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):327:new PathMask<V, E>(prevPathElement) |==> null
2673:EVR:<NEW_CLASS(org.jgrapht.graph.UndirectedMaskSubgraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):329:new UndirectedMaskSubgraph<V, E>((UndirectedGraph<V, E>)this.graph, connectivityMask) |==> null
2674:EVR:<NEW_CLASS(org.jgrapht.alg.ConnectivityInspector<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):333:new ConnectivityInspector<V, E>(connectivityGraph) |==> null
2675:COR:connectivityMask.isVertexMasked(this.guardVertexToNotDisconnect):TRUE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):337:connectivityMask.isVertexMasked(this.guardVertexToNotDisconnect) |==> false
2676:COR:connectivityMask.isVertexMasked(this.guardVertexToNotDisconnect):FALSE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):337:connectivityMask.isVertexMasked(this.guardVertexToNotDisconnect) |==> true
2677:LVR:TRUE:FALSE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):339:true |==> false
2678:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):339:this.path2disconnect.put(prevPathElement, true) |==> <NO-OP>
2679:LVR:TRUE:FALSE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):340:true |==> false
2680:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):340:return Config.__M_NO == 0 && Config.COVERED(2679, 2679) ? true : Config.__M_NO == 2679 ? false : true; |==> <NO-OP>
2681:COR:connectivityInspector.pathExists(this.vertex, this.guardVertexToNotDisconnect):TRUE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):343:connectivityInspector.pathExists(this.vertex, this.guardVertexToNotDisconnect) |==> false
2682:COR:connectivityInspector.pathExists(this.vertex, this.guardVertexToNotDisconnect):FALSE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):343:connectivityInspector.pathExists(this.vertex, this.guardVertexToNotDisconnect) |==> true
2683:LVR:TRUE:FALSE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):347:true |==> false
2684:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):347:this.path2disconnect.put(prevPathElement, true) |==> <NO-OP>
2685:LVR:TRUE:FALSE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):348:true |==> false
2686:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):348:return Config.__M_NO == 0 && Config.COVERED(2685, 2685) ? true : Config.__M_NO == 2685 ? false : true; |==> <NO-OP>
2687:LVR:FALSE:TRUE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):351:false |==> true
2688:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):351:this.path2disconnect.put(prevPathElement, false) |==> <NO-OP>
2689:LVR:FALSE:TRUE:org.jgrapht.alg.RankingPathElementList@isGuardVertexDisconnected(org.jgrapht.alg.RankingPathElement<V,E>):352:false |==> true
2690:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.RankingPathElementList@isNotValidPath(org.jgrapht.alg.RankingPathElement<V,E>,E):359:!isSimplePath(prevPathElement, edge) || isGuardVertexDisconnected(prevPathElement) |==> !isSimplePath(prevPathElement, edge) != isGuardVertexDisconnected(prevPathElement)
2691:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.RankingPathElementList@isNotValidPath(org.jgrapht.alg.RankingPathElement<V,E>,E):359:!isSimplePath(prevPathElement, edge) || isGuardVertexDisconnected(prevPathElement) |==> !isSimplePath(prevPathElement, edge)
2692:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.RankingPathElementList@isNotValidPath(org.jgrapht.alg.RankingPathElement<V,E>,E):360:!isSimplePath(prevPathElement, edge) || isGuardVertexDisconnected(prevPathElement) |==> isGuardVertexDisconnected(prevPathElement)
2693:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.RankingPathElementList@isNotValidPath(org.jgrapht.alg.RankingPathElement<V,E>,E):360:!isSimplePath(prevPathElement, edge) || isGuardVertexDisconnected(prevPathElement) |==> true
2694:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@isSimplePath(org.jgrapht.alg.RankingPathElement<V,E>,E):379:Graphs.getOppositeVertex(this.graph, edge, prevPathElement.getVertex()) |==> null
2695:EVR:<IDENTIFIER(org.jgrapht.alg.RankingPathElement<V,E>)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList@isSimplePath(org.jgrapht.alg.RankingPathElement<V,E>,E):385:prevPathElement |==> null
2696:COR:pathElementToTest.getVertex().equals(endVertex):TRUE:org.jgrapht.alg.RankingPathElementList@isSimplePath(org.jgrapht.alg.RankingPathElement<V,E>,E):387:pathElementToTest.getVertex().equals(endVertex) |==> false
2697:COR:pathElementToTest.getVertex().equals(endVertex):FALSE:org.jgrapht.alg.RankingPathElementList@isSimplePath(org.jgrapht.alg.RankingPathElement<V,E>,E):387:pathElementToTest.getVertex().equals(endVertex) |==> true
2698:LVR:FALSE:TRUE:org.jgrapht.alg.RankingPathElementList@isSimplePath(org.jgrapht.alg.RankingPathElement<V,E>,E):388:false |==> true
2699:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@isSimplePath(org.jgrapht.alg.RankingPathElement<V,E>,E):388:return Config.__M_NO == 0 && Config.COVERED(2698, 2698) ? false : Config.__M_NO == 2698 ? true : false; |==> <NO-OP>
2700:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList@isSimplePath(org.jgrapht.alg.RankingPathElement<V,E>,E):390:pathElementToTest = pathElementToTest.getPrevPathElement() |==> <NO-OP>
2701:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.RankingPathElementList@isSimplePath(org.jgrapht.alg.RankingPathElement<V,E>,E):392:pathElementToTest != null |==> true
2702:LVR:TRUE:FALSE:org.jgrapht.alg.RankingPathElementList@isSimplePath(org.jgrapht.alg.RankingPathElement<V,E>,E):394:true |==> false
2703:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList$PathMask@<init>(org.jgrapht.alg.RankingPathElement<V,E>):414:this.maskedEdges = new HashSet<E>() |==> <NO-OP>
2704:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList$PathMask@<init>(org.jgrapht.alg.RankingPathElement<V,E>):415:this.maskedVertices = new HashSet<V>() |==> <NO-OP>
2705:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.RankingPathElementList$PathMask@<init>(org.jgrapht.alg.RankingPathElement<V,E>):417:pathElement.getPrevEdge() != null |==> true
2706:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList$PathMask@<init>(org.jgrapht.alg.RankingPathElement<V,E>):418:this.maskedEdges.add(pathElement.getPrevEdge()) |==> <NO-OP>
2707:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList$PathMask@<init>(org.jgrapht.alg.RankingPathElement<V,E>):419:this.maskedVertices.add(pathElement.getVertex()) |==> <NO-OP>
2708:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.RankingPathElementList$PathMask@<init>(org.jgrapht.alg.RankingPathElement<V,E>):420:pathElement = pathElement.getPrevPathElement() |==> <NO-OP>
2709:STD:<CALL>:<NO-OP>:org.jgrapht.alg.RankingPathElementList$PathMask@<init>(org.jgrapht.alg.RankingPathElement<V,E>):422:this.maskedVertices.add(pathElement.getVertex()) |==> <NO-OP>
2710:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList$PathMask@isEdgeMasked(E):428:this.maskedEdges.contains(edge) |==> false
2711:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.RankingPathElementList$PathMask@isVertexMasked(V):434:this.maskedVertices.contains(vertex) |==> false
2712:EVR:<NEW_CLASS(org.jgrapht.alg.util.UnionFind<V>)>:<DEFAULT>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):74:new UnionFind<V>(graph.vertexSet()) |==> null
2713:EVR:<NEW_CLASS(java.util.ArrayList<E>)>:<DEFAULT>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):75:new ArrayList<E>(graph.edgeSet()) |==> null
2714:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.KruskalMinimumSpanningTree$1@compare(E,E):81:Double.valueOf(graph.getEdgeWeight(edge1)).compareTo(graph.getEdgeWeight(edge2)) |==> 0
2715:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):76:Collections.sort(allEdges, new Comparator<E>(){...) |==> <NO-OP>
2716:LVR:0:POS:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):86:0 |==> 1
2717:LVR:0:NEG:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):86:0 |==> -1
2718:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):86:spanningTreeCost = 0 |==> <NO-OP>
2719:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):87:edgeList = new HashSet<E>() |==> <NO-OP>
2720:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):90:graph.getEdgeSource(edge) |==> null
2721:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):91:graph.getEdgeTarget(edge) |==> null
2722:COR:forest.find(source).equals(forest.find(target)):TRUE:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):92:forest.find(source).equals(forest.find(target)) |==> false
2723:COR:forest.find(source).equals(forest.find(target)):FALSE:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):92:forest.find(source).equals(forest.find(target)) |==> true
2724:STD:<CONT>:<NO-OP>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):93:continue; |==> <NO-OP>
2725:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):96:forest.union(source, target) |==> <NO-OP>
2726:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):97:edgeList.add(edge) |==> <NO-OP>
2727:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KruskalMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):98:spanningTreeCost += graph.getEdgeWeight(edge) |==> <NO-OP>
2728:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.KruskalMinimumSpanningTree@getMinimumSpanningTreeEdgeSet():106:edgeList |==> null
2729:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.KruskalMinimumSpanningTree@getMinimumSpanningTreeTotalWeight():111:spanningTreeCost |==> 0.0
2730:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.KruskalMinimumSpanningTree@getEdgeSet():121:getMinimumSpanningTreeEdgeSet() |==> null
2731:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.KruskalMinimumSpanningTree@getSpanningTreeCost():131:getMinimumSpanningTreeTotalWeight() |==> 0.0
2732:ROR:!=(int,int):<(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):83:S.size() != T.size() |==> S.size() < T.size()
2733:ROR:!=(int,int):>(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):83:S.size() != T.size() |==> S.size() > T.size()
2734:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):83:S.size() != T.size() |==> true
2735:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):88:S.size() |==> 0
2736:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):88:G.edgeSet().size() |==> 0
2737:AOR:*(int,int):%(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):90:partition * partition |==> partition % partition
2738:AOR:*(int,int):+(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):90:partition * partition |==> partition + partition
2739:AOR:*(int,int):-(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):90:partition * partition |==> partition - partition
2740:AOR:*(int,int):/(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):90:partition * partition |==> partition / partition
2741:ROR:!=(int,int):<(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):90:edges != (partition * partition) |==> edges < (partition * partition)
2742:ROR:!=(int,int):>(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):90:edges != (partition * partition) |==> edges > (partition * partition)
2743:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):90:edges != (partition * partition) |==> true
2744:EVR:<IDENTIFIER(org.jgrapht.WeightedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):95:G |==> null
2745:EVR:<IDENTIFIER(java.util.List<capture#43 of ? extends V>)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):96:S |==> null
2746:EVR:<IDENTIFIER(java.util.List<capture#173 of ? extends V>)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):97:T |==> null
2747:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):100:new KuhnMunkresMatrixImplementation<V, E>(G, S, T).buildMatching() |==> null
2748:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatching():107:new HashSet<E>() |==> null
2749:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatching():109:0 |==> 1
2750:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatching():109:0 |==> -1
2751:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatching():109:i < matching.length |==> i != matching.length
2752:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatching():109:i < matching.length |==> i <= matching.length
2753:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatching():109:i < matching.length |==> false
2754:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatching():110:edges.add(graph.getEdge(firstPartition.get(i), secondPartition.get(matching[i]))) |==> <NO-OP>
2755:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatching():116:edges |==> null
2756:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatchingWeight():121:0.0 |==> 1.0
2757:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatchingWeight():121:0.0 |==> -1.0
2758:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatchingWeight():124:weight += graph.getEdgeWeight(edge) |==> <NO-OP>
2759:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching@getMatchingWeight():127:weight |==> 0.0
2760:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):173:S.size() |==> 0
2761:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):178:costMatrix = new double[partition][] |==> <NO-OP>
2762:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):180:0 |==> 1
2763:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):180:0 |==> -1
2764:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):180:i < S.size() |==> i != S.size()
2765:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):180:i < S.size() |==> i <= S.size()
2766:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):180:i < S.size() |==> false
2767:EVR:<METHOD_INVOCATION(capture#131 of ? extends V)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):181:S.get(i) |==> null
2768:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):182:costMatrix[i] = new double[partition] |==> <NO-OP>
2769:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):183:0 |==> 1
2770:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):183:0 |==> -1
2771:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):183:j < T.size() |==> j != T.size()
2772:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):183:j < T.size() |==> j <= T.size()
2773:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):183:j < T.size() |==> false
2774:EVR:<METHOD_INVOCATION(capture#266 of ? extends V)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):184:T.get(j) |==> null
2775:COR:source.equals(target):TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):185:source.equals(target) |==> false
2776:COR:source.equals(target):FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):185:source.equals(target) |==> true
2777:STD:<CONT>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):186:continue; |==> <NO-OP>
2778:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@<init>(org.jgrapht.WeightedGraph<V,E>,java.util.List<? extends V>,java.util.List<? extends V>):188:costMatrix[i][j] = G.getEdgeWeight(G.getEdge(source, target)) |==> <NO-OP>
2779:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():202:costMatrix.length |==> 0
2780:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():202:0 |==> 1
2781:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():202:0 |==> -1
2782:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():205:excessMatrix = makeExcessMatrix() |==> <NO-OP>
2783:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():208:rowsCovered = new boolean[height] |==> <NO-OP>
2784:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():209:columnsCovered = new boolean[width] |==> <NO-OP>
2785:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():212:columnMatched = new int[height] |==> <NO-OP>
2786:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():213:rowMatched = new int[width] |==> <NO-OP>
2787:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():215:-1 |==> 0
2788:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():215:-1 |==> 1
2789:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():215:Arrays.fill(columnMatched, -1) |==> <NO-OP>
2790:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():216:-1 |==> 0
2791:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():216:-1 |==> 1
2792:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():216:Arrays.fill(rowMatched, -1) |==> <NO-OP>
2793:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():220:buildMaximalMatching() < width |==> buildMaximalMatching() != width
2794:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():220:buildMaximalMatching() < width |==> buildMaximalMatching() <= width
2795:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():220:buildMaximalMatching() < width |==> false
2796:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():221:buildVertexCoverage() |==> <NO-OP>
2797:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():222:extendEqualityGraph() |==> <NO-OP>
2798:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMatching():227:Arrays.copyOf(columnMatched, height) |==> null
2799:EVR:<NEW_ARRAY(double[][])>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():237:new double[costMatrix.length][] |==> null
2800:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():239:0 |==> 1
2801:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():239:0 |==> -1
2802:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():239:i < excessMatrix.length |==> i != excessMatrix.length
2803:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():239:i < excessMatrix.length |==> i <= excessMatrix.length
2804:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():239:i < excessMatrix.length |==> false
2805:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():240:excessMatrix[i] = Arrays.copyOf(costMatrix[i], costMatrix[i].length) |==> <NO-OP>
2806:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():246:0 |==> 1
2807:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():246:0 |==> -1
2808:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():246:i < excessMatrix.length |==> i != excessMatrix.length
2809:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():246:i < excessMatrix.length |==> i <= excessMatrix.length
2810:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():246:i < excessMatrix.length |==> false
2811:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():247:Double.MAX_VALUE |==> 0.0
2812:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():249:0 |==> 1
2813:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():249:0 |==> -1
2814:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():249:j < excessMatrix[i].length |==> j != excessMatrix[i].length
2815:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():249:j < excessMatrix[i].length |==> j <= excessMatrix[i].length
2816:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():249:j < excessMatrix[i].length |==> false
2817:ROR:>(double,double):!=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():250:cheapestTaskCost > excessMatrix[i][j] |==> cheapestTaskCost != excessMatrix[i][j]
2818:ROR:>(double,double):>=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():250:cheapestTaskCost > excessMatrix[i][j] |==> cheapestTaskCost >= excessMatrix[i][j]
2819:ROR:>(double,double):FALSE(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():250:cheapestTaskCost > excessMatrix[i][j] |==> false
2820:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():251:cheapestTaskCost = excessMatrix[i][j] |==> <NO-OP>
2821:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():255:0 |==> 1
2822:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():255:0 |==> -1
2823:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():255:j < excessMatrix[i].length |==> j != excessMatrix[i].length
2824:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():255:j < excessMatrix[i].length |==> j <= excessMatrix[i].length
2825:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():255:j < excessMatrix[i].length |==> false
2826:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():256:excessMatrix[i][j] -= cheapestTaskCost |==> <NO-OP>
2827:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():271:0 |==> 1
2828:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():271:0 |==> -1
2829:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():271:0 |==> 1
2830:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():271:0 |==> -1
2831:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():271:j < excessMatrix[0].length |==> j != excessMatrix[0].length
2832:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():271:j < excessMatrix[0].length |==> j <= excessMatrix[0].length
2833:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():271:j < excessMatrix[0].length |==> false
2834:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():272:Double.MAX_VALUE |==> 0.0
2835:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():274:0 |==> 1
2836:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():274:0 |==> -1
2837:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():274:i < excessMatrix.length |==> i != excessMatrix.length
2838:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():274:i < excessMatrix.length |==> i <= excessMatrix.length
2839:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():274:i < excessMatrix.length |==> false
2840:ROR:>(double,double):!=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():275:cheapestWorkerCost > excessMatrix[i][j] |==> cheapestWorkerCost != excessMatrix[i][j]
2841:ROR:>(double,double):>=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():275:cheapestWorkerCost > excessMatrix[i][j] |==> cheapestWorkerCost >= excessMatrix[i][j]
2842:ROR:>(double,double):FALSE(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():275:cheapestWorkerCost > excessMatrix[i][j] |==> false
2843:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():276:cheapestWorkerCost = excessMatrix[i][j] |==> <NO-OP>
2844:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():280:0 |==> 1
2845:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():280:0 |==> -1
2846:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():280:i < excessMatrix.length |==> i != excessMatrix.length
2847:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():280:i < excessMatrix.length |==> i <= excessMatrix.length
2848:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():280:i < excessMatrix.length |==> false
2849:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():281:excessMatrix[i][j] -= cheapestWorkerCost |==> <NO-OP>
2850:EVR:<IDENTIFIER(double[][])>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@makeExcessMatrix():285:excessMatrix |==> null
2851:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():297:0 |==> 1
2852:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():297:0 |==> -1
2853:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():299:0 |==> 1
2854:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():299:0 |==> -1
2855:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():299:i < columnMatched.length |==> i != columnMatched.length
2856:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():299:i < columnMatched.length |==> i <= columnMatched.length
2857:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():299:i < columnMatched.length |==> false
2858:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():300:-1 |==> 0
2859:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():300:-1 |==> 1
2860:ROR:!=(int,int):<(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():300:columnMatched[i] != -1 |==> columnMatched[i] < -1
2861:ROR:!=(int,int):>(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():300:columnMatched[i] != -1 |==> columnMatched[i] > -1
2862:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():300:columnMatched[i] != -1 |==> true
2863:STD:<INC>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():301:++matchingSizeLowerBound |==> <NO-OP>
2864:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():307:0 |==> 1
2865:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():307:0 |==> -1
2866:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():307:0 |==> 1
2867:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():307:0 |==> -1
2868:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():307:j < excessMatrix[0].length |==> j != excessMatrix[0].length
2869:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():307:j < excessMatrix[0].length |==> j <= excessMatrix[0].length
2870:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():307:j < excessMatrix[0].length |==> false
2871:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():308:-1 |==> 0
2872:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():308:-1 |==> 1
2873:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():308:rowMatched[j] == -1 |==> rowMatched[j] <= -1
2874:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():308:rowMatched[j] == -1 |==> rowMatched[j] >= -1
2875:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():308:rowMatched[j] == -1 |==> false
2876:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():309:0 |==> 1
2877:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():309:0 |==> -1
2878:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():309:i < excessMatrix.length |==> i != excessMatrix.length
2879:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():309:i < excessMatrix.length |==> i <= excessMatrix.length
2880:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():309:i < excessMatrix.length |==> false
2881:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():310:0 |==> 1
2882:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():310:0 |==> -1
2883:ROR:==(double,double):<=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():310:excessMatrix[i][j] == 0 |==> excessMatrix[i][j] <= 0
2884:ROR:==(double,double):>=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():310:excessMatrix[i][j] == 0 |==> excessMatrix[i][j] >= 0
2885:ROR:==(double,double):FALSE(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():310:excessMatrix[i][j] == 0 |==> false
2886:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():311:-1 |==> 0
2887:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():311:-1 |==> 1
2888:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():311:columnMatched[i] == -1 |==> columnMatched[i] <= -1
2889:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():311:columnMatched[i] == -1 |==> columnMatched[i] >= -1
2890:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():311:columnMatched[i] == -1 |==> false
2891:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():310:(excessMatrix[i][j] == 0) && (columnMatched[i] == -1) |==> (excessMatrix[i][j] == 0) == (columnMatched[i] == -1)
2892:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():311:(excessMatrix[i][j] == 0) && (columnMatched[i] == -1) |==> false
2893:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():310:(excessMatrix[i][j] == 0) && (columnMatched[i] == -1) |==> (excessMatrix[i][j] == 0)
2894:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():311:(excessMatrix[i][j] == 0) && (columnMatched[i] == -1) |==> (columnMatched[i] == -1)
2895:STD:<INC>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():313:++matchingSizeLowerBound |==> <NO-OP>
2896:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():314:columnMatched[i] = j |==> <NO-OP>
2897:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():315:rowMatched[j] = i |==> <NO-OP>
2898:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():316:break; |==> <NO-OP>
2899:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():324:0 |==> 1
2900:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():324:0 |==> -1
2901:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():324:matchingSizeLowerBound == excessMatrix[0].length |==> matchingSizeLowerBound <= excessMatrix[0].length
2902:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():324:matchingSizeLowerBound == excessMatrix[0].length |==> matchingSizeLowerBound >= excessMatrix[0].length
2903:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():324:matchingSizeLowerBound == excessMatrix[0].length |==> false
2904:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():325:return matchingSizeLowerBound; |==> <NO-OP>
2905:EVR:<NEW_ARRAY(boolean[])>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():334:new boolean[excessMatrix.length] |==> null
2906:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():335:0 |==> 1
2907:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():335:0 |==> -1
2908:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():337:0 |==> 1
2909:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():337:0 |==> -1
2910:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():339:true |==> false
2911:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():341:matchingSize < excessMatrix.length |==> matchingSize != excessMatrix.length
2912:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():341:matchingSize < excessMatrix.length |==> matchingSize <= excessMatrix.length
2913:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():341:matchingSize < excessMatrix.length |==> false
2914:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():341:extending && (matchingSize < excessMatrix.length) |==> extending == (matchingSize < excessMatrix.length)
2915:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():341:extending && (matchingSize < excessMatrix.length) |==> false
2916:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():341:extending && (matchingSize < excessMatrix.length) |==> extending
2917:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():341:extending && (matchingSize < excessMatrix.length) |==> (matchingSize < excessMatrix.length)
2918:LVR:FALSE:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():342:false |==> true
2919:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():342:Arrays.fill(rowsVisited, false) |==> <NO-OP>
2920:LVR:FALSE:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():343:false |==> true
2921:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():343:Arrays.fill(colsVisited, false) |==> <NO-OP>
2922:LVR:FALSE:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():345:false |==> true
2923:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():345:extending = false |==> <NO-OP>
2924:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():347:0 |==> 1
2925:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():347:0 |==> -1
2926:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():347:j < excessMatrix.length |==> j != excessMatrix.length
2927:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():347:j < excessMatrix.length |==> j <= excessMatrix.length
2928:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():347:j < excessMatrix.length |==> false
2929:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():348:-1 |==> 0
2930:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():348:-1 |==> 1
2931:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():348:rowMatched[j] == -1 |==> rowMatched[j] <= -1
2932:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():348:rowMatched[j] == -1 |==> rowMatched[j] >= -1
2933:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():348:rowMatched[j] == -1 |==> false
2934:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():348:(rowMatched[j] == -1) && !colsVisited[j] |==> (rowMatched[j] == -1) == !colsVisited[j]
2935:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():348:(rowMatched[j] == -1) && !colsVisited[j] |==> false
2936:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():348:(rowMatched[j] == -1) && !colsVisited[j] |==> (rowMatched[j] == -1)
2937:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():348:(rowMatched[j] == -1) && !colsVisited[j] |==> !colsVisited[j]
2938:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():349:extending |= new MatchExtender(rowsVisited, colsVisited).extend(j) |==> <NO-OP>
2939:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():355:0 |==> 1
2940:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():355:0 |==> -1
2941:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():355:matchingSize = 0 |==> <NO-OP>
2942:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():357:0 |==> 1
2943:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():357:0 |==> -1
2944:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():357:j < rowMatched.length |==> j != rowMatched.length
2945:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():357:j < rowMatched.length |==> j <= rowMatched.length
2946:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():357:j < rowMatched.length |==> false
2947:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():358:-1 |==> 0
2948:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():358:-1 |==> 1
2949:ROR:!=(int,int):<(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():358:rowMatched[j] != -1 |==> rowMatched[j] < -1
2950:ROR:!=(int,int):>(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():358:rowMatched[j] != -1 |==> rowMatched[j] > -1
2951:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():358:rowMatched[j] != -1 |==> true
2952:STD:<INC>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():359:++matchingSize |==> <NO-OP>
2953:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildMaximalMatching():364:matchingSize |==> 0
2954:LVR:FALSE:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():372:false |==> true
2955:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():372:Arrays.fill(columnsCovered, false) |==> <NO-OP>
2956:LVR:FALSE:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():373:false |==> true
2957:STD:<CALL>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():373:Arrays.fill(rowsCovered, false) |==> <NO-OP>
2958:EVR:<NEW_ARRAY(boolean[])>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():375:new boolean[rowsCovered.length] |==> null
2959:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():377:0 |==> 1
2960:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():377:0 |==> -1
2961:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():377:i < excessMatrix.length |==> i != excessMatrix.length
2962:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():377:i < excessMatrix.length |==> i <= excessMatrix.length
2963:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():377:i < excessMatrix.length |==> false
2964:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():378:-1 |==> 0
2965:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():378:-1 |==> 1
2966:ROR:!=(int,int):<(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():378:columnMatched[i] != -1 |==> columnMatched[i] < -1
2967:ROR:!=(int,int):>(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():378:columnMatched[i] != -1 |==> columnMatched[i] > -1
2968:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():378:columnMatched[i] != -1 |==> true
2969:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():379:true |==> false
2970:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():379:invertible[i] = true |==> <NO-OP>
2971:STD:<CONT>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():380:continue; |==> <NO-OP>
2972:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():383:0 |==> 1
2973:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():383:0 |==> -1
2974:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():383:j < excessMatrix[i].length |==> j != excessMatrix[i].length
2975:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():383:j < excessMatrix[i].length |==> j <= excessMatrix[i].length
2976:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():383:j < excessMatrix[i].length |==> false
2977:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():384:0.0 |==> 1.0
2978:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():384:0.0 |==> -1.0
2979:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():384:0 |==> 1
2980:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():384:0 |==> -1
2981:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():384:Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0 |==> Double.valueOf(excessMatrix[i][j]).compareTo(0.0) <= 0
2982:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():384:Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0 |==> Double.valueOf(excessMatrix[i][j]).compareTo(0.0) >= 0
2983:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():384:Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0 |==> false
2984:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():385:true |==> false
2985:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():385:rowsCovered[i] = invertible[i] = true |==> <NO-OP>
2986:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():386:break; |==> <NO-OP>
2987:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():391:true |==> false
2988:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():394:0 |==> 1
2989:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():394:0 |==> -1
2990:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():394:i < excessMatrix.length |==> i != excessMatrix.length
2991:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():394:i < excessMatrix.length |==> i <= excessMatrix.length
2992:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():394:i < excessMatrix.length |==> false
2993:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():396:0 |==> 1
2994:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():396:0 |==> -1
2995:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():396:j < excessMatrix[i].length |==> j != excessMatrix[i].length
2996:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():396:j < excessMatrix[i].length |==> j <= excessMatrix[i].length
2997:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():396:j < excessMatrix[i].length |==> false
2998:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():398:0.0 |==> 1.0
2999:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():398:0.0 |==> -1.0
3000:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():398:0 |==> 1
3001:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():398:0 |==> -1
3002:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():397:Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0 |==> Double.valueOf(excessMatrix[i][j]).compareTo(0.0) <= 0
3003:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():397:Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0 |==> Double.valueOf(excessMatrix[i][j]).compareTo(0.0) >= 0
3004:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():398:Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0 |==> false
3005:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():397:(Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0) && !columnsCovered[j] |==> (Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0) == !columnsCovered[j]
3006:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():399:(Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0) && !columnsCovered[j] |==> false
3007:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():397:(Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0) && !columnsCovered[j] |==> (Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0)
3008:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():399:(Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0) && !columnsCovered[j] |==> !columnsCovered[j]
3009:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():401:true |==> false
3010:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():401:columnsCovered[j] = true |==> <NO-OP>
3011:LVR:FALSE:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():409:false |==> true
3012:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():409:cont = false |==> <NO-OP>
3013:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():411:0 |==> 1
3014:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():411:0 |==> -1
3015:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():411:j < columnsCovered.length |==> j != columnsCovered.length
3016:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():411:j < columnsCovered.length |==> j <= columnsCovered.length
3017:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():411:j < columnsCovered.length |==> false
3018:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():412:-1 |==> 0
3019:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():412:-1 |==> 1
3020:ROR:!=(int,int):<(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():412:rowMatched[j] != -1 |==> rowMatched[j] < -1
3021:ROR:!=(int,int):>(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():412:rowMatched[j] != -1 |==> rowMatched[j] > -1
3022:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():412:rowMatched[j] != -1 |==> true
3023:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():412:columnsCovered[j] && (rowMatched[j] != -1) |==> columnsCovered[j] == (rowMatched[j] != -1)
3024:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():412:columnsCovered[j] && (rowMatched[j] != -1) |==> false
3025:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():412:columnsCovered[j] && (rowMatched[j] != -1) |==> columnsCovered[j]
3026:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():412:columnsCovered[j] && (rowMatched[j] != -1) |==> (rowMatched[j] != -1)
3027:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():414:true |==> false
3028:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():414:cont = true |==> <NO-OP>
3029:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():415:true |==> false
3030:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():415:rowsCovered[rowMatched[j]] = true |==> <NO-OP>
3031:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():423:0 |==> 1
3032:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():423:0 |==> -1
3033:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():423:i < rowsCovered.length |==> i != rowsCovered.length
3034:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():423:i < rowsCovered.length |==> i <= rowsCovered.length
3035:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():423:i < rowsCovered.length |==> false
3036:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():425:true |==> false
3037:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():425:rowsCovered[i] ^= true |==> <NO-OP>
3038:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():429:0 |==> 1
3039:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():429:0 |==> -1
3040:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():429:uncovered(excessMatrix, rowsCovered, columnsCovered) == 0 |==> uncovered(excessMatrix, rowsCovered, columnsCovered) <= 0
3041:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():429:uncovered(excessMatrix, rowsCovered, columnsCovered) == 0 |==> uncovered(excessMatrix, rowsCovered, columnsCovered) >= 0
3042:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@buildVertexCoverage():429:uncovered(excessMatrix, rowsCovered, columnsCovered) == 0 |==> false
3043:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():439:Double.MAX_VALUE |==> 0.0
3044:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():441:0 |==> 1
3045:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():441:0 |==> -1
3046:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():441:i < excessMatrix.length |==> i != excessMatrix.length
3047:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():441:i < excessMatrix.length |==> i <= excessMatrix.length
3048:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():441:i < excessMatrix.length |==> false
3049:STD:<CONT>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():443:continue; |==> <NO-OP>
3050:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():445:0 |==> 1
3051:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():445:0 |==> -1
3052:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():445:j < excessMatrix[i].length |==> j != excessMatrix[i].length
3053:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():445:j < excessMatrix[i].length |==> j <= excessMatrix[i].length
3054:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():445:j < excessMatrix[i].length |==> false
3055:STD:<CONT>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():447:continue; |==> <NO-OP>
3056:ROR:>(double,double):!=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():449:minExcess > excessMatrix[i][j] |==> minExcess != excessMatrix[i][j]
3057:ROR:>(double,double):>=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():449:minExcess > excessMatrix[i][j] |==> minExcess >= excessMatrix[i][j]
3058:ROR:>(double,double):FALSE(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():449:minExcess > excessMatrix[i][j] |==> false
3059:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():450:minExcess = excessMatrix[i][j] |==> <NO-OP>
3060:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():457:0 |==> 1
3061:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():457:0 |==> -1
3062:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():457:i < excessMatrix.length |==> i != excessMatrix.length
3063:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():457:i < excessMatrix.length |==> i <= excessMatrix.length
3064:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():457:i < excessMatrix.length |==> false
3065:STD:<CONT>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():459:continue; |==> <NO-OP>
3066:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():461:0 |==> 1
3067:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():461:0 |==> -1
3068:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():461:j < excessMatrix[i].length |==> j != excessMatrix[i].length
3069:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():461:j < excessMatrix[i].length |==> j <= excessMatrix[i].length
3070:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():461:j < excessMatrix[i].length |==> false
3071:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():462:excessMatrix[i][j] += minExcess |==> <NO-OP>
3072:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():468:0 |==> 1
3073:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():468:0 |==> -1
3074:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():468:0 |==> 1
3075:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():468:0 |==> -1
3076:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():468:j < excessMatrix[0].length |==> j != excessMatrix[0].length
3077:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():468:j < excessMatrix[0].length |==> j <= excessMatrix[0].length
3078:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():468:j < excessMatrix[0].length |==> false
3079:STD:<CONT>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():470:continue; |==> <NO-OP>
3080:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():472:0 |==> 1
3081:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():472:0 |==> -1
3082:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():472:i < excessMatrix.length |==> i != excessMatrix.length
3083:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():472:i < excessMatrix.length |==> i <= excessMatrix.length
3084:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():472:i < excessMatrix.length |==> false
3085:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@extendEqualityGraph():473:excessMatrix[i][j] -= minExcess |==> <NO-OP>
3086:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):494:0 |==> 1
3087:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):494:0 |==> -1
3088:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):495:0 |==> 1
3089:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):495:0 |==> -1
3090:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):495:i < match.length |==> i != match.length
3091:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):495:i < match.length |==> i <= match.length
3092:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):495:i < match.length |==> false
3093:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):496:-1 |==> 0
3094:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):496:-1 |==> 1
3095:ROR:!=(int,int):<(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):496:match[i] != -1 |==> match[i] < -1
3096:ROR:!=(int,int):>(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):496:match[i] != -1 |==> match[i] > -1
3097:ROR:!=(int,int):TRUE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):496:match[i] != -1 |==> true
3098:STD:<INC>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):497:++matched |==> <NO-OP>
3099:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):501:0 |==> 1
3100:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):501:0 |==> -1
3101:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):502:0 |==> 1
3102:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):502:0 |==> -1
3103:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):502:i < rowsCovered.length |==> i != rowsCovered.length
3104:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):502:i < rowsCovered.length |==> i <= rowsCovered.length
3105:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):502:i < rowsCovered.length |==> false
3106:STD:<INC>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):504:++covered |==> <NO-OP>
3107:STD:<INC>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):507:++covered |==> <NO-OP>
3108:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):511:matched == covered |==> matched <= covered
3109:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):511:matched == covered |==> matched >= covered
3110:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@minimal(int[],boolean[],boolean[]):511:matched == covered |==> false
3111:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):526:0 |==> 1
3112:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):526:0 |==> -1
3113:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):528:0 |==> 1
3114:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):528:0 |==> -1
3115:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):528:i < excessMatrix.length |==> i != excessMatrix.length
3116:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):528:i < excessMatrix.length |==> i <= excessMatrix.length
3117:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):528:i < excessMatrix.length |==> false
3118:STD:<CONT>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):530:continue; |==> <NO-OP>
3119:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):532:0 |==> 1
3120:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):532:0 |==> -1
3121:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):532:j < excessMatrix[i].length |==> j != excessMatrix[i].length
3122:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):532:j < excessMatrix[i].length |==> j <= excessMatrix[i].length
3123:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):532:j < excessMatrix[i].length |==> false
3124:STD:<CONT>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):534:continue; |==> <NO-OP>
3125:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):536:0.0 |==> 1.0
3126:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):536:0.0 |==> -1.0
3127:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):536:0 |==> 1
3128:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):536:0 |==> -1
3129:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):536:Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0 |==> Double.valueOf(excessMatrix[i][j]).compareTo(0.0) <= 0
3130:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):536:Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0 |==> Double.valueOf(excessMatrix[i][j]).compareTo(0.0) >= 0
3131:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):536:Double.valueOf(excessMatrix[i][j]).compareTo(0.0) == 0 |==> false
3132:STD:<INC>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):537:++uncoveredZero |==> <NO-OP>
3133:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation@uncovered(double[][],boolean[],boolean[]):542:uncoveredZero |==> 0
3134:EVR:<IDENTIFIER(boolean[])>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@<init>(boolean[],boolean[]):557:rowsVisited |==> null
3135:EVR:<IDENTIFIER(boolean[])>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@<init>(boolean[],boolean[]):558:colsVisited |==> null
3136:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extend(int):569:extendMatchingEL(initialCol) |==> false
3137:LVR:NEG:0:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):587:-1 |==> 0
3138:LVR:NEG:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):587:-1 |==> 1
3139:ROR:==(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):587:columnMatched[pathTailRow] == -1 |==> columnMatched[pathTailRow] <= -1
3140:ROR:==(int,int):>=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):587:columnMatched[pathTailRow] == -1 |==> columnMatched[pathTailRow] >= -1
3141:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):587:columnMatched[pathTailRow] == -1 |==> false
3142:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):590:columnMatched[pathTailRow] = pathTailCol |==> <NO-OP>
3143:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):591:rowMatched[pathTailCol] = pathTailRow |==> <NO-OP>
3144:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):593:true |==> false
3145:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):596:true |==> false
3146:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):596:rowsVisited[pathTailRow] = true |==> <NO-OP>
3147:LVR:FALSE:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):600:false |==> true
3148:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):600:return Config.__M_NO == 0 && Config.COVERED(3147, 3147) ? false : Config.__M_NO == 3147 ? true : false; |==> <NO-OP>
3149:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):604:extendMatchingEL(columnMatched[pathTailRow]) |==> false
3150:COR:extending:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):607:extending |==> false
3151:COR:extending:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):607:extending |==> true
3152:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):608:columnMatched[pathTailRow] = pathTailCol |==> <NO-OP>
3153:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):609:rowMatched[pathTailCol] = pathTailRow |==> <NO-OP>
3154:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingOL(int,int):612:extending |==> false
3155:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):626:true |==> false
3156:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):626:colsVisited[pathTailCol] = true |==> <NO-OP>
3157:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):628:0 |==> 1
3158:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):628:0 |==> -1
3159:ROR:<(int,int):!=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):628:i < excessMatrix.length |==> i != excessMatrix.length
3160:ROR:<(int,int):<=(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):628:i < excessMatrix.length |==> i <= excessMatrix.length
3161:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):628:i < excessMatrix.length |==> false
3162:LVR:0:POS:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):629:0 |==> 1
3163:LVR:0:NEG:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):629:0 |==> -1
3164:ROR:==(double,double):<=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):629:excessMatrix[i][pathTailCol] == 0 |==> excessMatrix[i][pathTailCol] <= 0
3165:ROR:==(double,double):>=(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):629:excessMatrix[i][pathTailCol] == 0 |==> excessMatrix[i][pathTailCol] >= 0
3166:ROR:==(double,double):FALSE(double,double):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):629:excessMatrix[i][pathTailCol] == 0 |==> false
3167:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):629:(excessMatrix[i][pathTailCol] == 0) && !rowsVisited[i] |==> (excessMatrix[i][pathTailCol] == 0) == !rowsVisited[i]
3168:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):630:(excessMatrix[i][pathTailCol] == 0) && !rowsVisited[i] |==> false
3169:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):629:(excessMatrix[i][pathTailCol] == 0) && !rowsVisited[i] |==> (excessMatrix[i][pathTailCol] == 0)
3170:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):630:(excessMatrix[i][pathTailCol] == 0) && !rowsVisited[i] |==> !rowsVisited[i]
3171:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):633:extendMatchingOL(i, pathTailCol) |==> false
3172:COR:extending:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):637:extending |==> false
3173:COR:extending:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):637:extending |==> true
3174:LVR:TRUE:FALSE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):638:true |==> false
3175:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):638:return Config.__M_NO == 0 && Config.COVERED(3174, 3174) ? true : Config.__M_NO == 3174 ? false : true; |==> <NO-OP>
3176:LVR:FALSE:TRUE:org.jgrapht.alg.KuhnMunkresMinimalWeightBipartitePerfectMatching$KuhnMunkresMatrixImplementation$MatchExtender@extendMatchingEL(int):643:false |==> true
3177:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut:62:EdmondsKarpMaximumFlow.DEFAULT_EPSILON |==> 0.0
3178:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@<init>(org.jgrapht.DirectedGraph<V,E>):68:this.ekMaxFlow = new EdmondsKarpMaximumFlow<V, E>(graph) |==> <NO-OP>
3179:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@<init>(org.jgrapht.DirectedGraph<V,E>):69:this.graph = graph |==> <NO-OP>
3180:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@<init>(org.jgrapht.DirectedGraph<V,E>,double):74:this.ekMaxFlow = new EdmondsKarpMaximumFlow<V, E>(graph) |==> <NO-OP>
3181:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@<init>(org.jgrapht.DirectedGraph<V,E>,double):75:this.graph = graph |==> <NO-OP>
3182:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@<init>(org.jgrapht.DirectedGraph<V,E>,double):76:this.epsilon = epsilon |==> <NO-OP>
3183:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):89:this.source = source |==> <NO-OP>
3184:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):90:this.sink = sink |==> <NO-OP>
3185:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):91:minCut = new HashSet<V>() |==> <NO-OP>
3186:STD:<CALL>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):94:ekMaxFlow.calculateMaximumFlow(source, sink) |==> <NO-OP>
3187:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):95:this.cutWeight = ekMaxFlow.getMaximumFlowValue() |==> <NO-OP>
3188:EVR:<METHOD_INVOCATION(java.util.Map<E,java.lang.Double>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):96:ekMaxFlow.getMaximumFlow() |==> null
3189:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):98:new LinkedList<V>() |==> null
3190:STD:<CALL>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):99:processQueue.add(source) |==> <NO-OP>
3191:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):102:processQueue.remove() |==> null
3192:COR:minCut.contains(vertex):TRUE:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):103:minCut.contains(vertex) |==> false
3193:COR:minCut.contains(vertex):FALSE:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):103:minCut.contains(vertex) |==> true
3194:STD:<CONT>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):104:continue; |==> <NO-OP>
3195:STD:<CALL>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):106:minCut.add(vertex) |==> <NO-OP>
3196:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):110:new HashSet<E>(graph.outgoingEdgesOf(vertex)) |==> null
3197:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):111:outEdges.iterator() |==> null
3198:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):112:it.next() |==> null
3199:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):113:graph.getEdgeWeight(edge) |==> 0.0
3200:EVR:<METHOD_INVOCATION(java.lang.Double)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):114:maxFlow.get(edge) |==> null
3201:AOR:-(double,double):%(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):115:edgeCapacity - flowValue |==> edgeCapacity % flowValue
3202:AOR:-(double,double):*(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):115:edgeCapacity - flowValue |==> edgeCapacity * flowValue
3203:AOR:-(double,double):+(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):115:edgeCapacity - flowValue |==> edgeCapacity + flowValue
3204:AOR:-(double,double):/(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):115:edgeCapacity - flowValue |==> edgeCapacity / flowValue
3205:ROR:<=(double,double):<(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):115:Math.abs(edgeCapacity - flowValue) <= epsilon |==> Math.abs(edgeCapacity - flowValue) < epsilon
3206:ROR:<=(double,double):==(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):115:Math.abs(edgeCapacity - flowValue) <= epsilon |==> Math.abs(edgeCapacity - flowValue) == epsilon
3207:ROR:<=(double,double):TRUE(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):115:Math.abs(edgeCapacity - flowValue) <= epsilon |==> true
3208:STD:<CALL>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):116:it.remove() |==> <NO-OP>
3209:STD:<CALL>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):120:processQueue.add(Graphs.getOppositeVertex(graph, edge, vertex)) |==> <NO-OP>
3210:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):124:new HashSet<E>(graph.incomingEdgesOf(vertex)) |==> null
3211:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):125:inEdges.iterator() |==> null
3212:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):126:it.next() |==> null
3213:EVR:<METHOD_INVOCATION(java.lang.Double)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):129:maxFlow.get(edge) |==> null
3214:ROR:<=(double,double):<(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):130:flowValue <= epsilon |==> flowValue < epsilon
3215:ROR:<=(double,double):==(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):130:flowValue <= epsilon |==> flowValue == epsilon
3216:ROR:<=(double,double):TRUE(double,double):org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):130:flowValue <= epsilon |==> true
3217:STD:<CALL>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):131:it.remove() |==> <NO-OP>
3218:STD:<CALL>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@computeMinCut(V,V):135:processQueue.add(Graphs.getOppositeVertex(graph, edge, vertex)) |==> <NO-OP>
3219:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@getSourcePartition():146:Collections.unmodifiableSet(minCut) |==> null
3220:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.MinSourceSinkCut@getSinkPartition():156:minCut == null |==> false
3221:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@getSinkPartition():157:return null; |==> <NO-OP>
3222:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@getSinkPartition():159:new HashSet<V>(graph.vertexSet()) |==> null
3223:STD:<CALL>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@getSinkPartition():160:set.removeAll(minCut) |==> <NO-OP>
3224:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@getSinkPartition():161:Collections.unmodifiableSet(set) |==> null
3225:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@getCutWeight():171:cutWeight |==> 0.0
3226:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.MinSourceSinkCut@getCutEdges():185:minCut == null |==> false
3227:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@getCutEdges():186:return null; |==> <NO-OP>
3228:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@getCutEdges():188:new HashSet<E>() |==> null
3229:COR:minCut.contains(Graphs.getOppositeVertex(graph, edge, vertex)):TRUE:org.jgrapht.alg.MinSourceSinkCut@getCutEdges():191:minCut.contains(Graphs.getOppositeVertex(graph, edge, vertex)) |==> false
3230:COR:minCut.contains(Graphs.getOppositeVertex(graph, edge, vertex)):FALSE:org.jgrapht.alg.MinSourceSinkCut@getCutEdges():191:minCut.contains(Graphs.getOppositeVertex(graph, edge, vertex)) |==> true
3231:STD:<CALL>:<NO-OP>:org.jgrapht.alg.MinSourceSinkCut@getCutEdges():194:cutEdges.add(edge) |==> <NO-OP>
3232:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@getCutEdges():198:Collections.unmodifiableSet(cutEdges) |==> null
3233:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@getCurrentSource():208:source |==> null
3234:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.MinSourceSinkCut@getCurrentSink():218:sink |==> null
3235:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):67:new HashSet<E>(g.vertexSet().size()) |==> null
3236:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):69:new HashSet<V>(g.vertexSet()) |==> null
3237:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):72:unspanned.iterator() |==> null
3238:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):74:ri.next() |==> null
3239:STD:<CALL>:<NO-OP>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):76:ri.remove() |==> <NO-OP>
3240:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.PrimMinimumSpanningTree$1@compare(E,E):88:Double.valueOf(g.getEdgeWeight(lop)).compareTo(g.getEdgeWeight(rop)) |==> 0
3241:STD:<CALL>:<NO-OP>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):92:dangling.addAll(g.edgesOf(root)) |==> <NO-OP>
3242:COR:unspanned.contains(s = g.getEdgeSource(next)):TRUE:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):97:unspanned.contains(s = g.getEdgeSource(next)) |==> false
3243:COR:unspanned.contains(s = g.getEdgeSource(next)):FALSE:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):97:unspanned.contains(s = g.getEdgeSource(next)) |==> true
3244:COR:unspanned.contains(t):TRUE:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):103:unspanned.contains(t) |==> false
3245:COR:unspanned.contains(t):FALSE:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):103:unspanned.contains(t) |==> true
3246:STD:<CONT>:<NO-OP>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):104:continue; |==> <NO-OP>
3247:STD:<CALL>:<NO-OP>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):107:this.minimumSpanningTreeEdgeSet.add(next) |==> <NO-OP>
3248:STD:<CALL>:<NO-OP>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):109:unspanned.remove(t) |==> <NO-OP>
3249:COR:g.getEdgeSource(e).equals(t):TRUE:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):113:g.getEdgeSource(e).equals(t) |==> false
3250:COR:g.getEdgeSource(e).equals(t):FALSE:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):113:g.getEdgeSource(e).equals(t) |==> true
3251:COR:unspanned.contains(g.getEdgeSource(e).equals(t) ? g.getEdgeTarget(e) : g.getEdgeSource(e)):TRUE:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):112:unspanned.contains(g.getEdgeSource(e).equals(t) ? g.getEdgeTarget(e) : g.getEdgeSource(e)) |==> false
3252:COR:unspanned.contains(g.getEdgeSource(e).equals(t) ? g.getEdgeTarget(e) : g.getEdgeSource(e)):FALSE:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):112:unspanned.contains(g.getEdgeSource(e).equals(t) ? g.getEdgeTarget(e) : g.getEdgeSource(e)) |==> true
3253:STD:<CALL>:<NO-OP>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):117:dangling.add(e) |==> <NO-OP>
3254:LVR:0:POS:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):123:0 |==> 1
3255:LVR:0:NEG:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):123:0 |==> -1
3256:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):125:spanningTreeWeight += g.getEdgeWeight(e) |==> <NO-OP>
3257:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.PrimMinimumSpanningTree@<init>(org.jgrapht.Graph<V,E>):128:spanningTreeWeight |==> 0.0
3258:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.PrimMinimumSpanningTree@getMinimumSpanningTreeEdgeSet():135:Collections.unmodifiableSet(minimumSpanningTreeEdgeSet) |==> null
3259:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.PrimMinimumSpanningTree@getMinimumSpanningTreeTotalWeight():140:minimumSpanningTreeTotalWeight |==> 0.0
3260:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut:60:Double.POSITIVE_INFINITY |==> 0.0
3261:LVR:POS:0:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):75:2 |==> 0
3262:LVR:POS:NEG:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):75:2 |==> -2
3263:ROR:<(int,int):!=(int,int):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):75:graph.vertexSet().size() < 2 |==> graph.vertexSet().size() != 2
3264:ROR:<(int,int):<=(int,int):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):75:graph.vertexSet().size() < 2 |==> graph.vertexSet().size() <= 2
3265:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):75:graph.vertexSet().size() < 2 |==> false
3266:EVR:<NEW_CLASS(org.jgrapht.graph.SimpleWeightedGraph<java.util.Set<V>,org.jgrapht.graph.DefaultWeightedEdge>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):82:new SimpleWeightedGraph<Set<V>, DefaultWeightedEdge>(DefaultWeightedEdge.class) |==> null
3267:EVR:<NEW_CLASS(java.util.HashMap<V,java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):84:new HashMap<V, Set<V>>() |==> null
3268:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):86:new HashSet<V>() |==> null
3269:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):87:list.add(v) |==> <NO-OP>
3270:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):88:vertexMap.put(v, list) |==> <NO-OP>
3271:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):89:workingGraph.addVertex(list) |==> <NO-OP>
3272:LVR:0:POS:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):92:0.0 |==> 1.0
3273:LVR:0:NEG:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):92:0.0 |==> -1.0
3274:ROR:<(double,double):!=(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):92:graph.getEdgeWeight(e) < 0.0 |==> graph.getEdgeWeight(e) != 0.0
3275:ROR:<(double,double):<=(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):92:graph.getEdgeWeight(e) < 0.0 |==> graph.getEdgeWeight(e) <= 0.0
3276:ROR:<(double,double):FALSE(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):92:graph.getEdgeWeight(e) < 0.0 |==> false
3277:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):97:graph.getEdgeSource(e) |==> null
3278:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):98:vertexMap.get(s) |==> null
3279:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):99:graph.getEdgeTarget(e) |==> null
3280:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):100:vertexMap.get(t) |==> null
3281:EVR:<METHOD_INVOCATION(org.jgrapht.graph.DefaultWeightedEdge)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):104:workingGraph.getEdge(sNew, tNew) |==> null
3282:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):105:eNew == null |==> false
3283:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):106:eNew = workingGraph.addEdge(sNew, tNew) |==> <NO-OP>
3284:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):107:workingGraph.setEdgeWeight(eNew, graph.getEdgeWeight(e)) |==> <NO-OP>
3285:AOR:+(double,double):%(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):111:workingGraph.getEdgeWeight(eNew) + graph.getEdgeWeight(e) |==> workingGraph.getEdgeWeight(eNew) % graph.getEdgeWeight(e)
3286:AOR:+(double,double):*(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):111:workingGraph.getEdgeWeight(eNew) + graph.getEdgeWeight(e) |==> workingGraph.getEdgeWeight(eNew) * graph.getEdgeWeight(e)
3287:AOR:+(double,double):-(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):111:workingGraph.getEdgeWeight(eNew) + graph.getEdgeWeight(e) |==> workingGraph.getEdgeWeight(eNew) - graph.getEdgeWeight(e)
3288:AOR:+(double,double):/(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):111:workingGraph.getEdgeWeight(eNew) + graph.getEdgeWeight(e) |==> workingGraph.getEdgeWeight(eNew) / graph.getEdgeWeight(e)
3289:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):109:workingGraph.setEdgeWeight(eNew, workingGraph.getEdgeWeight(eNew) + graph.getEdgeWeight(e)) |==> <NO-OP>
3290:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):116:workingGraph.vertexSet().iterator().next() |==> null
3291:LVR:POS:0:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):118:1 |==> 0
3292:LVR:POS:NEG:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):118:1 |==> -1
3293:ROR:>(int,int):!=(int,int):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):118:workingGraph.vertexSet().size() > 1 |==> workingGraph.vertexSet().size() != 1
3294:ROR:>(int,int):>=(int,int):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):118:workingGraph.vertexSet().size() > 1 |==> workingGraph.vertexSet().size() >= 1
3295:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):118:workingGraph.vertexSet().size() > 1 |==> false
3296:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@<init>(org.jgrapht.UndirectedGraph<V,E>):119:minimumCutPhase(a) |==> <NO-OP>
3297:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):131:a |==> null
3298:EVR:<NEW_CLASS(java.util.PriorityQueue<org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):135:new PriorityQueue<VertexAndWeight>() |==> null
3299:EVR:<NEW_CLASS(java.util.HashMap<java.util.Set<V>,org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):139:new HashMap<Set<V>, VertexAndWeight>() |==> null
3300:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):143:v == a |==> false
3301:STD:<CONT>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):144:continue; |==> <NO-OP>
3302:EVR:<METHOD_INVOCATION(org.jgrapht.graph.DefaultWeightedEdge)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):146:workingGraph.getEdge(v, a) |==> null
3303:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):147:e == null |==> false
3304:LVR:0:POS:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):147:0.0 |==> 1.0
3305:LVR:0:NEG:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):147:0.0 |==> -1.0
3306:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):148:e != null |==> true
3307:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):149:queue.add(vandw) |==> <NO-OP>
3308:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):150:dmap.put(v, vandw) |==> <NO-OP>
3309:EVR:<MEMBER_SELECT(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):156:queue.poll().vertex |==> null
3310:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):157:dmap.remove(v) |==> <NO-OP>
3311:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):159:beforelast = last |==> <NO-OP>
3312:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):160:last = v |==> <NO-OP>
3313:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):163:Graphs.getOppositeVertex(workingGraph, e, v) |==> null
3314:EVR:<METHOD_INVOCATION(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):164:dmap.get(vc) |==> null
3315:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):165:vcandw != null |==> true
3316:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):166:queue.remove(vcandw) |==> <NO-OP>
3317:LVR:TRUE:FALSE:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):167:true |==> false
3318:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):167:vcandw.active = true |==> <NO-OP>
3319:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):168:vcandw.weight += workingGraph.getEdgeWeight(e) |==> <NO-OP>
3320:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):169:queue.add(vcandw) |==> <NO-OP>
3321:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):175:vertexWeight(last) |==> 0.0
3322:ROR:<(double,double):!=(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):176:w < bestCutWeight |==> w != bestCutWeight
3323:ROR:<(double,double):<=(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):176:w < bestCutWeight |==> w <= bestCutWeight
3324:ROR:<(double,double):FALSE(double,double):org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):176:w < bestCutWeight |==> false
3325:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):177:bestCutWeight = w |==> <NO-OP>
3326:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):178:bestCut = last |==> <NO-OP>
3327:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@minimumCutPhase(java.util.Set<V>):182:mergeVertices(beforelast, last) |==> <NO-OP>
3328:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minCutWeight():190:bestCutWeight |==> 0.0
3329:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@minCut():198:bestCut |==> null
3330:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):208:new HashSet<V>() |==> null
3331:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):209:set.addAll(s) |==> <NO-OP>
3332:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):210:set.addAll(t) |==> <NO-OP>
3333:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):211:workingGraph.addVertex(set) |==> <NO-OP>
3334:LVR:0:POS:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):214:0.0 |==> 1.0
3335:LVR:0:NEG:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):214:0.0 |==> -1.0
3336:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):216:s != v |==> true
3337:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):216:t != v |==> true
3338:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):216:(s != v) && (t != v) |==> (s != v) == (t != v)
3339:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):216:(s != v) && (t != v) |==> false
3340:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):216:(s != v) && (t != v) |==> (s != v)
3341:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):216:(s != v) && (t != v) |==> (t != v)
3342:LVR:0:POS:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):217:0.0 |==> 1.0
3343:LVR:0:NEG:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):217:0.0 |==> -1.0
3344:EVR:<METHOD_INVOCATION(org.jgrapht.graph.DefaultWeightedEdge)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):218:workingGraph.getEdge(t, v) |==> null
3345:EVR:<METHOD_INVOCATION(org.jgrapht.graph.DefaultWeightedEdge)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):219:workingGraph.getEdge(s, v) |==> null
3346:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):220:etv != null |==> true
3347:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):221:neww += workingGraph.getEdgeWeight(etv) |==> <NO-OP>
3348:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):223:esv != null |==> true
3349:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):224:neww += workingGraph.getEdgeWeight(esv) |==> <NO-OP>
3350:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):226:etv != null |==> true
3351:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):226:esv != null |==> true
3352:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):226:(etv != null) || (esv != null) |==> (etv != null) != (esv != null)
3353:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):226:(etv != null) || (esv != null) |==> (etv != null)
3354:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):226:(etv != null) || (esv != null) |==> (esv != null)
3355:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):226:(etv != null) || (esv != null) |==> true
3356:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):227:wsum += neww |==> <NO-OP>
3357:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):228:workingGraph.setEdgeWeight(workingGraph.addEdge(set, v), neww) |==> <NO-OP>
3358:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):236:workingGraph.removeVertex(t) |==> <NO-OP>
3359:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):237:workingGraph.removeVertex(s) |==> <NO-OP>
3360:LVR:FALSE:TRUE:org.jgrapht.alg.StoerWagnerMinimumCut@mergeVertices(java.util.Set<V>,java.util.Set<V>):239:false |==> true
3361:LVR:0:POS:org.jgrapht.alg.StoerWagnerMinimumCut@vertexWeight(java.util.Set<V>):247:0.0 |==> 1.0
3362:LVR:0:NEG:org.jgrapht.alg.StoerWagnerMinimumCut@vertexWeight(java.util.Set<V>):247:0.0 |==> -1.0
3363:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut@vertexWeight(java.util.Set<V>):249:wsum += workingGraph.getEdgeWeight(e) |==> <NO-OP>
3364:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut@vertexWeight(java.util.Set<V>):251:wsum |==> 0.0
3365:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@<init>(java.util.Set<V>,double,boolean):268:this.vertex = v |==> <NO-OP>
3366:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@<init>(java.util.Set<V>,double,boolean):269:this.weight = w |==> <NO-OP>
3367:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@<init>(java.util.Set<V>,double,boolean):270:this.active = active |==> <NO-OP>
3368:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):279:this.active && that.active |==> this.active == that.active
3369:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):279:this.active && that.active |==> false
3370:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):279:this.active && that.active |==> this.active
3371:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):279:this.active && that.active |==> that.active
3372:ORU:-(int):+(int):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):280:-Double.compare(weight, that.weight) |==> +Double.compare(weight, that.weight)
3373:ORU:-(int):~(int):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):280:-Double.compare(weight, that.weight) |==> ~Double.compare(weight, that.weight)
3374:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):280:return Config.__M_NO == 3373 ? ~Double.compare(weight, that.weight) : Config.__M_NO == 3372 ? +Double.compare(weight, that.weight) : Config.__M_NO == 0 && Config.COVERED(3372, 3373) ? -Double.compare(weight, that.weight) : -Double.compare(weight, that.weight); |==> <NO-OP>
3375:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):282:this.active && !that.active |==> this.active == !that.active
3376:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):282:this.active && !that.active |==> false
3377:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):282:this.active && !that.active |==> this.active
3378:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):282:this.active && !that.active |==> !that.active
3379:LVR:NEG:0:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):283:-1 |==> 0
3380:LVR:NEG:POS:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):283:-1 |==> 1
3381:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):283:return Config.__M_NO == 0 && Config.COVERED(3379, 3380) ? -1 : Config.__M_NO == 3380 ? 1 : Config.__M_NO == 3379 ? 0 : -1; |==> <NO-OP>
3382:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):285:!this.active && that.active |==> !this.active == that.active
3383:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):285:!this.active && that.active |==> false
3384:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):285:!this.active && that.active |==> !this.active
3385:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):285:!this.active && that.active |==> that.active
3386:ORU:+(int):-(int):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):286:+1 |==> -1
3387:ORU:+(int):~(int):org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):286:+1 |==> ~1
3388:LVR:POS:0:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):286:1 |==> 0
3389:LVR:POS:NEG:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):286:1 |==> -1
3390:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):286:return Config.__M_NO == 3387 ? ~1 : Config.__M_NO == 3386 ? -1 : Config.__M_NO == 0 && Config.COVERED(3386, 3387) ? +1 : +(Config.__M_NO == 0 && Config.COVERED(3388, 3389) ? 1 : Config.__M_NO == 3389 ? -1 : Config.__M_NO == 3388 ? 0 : 1); |==> <NO-OP>
3391:LVR:0:POS:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):290:0 |==> 1
3392:LVR:0:NEG:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@compareTo(org.jgrapht.alg.StoerWagnerMinimumCut<V,E>.VertexAndWeight):290:0 |==> -1
3393:EVR:<PLUS(java.lang.String)>:<DEFAULT>:org.jgrapht.alg.StoerWagnerMinimumCut$VertexAndWeight@toString():295:"(" + vertex + ", " + weight + ")" |==> null
3394:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.graph.DefaultWeightedEdge:58:WeightedGraph.DEFAULT_EDGE_WEIGHT |==> 0.0
3395:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.graph.DefaultWeightedEdge@getWeight():70:weight |==> 0.0
3396:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StrongConnectivityInspector@<init>(org.jgrapht.DirectedGraph<V,E>):91:directedGraph == null |==> false
3397:EVR:<IDENTIFIER(org.jgrapht.DirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@<init>(org.jgrapht.DirectedGraph<V,E>):95:directedGraph |==> null
3398:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@<init>(org.jgrapht.DirectedGraph<V,E>):96:vertexToVertexData = null |==> <NO-OP>
3399:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@<init>(org.jgrapht.DirectedGraph<V,E>):97:orderedVertices = null |==> <NO-OP>
3400:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@<init>(org.jgrapht.DirectedGraph<V,E>):98:stronglyConnectedSets = null |==> <NO-OP>
3401:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@<init>(org.jgrapht.DirectedGraph<V,E>):99:stronglyConnectedSubgraphs = null |==> <NO-OP>
3402:EVR:<IDENTIFIER(org.jgrapht.DirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@getGraph():111:graph |==> null
3403:LVR:POS:0:org.jgrapht.alg.StrongConnectivityInspector@isStronglyConnected():122:1 |==> 0
3404:LVR:POS:NEG:org.jgrapht.alg.StrongConnectivityInspector@isStronglyConnected():122:1 |==> -1
3405:ROR:==(int,int):<=(int,int):org.jgrapht.alg.StrongConnectivityInspector@isStronglyConnected():122:stronglyConnectedSets().size() == 1 |==> stronglyConnectedSets().size() <= 1
3406:ROR:==(int,int):>=(int,int):org.jgrapht.alg.StrongConnectivityInspector@isStronglyConnected():122:stronglyConnectedSets().size() == 1 |==> stronglyConnectedSets().size() >= 1
3407:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.StrongConnectivityInspector@isStronglyConnected():122:stronglyConnectedSets().size() == 1 |==> false
3408:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():135:stronglyConnectedSets == null |==> false
3409:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():136:orderedVertices = new LinkedList<VertexData<V>>() |==> <NO-OP>
3410:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():137:stronglyConnectedSets = new Vector<Set<V>>() |==> <NO-OP>
3411:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():140:createVertexData() |==> <NO-OP>
3412:COR:data.isDiscovered():TRUE:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():145:data.isDiscovered() |==> false
3413:COR:data.isDiscovered():FALSE:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():145:data.isDiscovered() |==> true
3414:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():146:dfsVisit(graph, data, null) |==> <NO-OP>
3415:EVR:<NEW_CLASS(org.jgrapht.graph.EdgeReversedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():152:new EdgeReversedGraph<V, E>(graph) |==> null
3416:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():155:resetVertexData() |==> <NO-OP>
3417:COR:data.isDiscovered():TRUE:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():161:data.isDiscovered() |==> false
3418:COR:data.isDiscovered():FALSE:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():161:data.isDiscovered() |==> true
3419:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():163:new HashSet<V>() |==> null
3420:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():164:stronglyConnectedSets.add(set) |==> <NO-OP>
3421:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():165:dfsVisit(inverseGraph, data, set) |==> <NO-OP>
3422:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():170:orderedVertices = null |==> <NO-OP>
3423:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():171:vertexToVertexData = null |==> <NO-OP>
3424:EVR:<IDENTIFIER(java.util.List<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSets():174:stronglyConnectedSets |==> null
3425:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSubgraphs():192:stronglyConnectedSubgraphs == null |==> false
3426:EVR:<METHOD_INVOCATION(java.util.List<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSubgraphs():193:stronglyConnectedSets() |==> null
3427:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSubgraphs():194:stronglyConnectedSubgraphs = new Vector<DirectedSubgraph<V, E>>(sets.size()) |==> <NO-OP>
3428:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSubgraphs():198:stronglyConnectedSubgraphs.add(new DirectedSubgraph<V, E>(graph, set, null)) |==> <NO-OP>
3429:EVR:<IDENTIFIER(java.util.List<org.jgrapht.graph.DirectedSubgraph<V,E>>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@stronglyConnectedSubgraphs():206:stronglyConnectedSubgraphs |==> null
3430:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@createVertexData():216:vertexToVertexData = new HashMap<V, VertexData<V>>(graph.vertexSet().size()) |==> <NO-OP>
3431:LVR:FALSE:TRUE:org.jgrapht.alg.StrongConnectivityInspector@createVertexData():222:false |==> true
3432:LVR:FALSE:TRUE:org.jgrapht.alg.StrongConnectivityInspector@createVertexData():222:false |==> true
3433:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@createVertexData():220:vertexToVertexData.put(vertex, new VertexData2<V>(vertex, false, false)) |==> <NO-OP>
3434:EVR:<NEW_CLASS(java.util.ArrayDeque<org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):237:new ArrayDeque<VertexData<V>>() |==> null
3435:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):238:stack.add(vertexData) |==> <NO-OP>
3436:EVR:<METHOD_INVOCATION(org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):241:stack.removeLast() |==> null
3437:COR:data.isDiscovered():TRUE:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):243:data.isDiscovered() |==> false
3438:COR:data.isDiscovered():FALSE:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):243:data.isDiscovered() |==> true
3439:LVR:TRUE:FALSE:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):244:true |==> false
3440:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):244:data.setDiscovered(true) |==> <NO-OP>
3441:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):246:vertices != null |==> true
3442:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):247:vertices.add(data.getVertex()) |==> <NO-OP>
3443:LVR:TRUE:FALSE:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):250:true |==> false
3444:LVR:TRUE:FALSE:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):250:true |==> false
3445:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):250:stack.add(new VertexData1<V>(data, true, true)) |==> <NO-OP>
3446:EVR:<METHOD_INVOCATION(org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):255:vertexToVertexData.get(visitedGraph.getEdgeTarget(edge)) |==> null
3447:COR:targetData.isDiscovered():TRUE:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):258:targetData.isDiscovered() |==> false
3448:COR:targetData.isDiscovered():FALSE:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):258:targetData.isDiscovered() |==> true
3449:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):260:stack.add(targetData) |==> <NO-OP>
3450:COR:data.isFinished():TRUE:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):263:data.isFinished() |==> false
3451:COR:data.isFinished():FALSE:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):263:data.isFinished() |==> true
3452:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):264:vertices == null |==> false
3453:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@dfsVisit(org.jgrapht.DirectedGraph<V,E>,org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,java.util.Set<V>):265:orderedVertices.addFirst(data.getFinishedData()) |==> <NO-OP>
3454:LVR:FALSE:TRUE:org.jgrapht.alg.StrongConnectivityInspector@resetVertexData():277:false |==> true
3455:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@resetVertexData():277:data.setDiscovered(false) |==> <NO-OP>
3456:LVR:FALSE:TRUE:org.jgrapht.alg.StrongConnectivityInspector@resetVertexData():278:false |==> true
3457:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector@resetVertexData():278:data.setFinished(false) |==> <NO-OP>
3458:LVR:0:POS:org.jgrapht.alg.StrongConnectivityInspector$VertexData@<init>(boolean,boolean):295:0 |==> 1
3459:LVR:0:NEG:org.jgrapht.alg.StrongConnectivityInspector$VertexData@<init>(boolean,boolean):295:0 |==> -1
3460:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector$VertexData@<init>(boolean,boolean):295:this.bitfield = 0 |==> <NO-OP>
3461:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector$VertexData@<init>(boolean,boolean):296:setDiscovered(discovered) |==> <NO-OP>
3462:STD:<CALL>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector$VertexData@<init>(boolean,boolean):297:setFinished(finished) |==> <NO-OP>
3463:LVR:POS:0:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():302:1 |==> 0
3464:LVR:POS:NEG:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():302:1 |==> -1
3465:LOR:&(int,int):^(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():302:bitfield & 1 |==> bitfield ^ 1
3466:LOR:&(int,int):|(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():302:bitfield & 1 |==> bitfield | 1
3467:LVR:POS:0:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():302:1 |==> 0
3468:LVR:POS:NEG:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():302:1 |==> -1
3469:ROR:==(int,int):<=(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():302:(bitfield & 1) == 1 |==> (bitfield & 1) <= 1
3470:ROR:==(int,int):>=(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():302:(bitfield & 1) == 1 |==> (bitfield & 1) >= 1
3471:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():302:(bitfield & 1) == 1 |==> false
3472:LVR:TRUE:FALSE:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():303:true |==> false
3473:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():303:return Config.__M_NO == 0 && Config.COVERED(3472, 3472) ? true : Config.__M_NO == 3472 ? false : true; |==> <NO-OP>
3474:LVR:FALSE:TRUE:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isDiscovered():305:false |==> true
3475:LVR:POS:0:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():310:2 |==> 0
3476:LVR:POS:NEG:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():310:2 |==> -2
3477:LOR:&(int,int):^(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():310:bitfield & 2 |==> bitfield ^ 2
3478:LOR:&(int,int):|(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():310:bitfield & 2 |==> bitfield | 2
3479:LVR:POS:0:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():310:2 |==> 0
3480:LVR:POS:NEG:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():310:2 |==> -2
3481:ROR:==(int,int):<=(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():310:(bitfield & 2) == 2 |==> (bitfield & 2) <= 2
3482:ROR:==(int,int):>=(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():310:(bitfield & 2) == 2 |==> (bitfield & 2) >= 2
3483:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():310:(bitfield & 2) == 2 |==> false
3484:LVR:TRUE:FALSE:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():311:true |==> false
3485:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():311:return Config.__M_NO == 0 && Config.COVERED(3484, 3484) ? true : Config.__M_NO == 3484 ? false : true; |==> <NO-OP>
3486:LVR:FALSE:TRUE:org.jgrapht.alg.StrongConnectivityInspector$VertexData@isFinished():313:false |==> true
3487:COR:discovered:TRUE:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):318:discovered |==> false
3488:COR:discovered:FALSE:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):318:discovered |==> true
3489:LVR:POS:0:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):319:1 |==> 0
3490:LVR:POS:NEG:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):319:1 |==> -1
3491:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):319:bitfield |= 1 |==> <NO-OP>
3492:ORU:~(int):+(int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):321:~1 |==> +1
3493:ORU:~(int):-(int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):321:~1 |==> -1
3494:LVR:POS:0:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):321:1 |==> 0
3495:LVR:POS:NEG:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):321:1 |==> -1
3496:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setDiscovered(boolean):321:bitfield &= ~1 |==> <NO-OP>
3497:COR:finished:TRUE:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):327:finished |==> false
3498:COR:finished:FALSE:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):327:finished |==> true
3499:LVR:POS:0:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):328:2 |==> 0
3500:LVR:POS:NEG:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):328:2 |==> -2
3501:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):328:bitfield |= 2 |==> <NO-OP>
3502:ORU:~(int):+(int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):330:~2 |==> +2
3503:ORU:~(int):-(int):org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):330:~2 |==> -2
3504:LVR:POS:0:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):330:2 |==> 0
3505:LVR:POS:NEG:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):330:2 |==> -2
3506:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.StrongConnectivityInspector$VertexData@setFinished(boolean):330:bitfield &= ~2 |==> <NO-OP>
3507:EVR:<IDENTIFIER(org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector$VertexData1@<init>(org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>,boolean,boolean):350:finishedData |==> null
3508:EVR:<IDENTIFIER(org.jgrapht.alg.StrongConnectivityInspector.VertexData<V>)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector$VertexData1@getFinishedData():355:finishedData |==> null
3509:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector$VertexData2@<init>(V,boolean,boolean):375:vertex |==> null
3510:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.StrongConnectivityInspector$VertexData2@getVertex():385:vertex |==> null
3511:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedSubgraph@inDegreeOf(V):87:assertVertexExist(vertex) |==> <NO-OP>
3512:LVR:0:POS:org.jgrapht.graph.DirectedSubgraph@inDegreeOf(V):89:0 |==> 1
3513:LVR:0:NEG:org.jgrapht.graph.DirectedSubgraph@inDegreeOf(V):89:0 |==> -1
3514:COR:containsEdge(e):TRUE:org.jgrapht.graph.DirectedSubgraph@inDegreeOf(V):92:containsEdge(e) |==> false
3515:COR:containsEdge(e):FALSE:org.jgrapht.graph.DirectedSubgraph@inDegreeOf(V):92:containsEdge(e) |==> true
3516:STD:<INC>:<NO-OP>:org.jgrapht.graph.DirectedSubgraph@inDegreeOf(V):93:degree++ |==> <NO-OP>
3517:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.graph.DirectedSubgraph@inDegreeOf(V):97:degree |==> 0
3518:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedSubgraph@incomingEdgesOf(V):105:assertVertexExist(vertex) |==> <NO-OP>
3519:EVR:<NEW_CLASS(org.jgrapht.util.ArrayUnenforcedSet<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedSubgraph@incomingEdgesOf(V):107:new ArrayUnenforcedSet<E>() |==> null
3520:COR:containsEdge(e):TRUE:org.jgrapht.graph.DirectedSubgraph@incomingEdgesOf(V):110:containsEdge(e) |==> false
3521:COR:containsEdge(e):FALSE:org.jgrapht.graph.DirectedSubgraph@incomingEdgesOf(V):110:containsEdge(e) |==> true
3522:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedSubgraph@incomingEdgesOf(V):111:edges.add(e) |==> <NO-OP>
3523:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedSubgraph@incomingEdgesOf(V):115:edges |==> null
3524:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedSubgraph@outDegreeOf(V):123:assertVertexExist(vertex) |==> <NO-OP>
3525:LVR:0:POS:org.jgrapht.graph.DirectedSubgraph@outDegreeOf(V):125:0 |==> 1
3526:LVR:0:NEG:org.jgrapht.graph.DirectedSubgraph@outDegreeOf(V):125:0 |==> -1
3527:COR:containsEdge(e):TRUE:org.jgrapht.graph.DirectedSubgraph@outDegreeOf(V):128:containsEdge(e) |==> false
3528:COR:containsEdge(e):FALSE:org.jgrapht.graph.DirectedSubgraph@outDegreeOf(V):128:containsEdge(e) |==> true
3529:STD:<INC>:<NO-OP>:org.jgrapht.graph.DirectedSubgraph@outDegreeOf(V):129:degree++ |==> <NO-OP>
3530:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.graph.DirectedSubgraph@outDegreeOf(V):133:degree |==> 0
3531:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedSubgraph@outgoingEdgesOf(V):141:assertVertexExist(vertex) |==> <NO-OP>
3532:EVR:<NEW_CLASS(org.jgrapht.util.ArrayUnenforcedSet<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedSubgraph@outgoingEdgesOf(V):143:new ArrayUnenforcedSet<E>() |==> null
3533:COR:containsEdge(e):TRUE:org.jgrapht.graph.DirectedSubgraph@outgoingEdgesOf(V):146:containsEdge(e) |==> false
3534:COR:containsEdge(e):FALSE:org.jgrapht.graph.DirectedSubgraph@outgoingEdgesOf(V):146:containsEdge(e) |==> true
3535:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedSubgraph@outgoingEdgesOf(V):147:edges.add(e) |==> <NO-OP>
3536:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedSubgraph@outgoingEdgesOf(V):151:edges |==> null
3537:EVR:<NEW_CLASS(java.util.LinkedHashSet<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph:120:new LinkedHashSet<E>() |==> null
3538:EVR:<NEW_CLASS(java.util.LinkedHashSet<V>)>:<DEFAULT>:org.jgrapht.graph.Subgraph:121:new LinkedHashSet<V>() |==> null
3539:LVR:FALSE:TRUE:org.jgrapht.graph.Subgraph:129:false |==> true
3540:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.Subgraph@<init>(G,java.util.Set<V>,java.util.Set<E>):147:this.base = base |==> <NO-OP>
3541:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@<init>(G,java.util.Set<V>,java.util.Set<E>):149:edgeSubset == null |==> false
3542:LVR:TRUE:FALSE:org.jgrapht.graph.Subgraph@<init>(G,java.util.Set<V>,java.util.Set<E>):150:true |==> false
3543:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.Subgraph@<init>(G,java.util.Set<V>,java.util.Set<E>):150:isInduced = true |==> <NO-OP>
3544:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@<init>(G,java.util.Set<V>,java.util.Set<E>):154:((ListenableGraph<V, E>)base).addGraphListener(new BaseGraphListener()) |==> <NO-OP>
3545:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@<init>(G,java.util.Set<V>,java.util.Set<E>):158:addVerticesUsingFilter(base.vertexSet(), vertexSubset) |==> <NO-OP>
3546:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@<init>(G,java.util.Set<V>,java.util.Set<E>):159:addEdgesUsingFilter(base.edgeSet(), edgeSubset) |==> <NO-OP>
3547:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.Subgraph@getAllEdges(V,V):186:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex) == containsVertex(targetVertex)
3548:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.Subgraph@getAllEdges(V,V):186:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> false
3549:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.Subgraph@getAllEdges(V,V):186:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex)
3550:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.Subgraph@getAllEdges(V,V):186:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(targetVertex)
3551:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.Subgraph@getAllEdges(V,V):187:edges = new ArrayUnenforcedSet<E>() |==> <NO-OP>
3552:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getAllEdges(V,V):189:base.getAllEdges(sourceVertex, targetVertex) |==> null
3553:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getAllEdges(V,V):191:baseEdges.iterator() |==> null
3554:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getAllEdges(V,V):192:iter.next() |==> null
3555:COR:edgeSet.contains(e):TRUE:org.jgrapht.graph.Subgraph@getAllEdges(V,V):194:edgeSet.contains(e) |==> false
3556:COR:edgeSet.contains(e):FALSE:org.jgrapht.graph.Subgraph@getAllEdges(V,V):194:edgeSet.contains(e) |==> true
3557:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@getAllEdges(V,V):196:edges.add(e) |==> <NO-OP>
3558:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getAllEdges(V,V):201:edges |==> null
3559:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getEdge(V,V):209:getAllEdges(sourceVertex, targetVertex) |==> null
3560:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@getEdge(V,V):211:edges == null |==> false
3561:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.Subgraph@getEdge(V,V):211:(edges == null) || edges.isEmpty() |==> (edges == null) != edges.isEmpty()
3562:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.Subgraph@getEdge(V,V):211:(edges == null) || edges.isEmpty() |==> (edges == null)
3563:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.Subgraph@getEdge(V,V):211:(edges == null) || edges.isEmpty() |==> edges.isEmpty()
3564:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.Subgraph@getEdge(V,V):211:(edges == null) || edges.isEmpty() |==> true
3565:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getEdge(V,V):214:edges.iterator().next() |==> null
3566:EVR:<METHOD_INVOCATION(org.jgrapht.EdgeFactory<V,E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getEdgeFactory():223:base.getEdgeFactory() |==> null
3567:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@addEdge(V,V):231:assertVertexExist(sourceVertex) |==> <NO-OP>
3568:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@addEdge(V,V):232:assertVertexExist(targetVertex) |==> <NO-OP>
3569:COR:base.containsEdge(sourceVertex, targetVertex):TRUE:org.jgrapht.graph.Subgraph@addEdge(V,V):234:base.containsEdge(sourceVertex, targetVertex) |==> false
3570:COR:base.containsEdge(sourceVertex, targetVertex):FALSE:org.jgrapht.graph.Subgraph@addEdge(V,V):234:base.containsEdge(sourceVertex, targetVertex) |==> true
3571:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@addEdge(V,V):238:base.getAllEdges(sourceVertex, targetVertex) |==> null
3572:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@addEdge(V,V):240:edges.iterator() |==> null
3573:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.Subgraph@addEdge(V,V):241:iter.next() |==> null
3574:COR:containsEdge(e):TRUE:org.jgrapht.graph.Subgraph@addEdge(V,V):243:containsEdge(e) |==> false
3575:COR:containsEdge(e):FALSE:org.jgrapht.graph.Subgraph@addEdge(V,V):243:containsEdge(e) |==> true
3576:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@addEdge(V,V):244:edgeSet.add(e) |==> <NO-OP>
3577:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.Subgraph@addEdge(V,V):246:return e; |==> <NO-OP>
3578:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@addEdge(V,V,E):258:e == null |==> false
3579:COR:base.containsEdge(e):TRUE:org.jgrapht.graph.Subgraph@addEdge(V,V,E):262:base.containsEdge(e) |==> false
3580:COR:base.containsEdge(e):FALSE:org.jgrapht.graph.Subgraph@addEdge(V,V,E):262:base.containsEdge(e) |==> true
3581:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@addEdge(V,V,E):266:assertVertexExist(sourceVertex) |==> <NO-OP>
3582:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@addEdge(V,V,E):267:assertVertexExist(targetVertex) |==> <NO-OP>
3583:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@addEdge(V,V,E):269:base.getEdgeSource(e) == sourceVertex |==> false
3584:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@addEdge(V,V,E):270:base.getEdgeTarget(e) == targetVertex |==> false
3585:COR:containsEdge(e):TRUE:org.jgrapht.graph.Subgraph@addEdge(V,V,E):272:containsEdge(e) |==> false
3586:COR:containsEdge(e):FALSE:org.jgrapht.graph.Subgraph@addEdge(V,V,E):272:containsEdge(e) |==> true
3587:LVR:FALSE:TRUE:org.jgrapht.graph.Subgraph@addEdge(V,V,E):273:false |==> true
3588:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@addEdge(V,V,E):275:edgeSet.add(e) |==> <NO-OP>
3589:LVR:TRUE:FALSE:org.jgrapht.graph.Subgraph@addEdge(V,V,E):277:true |==> false
3590:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@addVertex(V):297:v == null |==> false
3591:COR:base.containsVertex(v):TRUE:org.jgrapht.graph.Subgraph@addVertex(V):301:base.containsVertex(v) |==> false
3592:COR:base.containsVertex(v):FALSE:org.jgrapht.graph.Subgraph@addVertex(V):301:base.containsVertex(v) |==> true
3593:COR:containsVertex(v):TRUE:org.jgrapht.graph.Subgraph@addVertex(V):305:containsVertex(v) |==> false
3594:COR:containsVertex(v):FALSE:org.jgrapht.graph.Subgraph@addVertex(V):305:containsVertex(v) |==> true
3595:LVR:FALSE:TRUE:org.jgrapht.graph.Subgraph@addVertex(V):306:false |==> true
3596:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@addVertex(V):308:vertexSet.add(v) |==> <NO-OP>
3597:LVR:TRUE:FALSE:org.jgrapht.graph.Subgraph@addVertex(V):310:true |==> false
3598:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.Subgraph@containsEdge(E):319:edgeSet.contains(e) |==> false
3599:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.Subgraph@containsVertex(V):327:vertexSet.contains(v) |==> false
3600:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@edgeSet():335:unmodifiableEdgeSet == null |==> false
3601:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.Subgraph@edgeSet():336:unmodifiableEdgeSet = Collections.unmodifiableSet(edgeSet) |==> <NO-OP>
3602:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@edgeSet():339:unmodifiableEdgeSet |==> null
3603:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@edgesOf(V):347:assertVertexExist(vertex) |==> <NO-OP>
3604:EVR:<NEW_CLASS(org.jgrapht.util.ArrayUnenforcedSet<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@edgesOf(V):349:new ArrayUnenforcedSet<E>() |==> null
3605:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@edgesOf(V):350:base.edgesOf(vertex) |==> null
3606:COR:containsEdge(e):TRUE:org.jgrapht.graph.Subgraph@edgesOf(V):353:containsEdge(e) |==> false
3607:COR:containsEdge(e):FALSE:org.jgrapht.graph.Subgraph@edgesOf(V):353:containsEdge(e) |==> true
3608:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@edgesOf(V):354:edges.add(e) |==> <NO-OP>
3609:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@edgesOf(V):358:edges |==> null
3610:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.Subgraph@removeEdge(E):366:edgeSet.remove(e) |==> false
3611:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.Subgraph@removeEdge(V,V):374:getEdge(sourceVertex, targetVertex) |==> null
3612:COR:edgeSet.remove(e):TRUE:org.jgrapht.graph.Subgraph@removeEdge(V,V):376:edgeSet.remove(e) |==> false
3613:COR:edgeSet.remove(e):FALSE:org.jgrapht.graph.Subgraph@removeEdge(V,V):376:edgeSet.remove(e) |==> true
3614:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.Subgraph@removeVertex(V):387:containsVertex(v) && base.containsVertex(v) |==> containsVertex(v) == base.containsVertex(v)
3615:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.Subgraph@removeVertex(V):387:containsVertex(v) && base.containsVertex(v) |==> false
3616:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.Subgraph@removeVertex(V):387:containsVertex(v) && base.containsVertex(v) |==> containsVertex(v)
3617:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.Subgraph@removeVertex(V):387:containsVertex(v) && base.containsVertex(v) |==> base.containsVertex(v)
3618:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@removeVertex(V):388:removeAllEdges(edgesOf(v)) |==> <NO-OP>
3619:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.Subgraph@removeVertex(V):391:vertexSet.remove(v) |==> false
3620:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@vertexSet():399:unmodifiableVertexSet == null |==> false
3621:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.Subgraph@vertexSet():400:unmodifiableVertexSet = Collections.unmodifiableSet(vertexSet) |==> <NO-OP>
3622:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@vertexSet():403:unmodifiableVertexSet |==> null
3623:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getEdgeSource(E):411:base.getEdgeSource(e) |==> null
3624:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getEdgeTarget(E):419:base.getEdgeTarget(e) |==> null
3625:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):428:edgeSet.iterator() |==> null
3626:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):429:iter.next() |==> null
3627:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):431:base.getEdgeSource(e) |==> null
3628:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):432:base.getEdgeTarget(e) |==> null
3629:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):434:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex) == containsVertex(targetVertex)
3630:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):435:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> false
3631:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):434:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex)
3632:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):435:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(targetVertex)
3633:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):438:filter == null |==> false
3634:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):438:(filter == null) || filter.contains(e) |==> (filter == null) != filter.contains(e)
3635:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):438:(filter == null) || filter.contains(e) |==> (filter == null)
3636:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):438:(filter == null) || filter.contains(e) |==> filter.contains(e)
3637:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):438:(filter == null) || filter.contains(e) |==> true
3638:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):440:containsVertices && edgeIncluded |==> containsVertices == edgeIncluded
3639:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):440:containsVertices && edgeIncluded |==> false
3640:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):440:containsVertices && edgeIncluded |==> containsVertices
3641:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):440:containsVertices && edgeIncluded |==> edgeIncluded
3642:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@addEdgesUsingFilter(java.util.Set<E>,java.util.Set<E>):441:addEdge(sourceVertex, targetVertex, e) |==> <NO-OP>
3643:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.graph.Subgraph@addVerticesUsingFilter(java.util.Set<V>,java.util.Set<V>):450:vertexSet.iterator() |==> null
3644:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.Subgraph@addVerticesUsingFilter(java.util.Set<V>,java.util.Set<V>):451:iter.next() |==> null
3645:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.Subgraph@addVerticesUsingFilter(java.util.Set<V>,java.util.Set<V>):454:filter == null |==> false
3646:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.Subgraph@addVerticesUsingFilter(java.util.Set<V>,java.util.Set<V>):454:(filter == null) || filter.contains(v) |==> (filter == null) != filter.contains(v)
3647:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.Subgraph@addVerticesUsingFilter(java.util.Set<V>,java.util.Set<V>):454:(filter == null) || filter.contains(v) |==> (filter == null)
3648:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.Subgraph@addVerticesUsingFilter(java.util.Set<V>,java.util.Set<V>):454:(filter == null) || filter.contains(v) |==> filter.contains(v)
3649:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.Subgraph@addVerticesUsingFilter(java.util.Set<V>,java.util.Set<V>):454:(filter == null) || filter.contains(v) |==> true
3650:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@addVerticesUsingFilter(java.util.Set<V>,java.util.Set<V>):455:addVertex(v) |==> <NO-OP>
3651:EVR:<IDENTIFIER(G)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getBase():462:base |==> null
3652:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.graph.Subgraph@getEdgeWeight(E):470:base.getEdgeWeight(e) |==> 0.0
3653:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph@setEdgeWeight(E,double):478:((WeightedGraph<V, E>)base).setEdgeWeight(e, weight) |==> <NO-OP>
3654:COR:isInduced:TRUE:org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):500:isInduced |==> false
3655:COR:isInduced:FALSE:org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):500:isInduced |==> true
3656:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):501:e.getEdge() |==> null
3657:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):502:e.getEdgeSource() |==> null
3658:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):503:e.getEdgeTarget() |==> null
3659:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):504:containsVertex(source) && containsVertex(target) |==> containsVertex(source) == containsVertex(target)
3660:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):504:containsVertex(source) && containsVertex(target) |==> false
3661:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):504:containsVertex(source) && containsVertex(target) |==> containsVertex(source)
3662:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):504:containsVertex(source) && containsVertex(target) |==> containsVertex(target)
3663:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph$BaseGraphListener@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):505:addEdge(source, target, edge) |==> <NO-OP>
3664:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.Subgraph$BaseGraphListener@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):518:e.getEdge() |==> null
3665:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph$BaseGraphListener@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):520:removeEdge(edge) |==> <NO-OP>
3666:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.Subgraph$BaseGraphListener@vertexRemoved(org.jgrapht.event.GraphVertexChangeEvent<V>):536:e.getVertex() |==> null
3667:STD:<CALL>:<NO-OP>:org.jgrapht.graph.Subgraph$BaseGraphListener@vertexRemoved(org.jgrapht.event.GraphVertexChangeEvent<V>):538:removeVertex(vertex) |==> <NO-OP>
3668:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor@<init>(org.jgrapht.Graph<V,E>):41:this.g = g |==> <NO-OP>
3669:EVR:<NEW_CLASS(java.util.LinkedList<org.jgrapht.alg.TarjanLowestCommonAncestor.LcaRequestResponse<V>>)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor@calculate(V,V,V):53:new LinkedList<LcaRequestResponse<V>>() |==> null
3670:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor@calculate(V,V,V):54:list.add(new LcaRequestResponse<V>(a, b)) |==> <NO-OP>
3671:LVR:0:POS:org.jgrapht.alg.TarjanLowestCommonAncestor@calculate(V,V,V):55:0 |==> 1
3672:LVR:0:NEG:org.jgrapht.alg.TarjanLowestCommonAncestor@calculate(V,V,V):55:0 |==> -1
3673:EVR:<METHOD_INVOCATION(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor@calculate(V,java.util.List<org.jgrapht.alg.TarjanLowestCommonAncestor.LcaRequestResponse<V>>):65:new Worker(lrr).calculate(start) |==> null
3674:EVR:<NEW_CLASS(org.jgrapht.alg.util.UnionFind<V>)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker:79:new UnionFind<V>(Collections.<V>emptySet()) |==> null
3675:EVR:<NEW_CLASS(java.util.HashMap<V,V>)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker:83:new HashMap<V, V>() |==> null
3676:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker:86:new HashSet<V>() |==> null
3677:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@<init>(java.util.List<org.jgrapht.alg.TarjanLowestCommonAncestor.LcaRequestResponse<V>>):94:this.lrr = lrr |==> <NO-OP>
3678:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@<init>(java.util.List<org.jgrapht.alg.TarjanLowestCommonAncestor.LcaRequestResponse<V>>):95:this.lrrMap = new MultiMap<V>() |==> <NO-OP>
3679:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@<init>(java.util.List<org.jgrapht.alg.TarjanLowestCommonAncestor.LcaRequestResponse<V>>):100:lrrMap.getOrCreate(r.getA()).add(r) |==> <NO-OP>
3680:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@<init>(java.util.List<org.jgrapht.alg.TarjanLowestCommonAncestor.LcaRequestResponse<V>>):101:lrrMap.getOrCreate(r.getB()).add(r) |==> <NO-OP>
3681:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):120:uf.addElement(u) |==> <NO-OP>
3682:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):121:ancestors.put(u, u) |==> <NO-OP>
3683:COR:g.getEdgeSource(vEdge).equals(u):TRUE:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):123:g.getEdgeSource(vEdge).equals(u) |==> false
3684:COR:g.getEdgeSource(vEdge).equals(u):FALSE:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):123:g.getEdgeSource(vEdge).equals(u) |==> true
3685:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):124:g.getEdgeTarget(vEdge) |==> null
3686:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):125:calculate(v) |==> <NO-OP>
3687:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):126:uf.union(u, v) |==> <NO-OP>
3688:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):127:ancestors.put(uf.find(u), u) |==> <NO-OP>
3689:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):129:black.add(u) |==> <NO-OP>
3690:EVR:<METHOD_INVOCATION(java.util.Set<org.jgrapht.alg.TarjanLowestCommonAncestor.LcaRequestResponse<V>>)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):131:lrrMap.get(u) |==> null
3691:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):132:requestsForNodeU != null |==> true
3692:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):134:black.contains(rr.getB()) && rr.getA().equals(u) |==> black.contains(rr.getB()) == rr.getA().equals(u)
3693:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):134:black.contains(rr.getB()) && rr.getA().equals(u) |==> false
3694:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):134:black.contains(rr.getB()) && rr.getA().equals(u) |==> black.contains(rr.getB())
3695:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):134:black.contains(rr.getB()) && rr.getA().equals(u) |==> rr.getA().equals(u)
3696:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):135:rr.setLca(ancestors.get(uf.find(rr.getB()))) |==> <NO-OP>
3697:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):137:black.contains(rr.getA()) && rr.getB().equals(u) |==> black.contains(rr.getA()) == rr.getB().equals(u)
3698:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):137:black.contains(rr.getA()) && rr.getB().equals(u) |==> false
3699:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):137:black.contains(rr.getA()) && rr.getB().equals(u) |==> black.contains(rr.getA())
3700:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):137:black.contains(rr.getA()) && rr.getB().equals(u) |==> rr.getB().equals(u)
3701:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):138:rr.setLca(ancestors.get(uf.find(rr.getA()))) |==> <NO-OP>
3702:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):143:lrrMap.remove(u) |==> <NO-OP>
3703:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):147:new LinkedList<V>() |==> null
3704:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):149:result.add(current.getLca()) |==> <NO-OP>
3705:EVR:<IDENTIFIER(java.util.List<V>)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$Worker@calculate(V):151:result |==> null
3706:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse@<init>(V,V):161:this.a = a |==> <NO-OP>
3707:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse@<init>(V,V):162:this.b = b |==> <NO-OP>
3708:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse@getA():167:a |==> null
3709:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse@getB():172:b |==> null
3710:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse@getLca():177:lca |==> null
3711:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$LcaRequestResponse@setLca(V):182:this.lca = lca |==> <NO-OP>
3712:COR:containsKey(key):TRUE:org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap@getOrCreate(V):192:containsKey(key) |==> false
3713:COR:containsKey(key):FALSE:org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap@getOrCreate(V):192:containsKey(key) |==> true
3714:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap@getOrCreate(V):193:put(key, new HashSet<LcaRequestResponse<V>>()) |==> <NO-OP>
3715:EVR:<METHOD_INVOCATION(java.util.Set<org.jgrapht.alg.TarjanLowestCommonAncestor.LcaRequestResponse<V>>)>:<DEFAULT>:org.jgrapht.alg.TarjanLowestCommonAncestor$MultiMap@getOrCreate(V):195:get(key) |==> null
3716:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.util.UnionFind@<init>(java.util.Set<T>):68:parentMap = new HashMap<T, T>() |==> <NO-OP>
3717:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.util.UnionFind@<init>(java.util.Set<T>):69:rankMap = new HashMap<T, Integer>() |==> <NO-OP>
3718:STD:<CALL>:<NO-OP>:org.jgrapht.alg.util.UnionFind@<init>(java.util.Set<T>):71:parentMap.put(element, element) |==> <NO-OP>
3719:LVR:0:POS:org.jgrapht.alg.util.UnionFind@<init>(java.util.Set<T>):72:0 |==> 1
3720:LVR:0:NEG:org.jgrapht.alg.util.UnionFind@<init>(java.util.Set<T>):72:0 |==> -1
3721:STD:<CALL>:<NO-OP>:org.jgrapht.alg.util.UnionFind@<init>(java.util.Set<T>):72:rankMap.put(element, 0) |==> <NO-OP>
3722:STD:<CALL>:<NO-OP>:org.jgrapht.alg.util.UnionFind@addElement(T):85:parentMap.put(element, element) |==> <NO-OP>
3723:LVR:0:POS:org.jgrapht.alg.util.UnionFind@addElement(T):86:0 |==> 1
3724:LVR:0:NEG:org.jgrapht.alg.util.UnionFind@addElement(T):86:0 |==> -1
3725:STD:<CALL>:<NO-OP>:org.jgrapht.alg.util.UnionFind@addElement(T):86:rankMap.put(element, 0) |==> <NO-OP>
3726:EVR:<IDENTIFIER(java.util.Map<T,T>)>:<DEFAULT>:org.jgrapht.alg.util.UnionFind@getParentMap():94:parentMap |==> null
3727:EVR:<IDENTIFIER(java.util.Map<T,java.lang.Integer>)>:<DEFAULT>:org.jgrapht.alg.util.UnionFind@getRankMap():102:rankMap |==> null
3728:COR:parentMap.containsKey(element):TRUE:org.jgrapht.alg.util.UnionFind@find(T):114:parentMap.containsKey(element) |==> false
3729:COR:parentMap.containsKey(element):FALSE:org.jgrapht.alg.util.UnionFind@find(T):114:parentMap.containsKey(element) |==> true
3730:EVR:<METHOD_INVOCATION(T)>:<DEFAULT>:org.jgrapht.alg.util.UnionFind@find(T):119:parentMap.get(element) |==> null
3731:COR:parent.equals(element):TRUE:org.jgrapht.alg.util.UnionFind@find(T):120:parent.equals(element) |==> false
3732:COR:parent.equals(element):FALSE:org.jgrapht.alg.util.UnionFind@find(T):120:parent.equals(element) |==> true
3733:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.util.UnionFind@find(T):121:return element; |==> <NO-OP>
3734:EVR:<METHOD_INVOCATION(T)>:<DEFAULT>:org.jgrapht.alg.util.UnionFind@find(T):124:find(parent) |==> null
3735:STD:<CALL>:<NO-OP>:org.jgrapht.alg.util.UnionFind@find(T):125:parentMap.put(element, newParent) |==> <NO-OP>
3736:EVR:<IDENTIFIER(T)>:<DEFAULT>:org.jgrapht.alg.util.UnionFind@find(T):126:newParent |==> null
3737:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.util.UnionFind@union(T,T):137:!parentMap.containsKey(element1) || !parentMap.containsKey(element2) |==> !parentMap.containsKey(element1) != !parentMap.containsKey(element2)
3738:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.util.UnionFind@union(T,T):137:!parentMap.containsKey(element1) || !parentMap.containsKey(element2) |==> !parentMap.containsKey(element1)
3739:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.util.UnionFind@union(T,T):138:!parentMap.containsKey(element1) || !parentMap.containsKey(element2) |==> !parentMap.containsKey(element2)
3740:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.util.UnionFind@union(T,T):138:!parentMap.containsKey(element1) || !parentMap.containsKey(element2) |==> true
3741:EVR:<METHOD_INVOCATION(T)>:<DEFAULT>:org.jgrapht.alg.util.UnionFind@union(T,T):144:find(element1) |==> null
3742:EVR:<METHOD_INVOCATION(T)>:<DEFAULT>:org.jgrapht.alg.util.UnionFind@union(T,T):145:find(element2) |==> null
3743:COR:parent1.equals(parent2):TRUE:org.jgrapht.alg.util.UnionFind@union(T,T):148:parent1.equals(parent2) |==> false
3744:COR:parent1.equals(parent2):FALSE:org.jgrapht.alg.util.UnionFind@union(T,T):148:parent1.equals(parent2) |==> true
3745:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.util.UnionFind@union(T,T):149:return; |==> <NO-OP>
3746:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.util.UnionFind@union(T,T):152:rankMap.get(parent1) |==> null
3747:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.util.UnionFind@union(T,T):153:rankMap.get(parent2) |==> null
3748:ROR:>(int,int):!=(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):154:rank1 > rank2 |==> rank1 != rank2
3749:ROR:>(int,int):>=(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):154:rank1 > rank2 |==> rank1 >= rank2
3750:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):154:rank1 > rank2 |==> false
3751:STD:<CALL>:<NO-OP>:org.jgrapht.alg.util.UnionFind@union(T,T):155:parentMap.put(parent2, parent1) |==> <NO-OP>
3752:ROR:<(int,int):!=(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):156:rank1 < rank2 |==> rank1 != rank2
3753:ROR:<(int,int):<=(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):156:rank1 < rank2 |==> rank1 <= rank2
3754:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):156:rank1 < rank2 |==> false
3755:STD:<CALL>:<NO-OP>:org.jgrapht.alg.util.UnionFind@union(T,T):157:parentMap.put(parent1, parent2) |==> <NO-OP>
3756:STD:<CALL>:<NO-OP>:org.jgrapht.alg.util.UnionFind@union(T,T):159:parentMap.put(parent2, parent1) |==> <NO-OP>
3757:LVR:POS:0:org.jgrapht.alg.util.UnionFind@union(T,T):160:1 |==> 0
3758:LVR:POS:NEG:org.jgrapht.alg.util.UnionFind@union(T,T):160:1 |==> -1
3759:AOR:+(int,int):%(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):160:rank1 + 1 |==> rank1 % 1
3760:AOR:+(int,int):*(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):160:rank1 + 1 |==> rank1 * 1
3761:AOR:+(int,int):-(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):160:rank1 + 1 |==> rank1 - 1
3762:AOR:+(int,int):/(int,int):org.jgrapht.alg.util.UnionFind@union(T,T):160:rank1 + 1 |==> rank1 / 1
3763:STD:<CALL>:<NO-OP>:org.jgrapht.alg.util.UnionFind@union(T,T):160:rankMap.put(parent1, rank1 + 1) |==> <NO-OP>
3764:EVR:<NEW_CLASS(org.jgrapht.alg.TransitiveClosure)>:<DEFAULT>:org.jgrapht.alg.TransitiveClosure:55:new TransitiveClosure() |==> null
3765:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):75:graph.vertexSet() |==> null
3766:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):77:new HashSet<V>() |==> null
3767:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):84:computeBinaryLog(vertexSet.size()) |==> 0
3768:LVR:FALSE:TRUE:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):85:false |==> true
3769:LVR:0:POS:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):86:0 |==> 1
3770:LVR:0:NEG:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):86:0 |==> -1
3771:ROR:<(int,int):!=(int,int):org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):86:i < bound |==> i != bound
3772:ROR:<(int,int):<=(int,int):org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):86:i < bound |==> i <= bound
3773:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):86:i < bound |==> false
3774:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):86:!done && (i < bound) |==> !done == (i < bound)
3775:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):86:!done && (i < bound) |==> false
3776:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):86:!done && (i < bound) |==> !done
3777:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):86:!done && (i < bound) |==> (i < bound)
3778:LVR:TRUE:FALSE:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):87:true |==> false
3779:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):87:done = true |==> <NO-OP>
3780:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):89:newEdgeTargets.clear() |==> <NO-OP>
3781:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):92:graph.getEdgeTarget(v1OutEdge) |==> null
3782:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):94:graph.getEdgeTarget(v2OutEdge) |==> null
3783:COR:v1.equals(v3):TRUE:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):96:v1.equals(v3) |==> false
3784:COR:v1.equals(v3):FALSE:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):96:v1.equals(v3) |==> true
3785:STD:<CONT>:<NO-OP>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):98:continue; |==> <NO-OP>
3786:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):101:graph.getEdge(v1, v3) != null |==> true
3787:STD:<CONT>:<NO-OP>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):103:continue; |==> <NO-OP>
3788:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):106:newEdgeTargets.add(v3) |==> <NO-OP>
3789:LVR:FALSE:TRUE:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):107:false |==> true
3790:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):107:done = false |==> <NO-OP>
3791:STD:<CALL>:<NO-OP>:org.jgrapht.alg.TransitiveClosure@closeSimpleDirectedGraph(org.jgrapht.graph.SimpleDirectedGraph<V,E>):112:graph.addEdge(v1, v3) |==> <NO-OP>
3792:LVR:0:POS:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):123:0 |==> 1
3793:LVR:0:NEG:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):123:0 |==> -1
3794:ROR:>=(int,int):==(int,int):org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):123:n >= 0 |==> n == 0
3795:ROR:>=(int,int):>(int,int):org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):123:n >= 0 |==> n > 0
3796:ROR:>=(int,int):TRUE(int,int):org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):123:n >= 0 |==> true
3797:LVR:0:POS:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):125:0 |==> 1
3798:LVR:0:NEG:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):125:0 |==> -1
3799:LVR:0:POS:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):126:0 |==> 1
3800:LVR:0:NEG:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):126:0 |==> -1
3801:ROR:>(int,int):!=(int,int):org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):126:n > 0 |==> n != 0
3802:ROR:>(int,int):>=(int,int):org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):126:n > 0 |==> n >= 0
3803:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):126:n > 0 |==> false
3804:LVR:POS:0:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):127:1 |==> 0
3805:LVR:POS:NEG:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):127:1 |==> -1
3806:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):127:n >>= 1 |==> <NO-OP>
3807:STD:<INC>:<NO-OP>:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):128:++result |==> <NO-OP>
3808:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.alg.TransitiveClosure@computeBinaryLog(int):131:result |==> 0
3809:LVR:FALSE:TRUE:org.jgrapht.graph.SimpleDirectedGraph@<init>(org.jgrapht.EdgeFactory<V,E>):75:false |==> true
3810:LVR:FALSE:TRUE:org.jgrapht.graph.SimpleDirectedGraph@<init>(org.jgrapht.EdgeFactory<V,E>):75:false |==> true
3811:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):83:new HashSet<V>() |==> null
3812:EVR:<NEW_CLASS(org.jgrapht.graph.Subgraph<V,E,org.jgrapht.Graph<V,E>>)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):87:new Subgraph<V, E, Graph<V, E>>(g, null, null) |==> null
3813:LVR:0:POS:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):93:0 |==> 1
3814:LVR:0:NEG:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):93:0 |==> -1
3815:ROR:>(int,int):!=(int,int):org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):93:sg.edgeSet().size() > 0 |==> sg.edgeSet().size() != 0
3816:ROR:>(int,int):>=(int,int):org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):93:sg.edgeSet().size() > 0 |==> sg.edgeSet().size() >= 0
3817:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):93:sg.edgeSet().size() > 0 |==> false
3818:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):95:sg.edgeSet().iterator().next() |==> null
3819:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):98:g.getEdgeSource(e) |==> null
3820:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):99:g.getEdgeTarget(e) |==> null
3821:STD:<CALL>:<NO-OP>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):100:cover.add(u) |==> <NO-OP>
3822:STD:<CALL>:<NO-OP>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):101:cover.add(v) |==> <NO-OP>
3823:STD:<CALL>:<NO-OP>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):104:sg.removeVertex(u) |==> <NO-OP>
3824:STD:<CALL>:<NO-OP>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):105:sg.removeVertex(v) |==> <NO-OP>
3825:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@find2ApproximationCover(org.jgrapht.Graph<V,E>):108:cover |==> null
3826:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):129:new HashSet<V>() |==> null
3827:EVR:<NEW_CLASS(org.jgrapht.graph.UndirectedSubgraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):132:new UndirectedSubgraph<V, E>(g, null, null) |==> null
3828:EVR:<NEW_CLASS(org.jgrapht.alg.util.VertexDegreeComparator<V,E>)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):136:new VertexDegreeComparator<V, E>(sg) |==> null
3829:LVR:0:POS:org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):139:0 |==> 1
3830:LVR:0:NEG:org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):139:0 |==> -1
3831:ROR:>(int,int):!=(int,int):org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):139:sg.edgeSet().size() > 0 |==> sg.edgeSet().size() != 0
3832:ROR:>(int,int):>=(int,int):org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):139:sg.edgeSet().size() > 0 |==> sg.edgeSet().size() >= 0
3833:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):139:sg.edgeSet().size() > 0 |==> false
3834:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):141:Collections.max(sg.vertexSet(), comp) |==> null
3835:STD:<CALL>:<NO-OP>:org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):144:cover.add(v) |==> <NO-OP>
3836:STD:<CALL>:<NO-OP>:org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):147:sg.removeVertex(v) |==> <NO-OP>
3837:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.VertexCovers@findGreedyCover(org.jgrapht.UndirectedGraph<V,E>):150:cover |==> null
3838:LVR:0:POS:org.jgrapht.alg.cycle.JohnsonSimpleCycles:74:0 |==> 1
3839:LVR:0:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles:74:0 |==> -1
3840:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.JohnsonSimpleCycles@<init>(org.jgrapht.DirectedGraph<V,E>):99:graph == null |==> false
3841:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@<init>(org.jgrapht.DirectedGraph<V,E>):102:this.graph = graph |==> <NO-OP>
3842:EVR:<IDENTIFIER(org.jgrapht.DirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getGraph():112:graph |==> null
3843:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.JohnsonSimpleCycles@setGraph(org.jgrapht.DirectedGraph<V,E>):120:graph == null |==> false
3844:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@setGraph(org.jgrapht.DirectedGraph<V,E>):123:this.graph = graph |==> <NO-OP>
3845:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():131:graph == null |==> false
3846:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():134:initState() |==> <NO-OP>
3847:LVR:0:POS:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():136:0 |==> 1
3848:LVR:0:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():136:0 |==> -1
3849:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():137:graph.vertexSet().size() |==> 0
3850:ROR:<(int,int):!=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():138:startIndex < size |==> startIndex != size
3851:ROR:<(int,int):<=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():138:startIndex < size |==> startIndex <= size
3852:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():138:startIndex < size |==> false
3853:EVR:<METHOD_INVOCATION(java.lang.Object[])>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():139:findMinSCSG(startIndex) |==> null
3854:LVR:0:POS:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():140:0 |==> 1
3855:LVR:0:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():140:0 |==> -1
3856:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():140:minSCCGResult[0] != null |==> true
3857:LVR:POS:0:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():141:1 |==> 0
3858:LVR:POS:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():141:1 |==> -1
3859:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():141:startIndex = (Integer)minSCCGResult[1] |==> <NO-OP>
3860:LVR:0:POS:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():144:0 |==> 1
3861:LVR:0:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():144:0 |==> -1
3862:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():145:toV(startIndex) |==> null
3863:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():147:graph.getEdgeTarget(e) |==> null
3864:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():148:blocked.remove(v) |==> <NO-OP>
3865:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():149:getBSet(v).clear() |==> <NO-OP>
3866:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():151:findCyclesInSCG(startIndex, startIndex, scg) |==> <NO-OP>
3867:STD:<INC>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():152:startIndex++ |==> <NO-OP>
3868:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():154:break; |==> <NO-OP>
3869:EVR:<IDENTIFIER(java.util.List<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():158:cycles |==> null
3870:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():159:clearState() |==> <NO-OP>
3871:EVR:<IDENTIFIER(java.util.List<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSimpleCycles():160:result |==> null
3872:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):173:initMinSCGState() |==> <NO-OP>
3873:LVR:POS:0:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):174:2 |==> 0
3874:LVR:POS:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):174:2 |==> -2
3875:EVR:<METHOD_INVOCATION(java.util.List<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):176:findSCCS(startIndex) |==> null
3876:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):179:Integer.MAX_VALUE |==> 0
3877:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):183:toI(v) |==> null
3878:ROR:<(int,int):!=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):184:t < minIndexFound |==> t != minIndexFound
3879:ROR:<(int,int):<=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):184:t < minIndexFound |==> t <= minIndexFound
3880:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):184:t < minIndexFound |==> false
3881:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):185:minIndexFound = t |==> <NO-OP>
3882:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):186:minSCC = scc |==> <NO-OP>
3883:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):190:minSCC == null |==> false
3884:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):191:return result; |==> <NO-OP>
3885:EVR:<NEW_CLASS(org.jgrapht.graph.DefaultDirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):197:new DefaultDirectedGraph<V, E>(new ClassBasedEdgeFactory<V, E>((Class<? extends E>)DefaultEdge.class)) |==> null
3886:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):201:resultGraph.addVertex(v) |==> <NO-OP>
3887:COR:graph.containsEdge(v, w):TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):205:graph.containsEdge(v, w) |==> false
3888:COR:graph.containsEdge(v, w):FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):205:graph.containsEdge(v, w) |==> true
3889:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):206:resultGraph.addEdge(v, w) |==> <NO-OP>
3890:LVR:0:POS:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):215:0 |==> 1
3891:LVR:0:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):215:0 |==> -1
3892:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):215:result[0] = resultGraph |==> <NO-OP>
3893:LVR:POS:0:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):216:1 |==> 0
3894:LVR:POS:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):216:1 |==> -1
3895:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):216:result[1] = minIndexFound |==> <NO-OP>
3896:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):218:clearMinSCCState() |==> <NO-OP>
3897:EVR:<IDENTIFIER(java.lang.Object[])>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findMinSCSG(int):219:result |==> null
3898:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):234:toI(v) |==> null
3899:ROR:<(int,int):!=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):235:vI < startIndex |==> vI != startIndex
3900:ROR:<(int,int):<=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):235:vI < startIndex |==> vI <= startIndex
3901:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):235:vI < startIndex |==> false
3902:STD:<CONT>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):236:continue; |==> <NO-OP>
3903:COR:vIndex.containsKey(v):TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):238:vIndex.containsKey(v) |==> false
3904:COR:vIndex.containsKey(v):FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):238:vIndex.containsKey(v) |==> true
3905:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):239:getSCCs(startIndex, vI) |==> <NO-OP>
3906:EVR:<IDENTIFIER(java.util.List<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):242:SCCs |==> null
3907:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):243:SCCs = null |==> <NO-OP>
3908:EVR:<IDENTIFIER(java.util.List<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findSCCS(int):244:result |==> null
3909:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):249:toV(vertexIndex) |==> null
3910:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):250:vIndex.put(vertex, index) |==> <NO-OP>
3911:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):251:vLowlink.put(vertex, index) |==> <NO-OP>
3912:STD:<INC>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):252:index++ |==> <NO-OP>
3913:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):253:path.push(vertex) |==> <NO-OP>
3914:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):254:pathSet.add(vertex) |==> <NO-OP>
3915:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):256:graph.outgoingEdgesOf(vertex) |==> null
3916:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):258:graph.getEdgeTarget(e) |==> null
3917:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):259:toI(successor) |==> null
3918:ROR:<(int,int):!=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):260:successorIndex < startIndex |==> successorIndex != startIndex
3919:ROR:<(int,int):<=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):260:successorIndex < startIndex |==> successorIndex <= startIndex
3920:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):260:successorIndex < startIndex |==> false
3921:STD:<CONT>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):261:continue; |==> <NO-OP>
3922:COR:vIndex.containsKey(successor):TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):263:vIndex.containsKey(successor) |==> false
3923:COR:vIndex.containsKey(successor):FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):263:vIndex.containsKey(successor) |==> true
3924:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):264:getSCCs(startIndex, successorIndex) |==> <NO-OP>
3925:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):265:vLowlink.put(vertex, Math.min(vLowlink.get(vertex), vLowlink.get(successor))) |==> <NO-OP>
3926:COR:pathSet.contains(successor):TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):269:pathSet.contains(successor) |==> false
3927:COR:pathSet.contains(successor):FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):269:pathSet.contains(successor) |==> true
3928:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):270:vLowlink.put(vertex, Math.min(vLowlink.get(vertex), vIndex.get(successor))) |==> <NO-OP>
3929:COR:vLowlink.get(vertex).equals(vIndex.get(vertex)):TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):276:vLowlink.get(vertex).equals(vIndex.get(vertex)) |==> false
3930:COR:vLowlink.get(vertex).equals(vIndex.get(vertex)):FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):276:vLowlink.get(vertex).equals(vIndex.get(vertex)) |==> true
3931:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):277:new HashSet<V>() |==> null
3932:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):280:temp = path.pop() |==> <NO-OP>
3933:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):281:pathSet.remove(temp) |==> <NO-OP>
3934:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):282:result.add(temp) |==> <NO-OP>
3935:LVR:POS:0:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):284:1 |==> 0
3936:LVR:POS:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):284:1 |==> -1
3937:ROR:==(int,int):<=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):284:result.size() == 1 |==> result.size() <= 1
3938:ROR:==(int,int):>=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):284:result.size() == 1 |==> result.size() >= 1
3939:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):284:result.size() == 1 |==> false
3940:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):285:result.iterator().next() |==> null
3941:COR:graph.containsEdge(vertex, v):TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):286:graph.containsEdge(vertex, v) |==> false
3942:COR:graph.containsEdge(vertex, v):FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):286:graph.containsEdge(vertex, v) |==> true
3943:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):287:SCCs.add(result) |==> <NO-OP>
3944:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getSCCs(int,int):290:SCCs.add(result) |==> <NO-OP>
3945:LVR:FALSE:TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):302:false |==> true
3946:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):303:toV(vertexIndex) |==> null
3947:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):304:stack.push(vertex) |==> <NO-OP>
3948:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):305:blocked.add(vertex) |==> <NO-OP>
3949:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):308:scg.getEdgeTarget(e) |==> null
3950:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):309:toI(successor) |==> null
3951:ROR:==(int,int):<=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):310:successorIndex == startIndex |==> successorIndex <= startIndex
3952:ROR:==(int,int):>=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):310:successorIndex == startIndex |==> successorIndex >= startIndex
3953:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):310:successorIndex == startIndex |==> false
3954:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):311:new ArrayList<V>() |==> null
3955:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):312:cycle.addAll(stack) |==> <NO-OP>
3956:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):313:cycles.add(cycle) |==> <NO-OP>
3957:LVR:TRUE:FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):314:true |==> false
3958:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):314:foundCycle = true |==> <NO-OP>
3959:COR:blocked.contains(successor):TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):315:blocked.contains(successor) |==> false
3960:COR:blocked.contains(successor):FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):315:blocked.contains(successor) |==> true
3961:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):317:findCyclesInSCG(startIndex, successorIndex, scg) |==> false
3962:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):318:foundCycle || gotCycle |==> foundCycle != gotCycle
3963:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):318:foundCycle || gotCycle |==> foundCycle
3964:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):318:foundCycle || gotCycle |==> gotCycle
3965:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):318:foundCycle || gotCycle |==> true
3966:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):318:foundCycle = foundCycle || gotCycle |==> <NO-OP>
3967:COR:foundCycle:TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):321:foundCycle |==> false
3968:COR:foundCycle:FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):321:foundCycle |==> true
3969:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):322:unblock(vertex) |==> <NO-OP>
3970:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):325:scg.getEdgeTarget(ew) |==> null
3971:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):326:getBSet(w) |==> null
3972:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):327:bSet.add(vertex) |==> <NO-OP>
3973:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):330:stack.pop() |==> <NO-OP>
3974:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@findCyclesInSCG(int,int,org.jgrapht.DirectedGraph<V,E>):331:foundCycle |==> false
3975:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):336:blocked.remove(vertex) |==> <NO-OP>
3976:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):337:getBSet(vertex) |==> null
3977:LVR:0:POS:org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):338:0 |==> 1
3978:LVR:0:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):338:0 |==> -1
3979:ROR:>(int,int):!=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):338:bSet.size() > 0 |==> bSet.size() != 0
3980:ROR:>(int,int):>=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):338:bSet.size() > 0 |==> bSet.size() >= 0
3981:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):338:bSet.size() > 0 |==> false
3982:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):339:bSet.iterator().next() |==> null
3983:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):340:bSet.remove(w) |==> <NO-OP>
3984:COR:blocked.contains(w):TRUE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):341:blocked.contains(w) |==> false
3985:COR:blocked.contains(w):FALSE:org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):341:blocked.contains(w) |==> true
3986:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@unblock(V):342:unblock(w) |==> <NO-OP>
3987:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():350:cycles = new LinkedList<List<V>>() |==> <NO-OP>
3988:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():351:iToV = (V[])graph.vertexSet().toArray() |==> <NO-OP>
3989:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():352:vToI = new HashMap<V, Integer>() |==> <NO-OP>
3990:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():353:blocked = new HashSet<V>() |==> <NO-OP>
3991:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():354:bSets = new HashMap<V, Set<V>>() |==> <NO-OP>
3992:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():355:stack = new ArrayDeque<V>() |==> <NO-OP>
3993:LVR:0:POS:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():357:0 |==> 1
3994:LVR:0:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():357:0 |==> -1
3995:ROR:<(int,int):!=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():357:i < iToV.length |==> i != iToV.length
3996:ROR:<(int,int):<=(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():357:i < iToV.length |==> i <= iToV.length
3997:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():357:i < iToV.length |==> false
3998:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initState():358:vToI.put(iToV[i], i) |==> <NO-OP>
3999:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearState():364:cycles = null |==> <NO-OP>
4000:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearState():365:iToV = null |==> <NO-OP>
4001:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearState():366:vToI = null |==> <NO-OP>
4002:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearState():367:blocked = null |==> <NO-OP>
4003:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearState():368:bSets = null |==> <NO-OP>
4004:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearState():369:stack = null |==> <NO-OP>
4005:LVR:0:POS:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initMinSCGState():374:0 |==> 1
4006:LVR:0:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initMinSCGState():374:0 |==> -1
4007:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initMinSCGState():374:index = 0 |==> <NO-OP>
4008:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initMinSCGState():375:SCCs = new ArrayList<Set<V>>() |==> <NO-OP>
4009:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initMinSCGState():376:vIndex = new HashMap<V, Integer>() |==> <NO-OP>
4010:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initMinSCGState():377:vLowlink = new HashMap<V, Integer>() |==> <NO-OP>
4011:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initMinSCGState():378:path = new ArrayDeque<V>() |==> <NO-OP>
4012:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@initMinSCGState():379:pathSet = new HashSet<V>() |==> <NO-OP>
4013:LVR:0:POS:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearMinSCCState():384:0 |==> 1
4014:LVR:0:NEG:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearMinSCCState():384:0 |==> -1
4015:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearMinSCCState():384:index = 0 |==> <NO-OP>
4016:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearMinSCCState():385:SCCs = null |==> <NO-OP>
4017:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearMinSCCState():386:vIndex = null |==> <NO-OP>
4018:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearMinSCCState():387:vLowlink = null |==> <NO-OP>
4019:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearMinSCCState():388:path = null |==> <NO-OP>
4020:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@clearMinSCCState():389:pathSet = null |==> <NO-OP>
4021:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@toI(V):394:vToI.get(vertex) |==> null
4022:EVR:<ARRAY_ACCESS(V)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@toV(java.lang.Integer):399:iToV[i] |==> null
4023:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getBSet(V):406:bSets.get(v) |==> null
4024:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.JohnsonSimpleCycles@getBSet(V):407:result == null |==> false
4025:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getBSet(V):408:result = new HashSet<V>() |==> <NO-OP>
4026:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getBSet(V):409:bSets.put(v, result) |==> <NO-OP>
4027:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.JohnsonSimpleCycles@getBSet(V):411:result |==> null
4028:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.PatonCycleBase@<init>(org.jgrapht.UndirectedGraph<V,E>):81:graph == null |==> false
4029:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@<init>(org.jgrapht.UndirectedGraph<V,E>):84:this.graph = graph |==> <NO-OP>
4030:EVR:<IDENTIFIER(org.jgrapht.UndirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@getGraph():94:graph |==> null
4031:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.PatonCycleBase@setGraph(org.jgrapht.UndirectedGraph<V,E>):102:graph == null |==> false
4032:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@setGraph(org.jgrapht.UndirectedGraph<V,E>):105:this.graph = graph |==> <NO-OP>
4033:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():113:graph == null |==> false
4034:EVR:<NEW_CLASS(java.util.HashMap<V,java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():116:new HashMap<V, Set<V>>() |==> null
4035:EVR:<NEW_CLASS(java.util.HashMap<V,V>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():117:new HashMap<V, V>() |==> null
4036:EVR:<NEW_CLASS(java.util.ArrayDeque<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():118:new ArrayDeque<V>() |==> null
4037:EVR:<NEW_CLASS(java.util.ArrayList<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():119:new ArrayList<List<V>>() |==> null
4038:COR:parent.containsKey(root):TRUE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():124:parent.containsKey(root) |==> false
4039:COR:parent.containsKey(root):FALSE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():124:parent.containsKey(root) |==> true
4040:STD:<CONT>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():125:continue; |==> <NO-OP>
4041:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():130:used.clear() |==> <NO-OP>
4042:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():133:parent.put(root, root) |==> <NO-OP>
4043:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():134:used.put(root, new HashSet<V>()) |==> <NO-OP>
4044:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():135:stack.push(root) |==> <NO-OP>
4045:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():142:stack.pop() |==> null
4046:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():143:used.get(current) |==> null
4047:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():145:graph.getEdgeTarget(e) |==> null
4048:COR:neighbor.equals(current):TRUE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():146:neighbor.equals(current) |==> false
4049:COR:neighbor.equals(current):FALSE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():146:neighbor.equals(current) |==> true
4050:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():147:neighbor = graph.getEdgeSource(e) |==> <NO-OP>
4051:COR:used.containsKey(neighbor):TRUE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():149:used.containsKey(neighbor) |==> false
4052:COR:used.containsKey(neighbor):FALSE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():149:used.containsKey(neighbor) |==> true
4053:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():151:parent.put(neighbor, current) |==> <NO-OP>
4054:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():152:new HashSet<V>() |==> null
4055:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():153:neighbourUsed.add(current) |==> <NO-OP>
4056:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():154:used.put(neighbor, neighbourUsed) |==> <NO-OP>
4057:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():155:stack.push(neighbor) |==> <NO-OP>
4058:COR:neighbor.equals(current):TRUE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():156:neighbor.equals(current) |==> false
4059:COR:neighbor.equals(current):FALSE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():156:neighbor.equals(current) |==> true
4060:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():158:new ArrayList<V>() |==> null
4061:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():159:cycle.add(current) |==> <NO-OP>
4062:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():160:cycles.add(cycle) |==> <NO-OP>
4063:COR:currentUsed.contains(neighbor):TRUE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():161:currentUsed.contains(neighbor) |==> false
4064:COR:currentUsed.contains(neighbor):FALSE:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():161:currentUsed.contains(neighbor) |==> true
4065:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():163:used.get(neighbor) |==> null
4066:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():164:new ArrayList<V>() |==> null
4067:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():165:cycle.add(neighbor) |==> <NO-OP>
4068:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():166:cycle.add(current) |==> <NO-OP>
4069:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():167:parent.get(current) |==> null
4070:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():169:cycle.add(p) |==> <NO-OP>
4071:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():170:p = parent.get(p) |==> <NO-OP>
4072:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():172:cycle.add(p) |==> <NO-OP>
4073:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():173:cycles.add(cycle) |==> <NO-OP>
4074:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():174:neighbourUsed.add(current) |==> <NO-OP>
4075:EVR:<IDENTIFIER(java.util.List<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.PatonCycleBase@findCycleBase():179:cycles |==> null
4076:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@<init>(org.jgrapht.DirectedGraph<V,E>):97:graph == null |==> false
4077:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@<init>(org.jgrapht.DirectedGraph<V,E>):100:this.graph = graph |==> <NO-OP>
4078:EVR:<IDENTIFIER(org.jgrapht.DirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getGraph():110:graph |==> null
4079:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@setGraph(org.jgrapht.DirectedGraph<V,E>):118:graph == null |==> false
4080:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@setGraph(org.jgrapht.DirectedGraph<V,E>):121:this.graph = graph |==> <NO-OP>
4081:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():131:graph == null |==> false
4082:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():134:initState() |==> <NO-OP>
4083:EVR:<NEW_CLASS(org.jgrapht.alg.StrongConnectivityInspector<V,E>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():136:new StrongConnectivityInspector<V, E>(graph) |==> null
4084:EVR:<METHOD_INVOCATION(java.util.List<java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():137:inspector.stronglyConnectedSets() |==> null
4085:LVR:NEG:0:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():139:-1 |==> 0
4086:LVR:NEG:POS:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():139:-1 |==> 1
4087:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():142:graph.inDegreeOf(v) |==> 0
4088:ROR:>(int,int):!=(int,int):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():143:inDegree > maxInDegree |==> inDegree != maxInDegree
4089:ROR:>(int,int):>=(int,int):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():143:inDegree > maxInDegree |==> inDegree >= maxInDegree
4090:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():143:inDegree > maxInDegree |==> false
4091:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():144:maxInDegree = inDegree |==> <NO-OP>
4092:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():145:startVertex = v |==> <NO-OP>
4093:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():148:startVertices.add(startVertex) |==> <NO-OP>
4094:LVR:0:POS:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():152:0 |==> 1
4095:LVR:0:NEG:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():152:0 |==> -1
4096:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():152:cycle(toI(vertex), 0) |==> <NO-OP>
4097:EVR:<IDENTIFIER(java.util.List<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():155:cycles |==> null
4098:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():156:clearState() |==> <NO-OP>
4099:EVR:<IDENTIFIER(java.util.List<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@findSimpleCycles():157:result |==> null
4100:LVR:FALSE:TRUE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):162:false |==> true
4101:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):163:toV(v) |==> null
4102:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):164:marked.add(vV) |==> <NO-OP>
4103:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):165:stack.push(vV) |==> <NO-OP>
4104:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):166:stack.size() |==> 0
4105:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):167:position[v] = t |==> <NO-OP>
4106:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):169:q = t |==> <NO-OP>
4107:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):171:getRemoved(vV) |==> null
4108:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):172:graph.outgoingEdgesOf(vV) |==> null
4109:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):173:edgeSet.iterator() |==> null
4110:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):175:avIt.next() |==> null
4111:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):176:graph.getEdgeTarget(e) |==> null
4112:COR:avRemoved.contains(wV):TRUE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):177:avRemoved.contains(wV) |==> false
4113:COR:avRemoved.contains(wV):FALSE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):177:avRemoved.contains(wV) |==> true
4114:STD:<CONT>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):178:continue; |==> <NO-OP>
4115:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):180:toI(wV) |==> null
4116:COR:marked.contains(wV):TRUE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):181:marked.contains(wV) |==> false
4117:COR:marked.contains(wV):FALSE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):181:marked.contains(wV) |==> true
4118:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):182:cycle(w, q) |==> false
4119:COR:gotCycle:TRUE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):183:gotCycle |==> false
4120:COR:gotCycle:FALSE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):183:gotCycle |==> true
4121:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):184:foundCycle = gotCycle |==> <NO-OP>
4122:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):186:noCycle(v, w) |==> <NO-OP>
4123:ROR:<=(int,int):<(int,int):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):188:position[w] <= q |==> position[w] < q
4124:ROR:<=(int,int):==(int,int):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):188:position[w] <= q |==> position[w] == q
4125:ROR:<=(int,int):TRUE(int,int):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):188:position[w] <= q |==> true
4126:LVR:TRUE:FALSE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):189:true |==> false
4127:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):189:foundCycle = true |==> <NO-OP>
4128:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):190:new ArrayList<V>() |==> null
4129:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):191:stack.descendingIterator() |==> null
4130:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):194:current = it.next() |==> <NO-OP>
4131:COR:wV.equals(current):TRUE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):195:wV.equals(current) |==> false
4132:COR:wV.equals(current):FALSE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):195:wV.equals(current) |==> true
4133:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):196:break; |==> <NO-OP>
4134:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):199:cycle.add(wV) |==> <NO-OP>
4135:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):201:current = it.next() |==> <NO-OP>
4136:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):202:cycle.add(current) |==> <NO-OP>
4137:COR:current.equals(vV):TRUE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):203:current.equals(vV) |==> false
4138:COR:current.equals(vV):FALSE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):203:current.equals(vV) |==> true
4139:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):204:break; |==> <NO-OP>
4140:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):207:cycles.add(cycle) |==> <NO-OP>
4141:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):209:noCycle(v, w) |==> <NO-OP>
4142:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):212:stack.pop() |==> <NO-OP>
4143:COR:foundCycle:TRUE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):213:foundCycle |==> false
4144:COR:foundCycle:FALSE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):213:foundCycle |==> true
4145:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):214:unmark(v) |==> <NO-OP>
4146:LVR:TRUE:FALSE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):216:true |==> false
4147:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):216:reach[v] = true |==> <NO-OP>
4148:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):217:position[v] = graph.vertexSet().size() |==> <NO-OP>
4149:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@cycle(int,int):218:foundCycle |==> false
4150:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@noCycle(int,int):223:toV(x) |==> null
4151:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@noCycle(int,int):224:toV(y) |==> null
4152:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@noCycle(int,int):226:getBSet(yV) |==> null
4153:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@noCycle(int,int):227:getRemoved(xV) |==> null
4154:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@noCycle(int,int):229:by.add(xV) |==> <NO-OP>
4155:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@noCycle(int,int):230:axRemoved.add(yV) |==> <NO-OP>
4156:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@unmark(int):235:toV(x) |==> null
4157:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@unmark(int):236:marked.remove(xV) |==> <NO-OP>
4158:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@unmark(int):237:getBSet(xV) |==> null
4159:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@unmark(int):239:getRemoved(yV) |==> null
4160:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@unmark(int):240:ayRemoved.remove(xV) |==> <NO-OP>
4161:COR:marked.contains(yV):TRUE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@unmark(int):241:marked.contains(yV) |==> false
4162:COR:marked.contains(yV):FALSE:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@unmark(int):241:marked.contains(yV) |==> true
4163:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@unmark(int):242:unmark(toI(yV)) |==> <NO-OP>
4164:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@unmark(int):245:bx.clear() |==> <NO-OP>
4165:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():251:cycles = new ArrayList<List<V>>() |==> <NO-OP>
4166:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():252:iToV = (V[])graph.vertexSet().toArray() |==> <NO-OP>
4167:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():253:vToI = new HashMap<V, Integer>() |==> <NO-OP>
4168:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():254:bSets = new HashMap<V, Set<V>>() |==> <NO-OP>
4169:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():255:stack = new ArrayDeque<V>() |==> <NO-OP>
4170:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():256:marked = new HashSet<V>() |==> <NO-OP>
4171:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():257:removed = new HashMap<V, Set<V>>() |==> <NO-OP>
4172:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():258:graph.vertexSet().size() |==> 0
4173:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():259:position = new int[size] |==> <NO-OP>
4174:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():260:reach = new boolean[size] |==> <NO-OP>
4175:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():261:startVertices = new ArrayList<V>() |==> <NO-OP>
4176:LVR:0:POS:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():263:0 |==> 1
4177:LVR:0:NEG:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():263:0 |==> -1
4178:ROR:<(int,int):!=(int,int):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():263:i < iToV.length |==> i != iToV.length
4179:ROR:<(int,int):<=(int,int):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():263:i < iToV.length |==> i <= iToV.length
4180:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():263:i < iToV.length |==> false
4181:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@initState():264:vToI.put(iToV[i], i) |==> <NO-OP>
4182:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():270:cycles = null |==> <NO-OP>
4183:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():271:iToV = null |==> <NO-OP>
4184:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():272:vToI = null |==> <NO-OP>
4185:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():273:bSets = null |==> <NO-OP>
4186:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():274:stack = null |==> <NO-OP>
4187:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():275:marked = null |==> <NO-OP>
4188:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():276:removed = null |==> <NO-OP>
4189:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():277:position = null |==> <NO-OP>
4190:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():278:reach = null |==> <NO-OP>
4191:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@clearState():279:startVertices = null |==> <NO-OP>
4192:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@toI(V):284:vToI.get(v) |==> null
4193:EVR:<ARRAY_ACCESS(V)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@toV(int):289:iToV[i] |==> null
4194:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getBSet(V):296:bSets.get(v) |==> null
4195:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getBSet(V):297:result == null |==> false
4196:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getBSet(V):298:result = new HashSet<V>() |==> <NO-OP>
4197:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getBSet(V):299:bSets.put(v, result) |==> <NO-OP>
4198:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getBSet(V):301:result |==> null
4199:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getRemoved(V):308:removed.get(v) |==> null
4200:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getRemoved(V):309:result == null |==> false
4201:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getRemoved(V):310:result = new HashSet<V>() |==> <NO-OP>
4202:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getRemoved(V):311:removed.put(v, result) |==> <NO-OP>
4203:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.SzwarcfiterLauerSimpleCycles@getRemoved(V):313:result |==> null
4204:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.TarjanSimpleCycles@<init>(org.jgrapht.DirectedGraph<V,E>):88:graph == null |==> false
4205:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@<init>(org.jgrapht.DirectedGraph<V,E>):91:this.graph = graph |==> <NO-OP>
4206:EVR:<IDENTIFIER(org.jgrapht.DirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@getGraph():101:graph |==> null
4207:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.TarjanSimpleCycles@setGraph(org.jgrapht.DirectedGraph<V,E>):109:graph == null |==> false
4208:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@setGraph(org.jgrapht.DirectedGraph<V,E>):112:this.graph = graph |==> <NO-OP>
4209:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.TarjanSimpleCycles@findSimpleCycles():120:graph == null |==> false
4210:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@findSimpleCycles():123:initState() |==> <NO-OP>
4211:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@findSimpleCycles():126:backtrack(start, start) |==> <NO-OP>
4212:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@findSimpleCycles():128:marked.remove(markedStack.pop()) |==> <NO-OP>
4213:EVR:<IDENTIFIER(java.util.List<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@findSimpleCycles():132:cycles |==> null
4214:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@findSimpleCycles():133:clearState() |==> <NO-OP>
4215:EVR:<IDENTIFIER(java.util.List<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@findSimpleCycles():134:result |==> null
4216:LVR:FALSE:TRUE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):139:false |==> true
4217:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):140:pointStack.push(vertex) |==> <NO-OP>
4218:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):141:marked.add(vertex) |==> <NO-OP>
4219:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):142:markedStack.push(vertex) |==> <NO-OP>
4220:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):145:graph.getEdgeTarget(currentEdge) |==> null
4221:COR:getRemoved(vertex).contains(currentVertex):TRUE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):146:getRemoved(vertex).contains(currentVertex) |==> false
4222:COR:getRemoved(vertex).contains(currentVertex):FALSE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):146:getRemoved(vertex).contains(currentVertex) |==> true
4223:STD:<CONT>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):147:continue; |==> <NO-OP>
4224:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):149:toI(currentVertex).compareTo(toI(start)) |==> 0
4225:LVR:0:POS:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):150:0 |==> 1
4226:LVR:0:NEG:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):150:0 |==> -1
4227:ROR:<(int,int):!=(int,int):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):150:comparison < 0 |==> comparison != 0
4228:ROR:<(int,int):<=(int,int):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):150:comparison < 0 |==> comparison <= 0
4229:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):150:comparison < 0 |==> false
4230:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):151:getRemoved(vertex).add(currentVertex) |==> <NO-OP>
4231:LVR:0:POS:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):152:0 |==> 1
4232:LVR:0:NEG:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):152:0 |==> -1
4233:ROR:==(int,int):<=(int,int):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):152:comparison == 0 |==> comparison <= 0
4234:ROR:==(int,int):>=(int,int):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):152:comparison == 0 |==> comparison >= 0
4235:ROR:==(int,int):FALSE(int,int):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):152:comparison == 0 |==> false
4236:LVR:TRUE:FALSE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):153:true |==> false
4237:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):153:foundCycle = true |==> <NO-OP>
4238:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):154:new ArrayList<V>() |==> null
4239:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):155:pointStack.descendingIterator() |==> null
4240:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):158:v = it.next() |==> <NO-OP>
4241:COR:start.equals(v):TRUE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):159:start.equals(v) |==> false
4242:COR:start.equals(v):FALSE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):159:start.equals(v) |==> true
4243:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):160:break; |==> <NO-OP>
4244:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):163:cycle.add(start) |==> <NO-OP>
4245:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):165:cycle.add(it.next()) |==> <NO-OP>
4246:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):167:cycles.add(cycle) |==> <NO-OP>
4247:COR:marked.contains(currentVertex):TRUE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):168:marked.contains(currentVertex) |==> false
4248:COR:marked.contains(currentVertex):FALSE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):168:marked.contains(currentVertex) |==> true
4249:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):169:backtrack(start, currentVertex) |==> false
4250:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):170:foundCycle || gotCycle |==> foundCycle != gotCycle
4251:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):170:foundCycle || gotCycle |==> foundCycle
4252:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):170:foundCycle || gotCycle |==> gotCycle
4253:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):170:foundCycle || gotCycle |==> true
4254:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):170:foundCycle = foundCycle || gotCycle |==> <NO-OP>
4255:COR:foundCycle:TRUE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):174:foundCycle |==> false
4256:COR:foundCycle:FALSE:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):174:foundCycle |==> true
4257:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):176:marked.remove(markedStack.pop()) |==> <NO-OP>
4258:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):178:marked.remove(markedStack.pop()) |==> <NO-OP>
4259:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):181:pointStack.pop() |==> <NO-OP>
4260:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@backtrack(V,V):182:foundCycle |==> false
4261:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@initState():187:cycles = new ArrayList<List<V>>() |==> <NO-OP>
4262:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@initState():188:marked = new HashSet<V>() |==> <NO-OP>
4263:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@initState():189:markedStack = new ArrayDeque<V>() |==> <NO-OP>
4264:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@initState():190:pointStack = new ArrayDeque<V>() |==> <NO-OP>
4265:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@initState():191:vToI = new HashMap<V, Integer>() |==> <NO-OP>
4266:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@initState():192:removed = new HashMap<V, Set<V>>() |==> <NO-OP>
4267:LVR:0:POS:org.jgrapht.alg.cycle.TarjanSimpleCycles@initState():193:0 |==> 1
4268:LVR:0:NEG:org.jgrapht.alg.cycle.TarjanSimpleCycles@initState():193:0 |==> -1
4269:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@initState():195:vToI.put(v, index++) |==> <NO-OP>
4270:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@clearState():201:cycles = null |==> <NO-OP>
4271:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@clearState():202:marked = null |==> <NO-OP>
4272:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@clearState():203:markedStack = null |==> <NO-OP>
4273:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@clearState():204:pointStack = null |==> <NO-OP>
4274:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@clearState():205:vToI = null |==> <NO-OP>
4275:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@toI(V):210:vToI.get(v) |==> null
4276:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@getRemoved(V):217:removed.get(v) |==> null
4277:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.TarjanSimpleCycles@getRemoved(V):218:result == null |==> false
4278:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@getRemoved(V):219:result = new HashSet<V>() |==> <NO-OP>
4279:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TarjanSimpleCycles@getRemoved(V):220:removed.put(v, result) |==> <NO-OP>
4280:EVR:<IDENTIFIER(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.TarjanSimpleCycles@getRemoved(V):222:result |==> null
4281:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.TiernanSimpleCycles@<init>(org.jgrapht.DirectedGraph<V,E>):81:graph == null |==> false
4282:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@<init>(org.jgrapht.DirectedGraph<V,E>):84:this.graph = graph |==> <NO-OP>
4283:EVR:<IDENTIFIER(org.jgrapht.DirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@getGraph():94:graph |==> null
4284:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.TiernanSimpleCycles@setGraph(org.jgrapht.DirectedGraph<V,E>):102:graph == null |==> false
4285:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@setGraph(org.jgrapht.DirectedGraph<V,E>):105:this.graph = graph |==> <NO-OP>
4286:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():113:graph == null |==> false
4287:EVR:<NEW_CLASS(java.util.HashMap<V,java.lang.Integer>)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():116:new HashMap<V, Integer>() |==> null
4288:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():117:new ArrayList<V>() |==> null
4289:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():118:new HashSet<V>() |==> null
4290:EVR:<NEW_CLASS(java.util.HashMap<V,java.util.Set<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():119:new HashMap<V, Set<V>>() |==> null
4291:EVR:<NEW_CLASS(java.util.LinkedList<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():120:new LinkedList<List<V>>() |==> null
4292:LVR:0:POS:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():122:0 |==> 1
4293:LVR:0:NEG:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():122:0 |==> -1
4294:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():124:blocked.put(v, new HashSet<V>()) |==> <NO-OP>
4295:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():125:indices.put(v, index++) |==> <NO-OP>
4296:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():128:graph.vertexSet().iterator() |==> null
4297:COR:vertexIterator.hasNext():TRUE:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():129:vertexIterator.hasNext() |==> false
4298:COR:vertexIterator.hasNext():FALSE:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():129:vertexIterator.hasNext() |==> true
4299:STD:<RETURN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():130:return cycles; |==> <NO-OP>
4300:LVR:0:POS:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():136:0 |==> 1
4301:LVR:0:NEG:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():136:0 |==> -1
4302:LVR:FALSE:TRUE:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():137:false |==> true
4303:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():139:endOfPath = vertexIterator.next() |==> <NO-OP>
4304:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():140:path.add(endOfPath) |==> <NO-OP>
4305:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():141:pathSet.add(endOfPath) |==> <NO-OP>
4306:LVR:FALSE:TRUE:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():150:false |==> true
4307:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():150:extensionFound = false |==> <NO-OP>
4308:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():152:graph.getEdgeTarget(e) |==> null
4309:LVR:0:POS:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():154:0 |==> 1
4310:LVR:0:NEG:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():154:0 |==> -1
4311:LVR:0:POS:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():155:0 |==> 1
4312:LVR:0:NEG:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():155:0 |==> -1
4313:ROR:>(int,int):!=(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():155:cmp > 0 |==> cmp != 0
4314:ROR:>(int,int):>=(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():155:cmp > 0 |==> cmp >= 0
4315:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():155:cmp > 0 |==> false
4316:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():155:(cmp > 0) && !pathSet.contains(n) |==> (cmp > 0) == !pathSet.contains(n)
4317:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():156:(cmp > 0) && !pathSet.contains(n) |==> false
4318:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():155:(cmp > 0) && !pathSet.contains(n) |==> (cmp > 0)
4319:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():156:(cmp > 0) && !pathSet.contains(n) |==> !pathSet.contains(n)
4320:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():155:(cmp > 0) && !pathSet.contains(n) && !blocked.get(endOfPath).contains(n) |==> ((cmp > 0) && !pathSet.contains(n)) == !blocked.get(endOfPath).contains(n)
4321:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():157:(cmp > 0) && !pathSet.contains(n) && !blocked.get(endOfPath).contains(n) |==> false
4322:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():155:(cmp > 0) && !pathSet.contains(n) && !blocked.get(endOfPath).contains(n) |==> (cmp > 0) && !pathSet.contains(n)
4323:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():157:(cmp > 0) && !pathSet.contains(n) && !blocked.get(endOfPath).contains(n) |==> !blocked.get(endOfPath).contains(n)
4324:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():159:path.add(n) |==> <NO-OP>
4325:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():160:pathSet.add(n) |==> <NO-OP>
4326:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():161:endOfPath = n |==> <NO-OP>
4327:LVR:TRUE:FALSE:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():162:true |==> false
4328:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():162:extensionFound = true |==> <NO-OP>
4329:STD:<BREAK>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():163:break; |==> <NO-OP>
4330:LVR:0:POS:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():169:0 |==> 1
4331:LVR:0:NEG:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():169:0 |==> -1
4332:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():169:startOfPath = path.get(0) |==> <NO-OP>
4333:COR:graph.containsEdge(endOfPath, startOfPath):TRUE:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():170:graph.containsEdge(endOfPath, startOfPath) |==> false
4334:COR:graph.containsEdge(endOfPath, startOfPath):FALSE:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():170:graph.containsEdge(endOfPath, startOfPath) |==> true
4335:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():171:new ArrayList<V>() |==> null
4336:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():172:cycle.addAll(path) |==> <NO-OP>
4337:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():173:cycles.add(cycle) |==> <NO-OP>
4338:LVR:POS:0:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():177:1 |==> 0
4339:LVR:POS:NEG:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():177:1 |==> -1
4340:ROR:>(int,int):!=(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():177:path.size() > 1 |==> path.size() != 1
4341:ROR:>(int,int):>=(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():177:path.size() > 1 |==> path.size() >= 1
4342:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():177:path.size() > 1 |==> false
4343:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():178:blocked.get(endOfPath).clear() |==> <NO-OP>
4344:LVR:POS:0:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():179:1 |==> 0
4345:LVR:POS:NEG:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():179:1 |==> -1
4346:AOR:-(int,int):%(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():179:path.size() - 1 |==> path.size() % 1
4347:AOR:-(int,int):*(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():179:path.size() - 1 |==> path.size() * 1
4348:AOR:-(int,int):+(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():179:path.size() - 1 |==> path.size() + 1
4349:AOR:-(int,int):/(int,int):org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():179:path.size() - 1 |==> path.size() / 1
4350:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():179:endIndex = path.size() - 1 |==> <NO-OP>
4351:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():180:path.remove(endIndex) |==> <NO-OP>
4352:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():181:pathSet.remove(endOfPath) |==> <NO-OP>
4353:STD:<DEC>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():182:--endIndex |==> <NO-OP>
4354:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():183:temp = endOfPath |==> <NO-OP>
4355:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():184:endOfPath = path.get(endIndex) |==> <NO-OP>
4356:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():185:blocked.get(endOfPath).add(temp) |==> <NO-OP>
4357:STD:<CONT>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():186:continue; |==> <NO-OP>
4358:COR:vertexIterator.hasNext():TRUE:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():190:vertexIterator.hasNext() |==> false
4359:COR:vertexIterator.hasNext():FALSE:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():190:vertexIterator.hasNext() |==> true
4360:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():191:path.clear() |==> <NO-OP>
4361:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():192:pathSet.clear() |==> <NO-OP>
4362:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():193:endOfPath = vertexIterator.next() |==> <NO-OP>
4363:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():194:path.add(endOfPath) |==> <NO-OP>
4364:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():195:pathSet.add(endOfPath) |==> <NO-OP>
4365:STD:<CALL>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():197:blocked.get(vt).clear() |==> <NO-OP>
4366:STD:<CONT>:<NO-OP>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():199:continue; |==> <NO-OP>
4367:EVR:<IDENTIFIER(java.util.List<java.util.List<V>>)>:<DEFAULT>:org.jgrapht.alg.cycle.TiernanSimpleCycles@findSimpleCycles():206:cycles |==> null
4368:LVR:TRUE:FALSE:org.jgrapht.alg.util.VertexDegreeComparator@<init>(org.jgrapht.UndirectedGraph<V,E>):79:true |==> false
4369:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.util.VertexDegreeComparator@<init>(org.jgrapht.UndirectedGraph<V,E>,boolean):95:graph = g |==> <NO-OP>
4370:STD:<ASSIGN>:<NO-OP>:org.jgrapht.alg.util.VertexDegreeComparator@<init>(org.jgrapht.UndirectedGraph<V,E>,boolean):96:this.ascendingOrder = ascendingOrder |==> <NO-OP>
4371:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):113:graph.degreeOf(v1) |==> 0
4372:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):114:graph.degreeOf(v2) |==> 0
4373:ROR:<(int,int):!=(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):116:degree1 < degree2 |==> degree1 != degree2
4374:ROR:<(int,int):<=(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):116:degree1 < degree2 |==> degree1 <= degree2
4375:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):116:degree1 < degree2 |==> false
4376:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):116:(degree1 < degree2) && ascendingOrder |==> (degree1 < degree2) == ascendingOrder
4377:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):116:(degree1 < degree2) && ascendingOrder |==> false
4378:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):116:(degree1 < degree2) && ascendingOrder |==> (degree1 < degree2)
4379:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):116:(degree1 < degree2) && ascendingOrder |==> ascendingOrder
4380:ROR:>(int,int):!=(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):117:degree1 > degree2 |==> degree1 != degree2
4381:ROR:>(int,int):>=(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):117:degree1 > degree2 |==> degree1 >= degree2
4382:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):117:degree1 > degree2 |==> false
4383:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):117:(degree1 > degree2) && !ascendingOrder |==> (degree1 > degree2) == !ascendingOrder
4384:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):117:(degree1 > degree2) && !ascendingOrder |==> false
4385:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):117:(degree1 > degree2) && !ascendingOrder |==> (degree1 > degree2)
4386:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):117:(degree1 > degree2) && !ascendingOrder |==> !ascendingOrder
4387:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):116:((degree1 < degree2) && ascendingOrder) || ((degree1 > degree2) && !ascendingOrder) |==> ((degree1 < degree2) && ascendingOrder) != ((degree1 > degree2) && !ascendingOrder)
4388:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):116:((degree1 < degree2) && ascendingOrder) || ((degree1 > degree2) && !ascendingOrder) |==> ((degree1 < degree2) && ascendingOrder)
4389:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):117:((degree1 < degree2) && ascendingOrder) || ((degree1 > degree2) && !ascendingOrder) |==> ((degree1 > degree2) && !ascendingOrder)
4390:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):117:((degree1 < degree2) && ascendingOrder) || ((degree1 > degree2) && !ascendingOrder) |==> true
4391:LVR:NEG:0:org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):119:-1 |==> 0
4392:LVR:NEG:POS:org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):119:-1 |==> 1
4393:ROR:>(int,int):!=(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):121:degree1 > degree2 |==> degree1 != degree2
4394:ROR:>(int,int):>=(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):121:degree1 > degree2 |==> degree1 >= degree2
4395:ROR:>(int,int):FALSE(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):121:degree1 > degree2 |==> false
4396:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):121:(degree1 > degree2) && ascendingOrder |==> (degree1 > degree2) == ascendingOrder
4397:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):121:(degree1 > degree2) && ascendingOrder |==> false
4398:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):121:(degree1 > degree2) && ascendingOrder |==> (degree1 > degree2)
4399:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):121:(degree1 > degree2) && ascendingOrder |==> ascendingOrder
4400:ROR:<(int,int):!=(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):122:degree1 < degree2 |==> degree1 != degree2
4401:ROR:<(int,int):<=(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):122:degree1 < degree2 |==> degree1 <= degree2
4402:ROR:<(int,int):FALSE(int,int):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):122:degree1 < degree2 |==> false
4403:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):122:(degree1 < degree2) && !ascendingOrder |==> (degree1 < degree2) == !ascendingOrder
4404:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):122:(degree1 < degree2) && !ascendingOrder |==> false
4405:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):122:(degree1 < degree2) && !ascendingOrder |==> (degree1 < degree2)
4406:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):122:(degree1 < degree2) && !ascendingOrder |==> !ascendingOrder
4407:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):121:((degree1 > degree2) && ascendingOrder) || ((degree1 < degree2) && !ascendingOrder) |==> ((degree1 > degree2) && ascendingOrder) != ((degree1 < degree2) && !ascendingOrder)
4408:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):121:((degree1 > degree2) && ascendingOrder) || ((degree1 < degree2) && !ascendingOrder) |==> ((degree1 > degree2) && ascendingOrder)
4409:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):122:((degree1 > degree2) && ascendingOrder) || ((degree1 < degree2) && !ascendingOrder) |==> ((degree1 < degree2) && !ascendingOrder)
4410:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):122:((degree1 > degree2) && ascendingOrder) || ((degree1 < degree2) && !ascendingOrder) |==> true
4411:LVR:POS:0:org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):124:1 |==> 0
4412:LVR:POS:NEG:org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):124:1 |==> -1
4413:LVR:0:POS:org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):126:0 |==> 1
4414:LVR:0:NEG:org.jgrapht.alg.util.VertexDegreeComparator@compare(V,V):126:0 |==> -1
4415:EVR:<TYPE_CAST(java.io.BufferedReader)>:<DEFAULT>:org.jgrapht.experimental.GraphReader@<init>(java.io.Reader,boolean,double):75:(BufferedReader)input |==> null
4416:EVR:<NEW_CLASS(java.io.BufferedReader)>:<DEFAULT>:org.jgrapht.experimental.GraphReader@<init>(java.io.Reader,boolean,double):77:new BufferedReader(input) |==> null
4417:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.GraphReader@<init>(java.io.Reader,boolean,double):79:isWeighted |==> false
4418:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.experimental.GraphReader@<init>(java.io.Reader,boolean,double):80:defaultWeight |==> 0.0
4419:LVR:FALSE:TRUE:org.jgrapht.experimental.GraphReader@<init>(java.io.Reader):89:false |==> true
4420:LVR:POS:0:org.jgrapht.experimental.GraphReader@<init>(java.io.Reader):89:1 |==> 0
4421:LVR:POS:NEG:org.jgrapht.experimental.GraphReader@<init>(java.io.Reader):89:1 |==> -1
4422:LVR:TRUE:FALSE:org.jgrapht.experimental.GraphReader@<init>(java.io.Reader,double):98:true |==> false
4423:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.GraphReader@split(java.lang.String):107:src == null |==> false
4424:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.GraphReader@split(java.lang.String):108:return null; |==> <NO-OP>
4425:EVR:<METHOD_INVOCATION(java.lang.String[])>:<DEFAULT>:org.jgrapht.experimental.GraphReader@split(java.lang.String):110:src.split("\\s+") |==> null
4426:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.GraphReader@skipComments():117:cols = split(_in.readLine()) |==> <NO-OP>
4427:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.GraphReader@skipComments():119:cols != null |==> true
4428:LVR:0:POS:org.jgrapht.experimental.GraphReader@skipComments():120:0 |==> 1
4429:LVR:0:NEG:org.jgrapht.experimental.GraphReader@skipComments():120:0 |==> -1
4430:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.GraphReader@skipComments():120:cols.length == 0 |==> cols.length <= 0
4431:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.GraphReader@skipComments():120:cols.length == 0 |==> cols.length >= 0
4432:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.GraphReader@skipComments():120:cols.length == 0 |==> false
4433:LVR:0:POS:org.jgrapht.experimental.GraphReader@skipComments():121:0 |==> 1
4434:LVR:0:NEG:org.jgrapht.experimental.GraphReader@skipComments():121:0 |==> -1
4435:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():120:(cols.length == 0) || cols[0].equals("c") |==> (cols.length == 0) != cols[0].equals("c")
4436:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():120:(cols.length == 0) || cols[0].equals("c") |==> (cols.length == 0)
4437:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():121:(cols.length == 0) || cols[0].equals("c") |==> cols[0].equals("c")
4438:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():121:(cols.length == 0) || cols[0].equals("c") |==> true
4439:LVR:0:POS:org.jgrapht.experimental.GraphReader@skipComments():122:0 |==> 1
4440:LVR:0:NEG:org.jgrapht.experimental.GraphReader@skipComments():122:0 |==> -1
4441:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():120:(cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%") |==> ((cols.length == 0) || cols[0].equals("c")) != cols[0].startsWith("%")
4442:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():120:(cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%") |==> (cols.length == 0) || cols[0].equals("c")
4443:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():122:(cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%") |==> cols[0].startsWith("%")
4444:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():122:(cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%") |==> true
4445:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():119:(cols != null) && ((cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%")) |==> (cols != null) == ((cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%"))
4446:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():120:(cols != null) && ((cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%")) |==> false
4447:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():119:(cols != null) && ((cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%")) |==> (cols != null)
4448:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.GraphReader@skipComments():120:(cols != null) && ((cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%")) |==> ((cols.length == 0) || cols[0].equals("c") || cols[0].startsWith("%"))
4449:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.GraphReader@skipComments():124:cols = split(_in.readLine()) |==> <NO-OP>
4450:EVR:<IDENTIFIER(java.lang.String[])>:<DEFAULT>:org.jgrapht.experimental.GraphReader@skipComments():128:cols |==> null
4451:EVR:<METHOD_INVOCATION(java.lang.String[])>:<DEFAULT>:org.jgrapht.experimental.GraphReader@readNodeCount():133:skipComments() |==> null
4452:LVR:0:POS:org.jgrapht.experimental.GraphReader@readNodeCount():134:0 |==> 1
4453:LVR:0:NEG:org.jgrapht.experimental.GraphReader@readNodeCount():134:0 |==> -1
4454:COR:cols[0].equals("p"):TRUE:org.jgrapht.experimental.GraphReader@readNodeCount():134:cols[0].equals("p") |==> false
4455:COR:cols[0].equals("p"):FALSE:org.jgrapht.experimental.GraphReader@readNodeCount():134:cols[0].equals("p") |==> true
4456:LVR:POS:0:org.jgrapht.experimental.GraphReader@readNodeCount():135:1 |==> 0
4457:LVR:POS:NEG:org.jgrapht.experimental.GraphReader@readNodeCount():135:1 |==> -1
4458:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.GraphReader@readNodeCount():135:return Integer.parseInt(cols[Config.__M_NO == 0 && Config.COVERED(4456, 4457) ? 1 : Config.__M_NO == 4457 ? -1 : Config.__M_NO == 4456 ? 0 : 1]); |==> <NO-OP>
4459:LVR:NEG:0:org.jgrapht.experimental.GraphReader@readNodeCount():137:-1 |==> 0
4460:LVR:NEG:POS:org.jgrapht.experimental.GraphReader@readNodeCount():137:-1 |==> 1
4461:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):148:readNodeCount() |==> 0
4462:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):149:resultMap == null |==> false
4463:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):150:resultMap = new HashMap<String, V>() |==> <NO-OP>
4464:LVR:0:POS:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):153:0 |==> 1
4465:LVR:0:NEG:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):153:0 |==> -1
4466:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):153:i < size |==> i != size
4467:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):153:i < size |==> i <= size
4468:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):153:i < size |==> false
4469:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):154:vertexFactory.createVertex() |==> null
4470:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):155:target.addVertex(newVertex) |==> <NO-OP>
4471:LVR:POS:0:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):156:1 |==> 0
4472:LVR:POS:NEG:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):156:1 |==> -1
4473:AOR:+(int,int):%(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):156:i + 1 |==> i % 1
4474:AOR:+(int,int):*(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):156:i + 1 |==> i * 1
4475:AOR:+(int,int):-(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):156:i + 1 |==> i - 1
4476:AOR:+(int,int):/(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):156:i + 1 |==> i / 1
4477:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):156:resultMap.put(Integer.toString(i + 1), newVertex) |==> <NO-OP>
4478:EVR:<METHOD_INVOCATION(java.lang.String[])>:<DEFAULT>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):158:skipComments() |==> null
4479:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):159:cols != null |==> true
4480:LVR:0:POS:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):160:0 |==> 1
4481:LVR:0:NEG:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):160:0 |==> -1
4482:COR:cols[0].equals("e"):TRUE:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):160:cols[0].equals("e") |==> false
4483:COR:cols[0].equals("e"):FALSE:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):160:cols[0].equals("e") |==> true
4484:LVR:POS:0:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):163:1 |==> 0
4485:LVR:POS:NEG:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):163:1 |==> -1
4486:LVR:POS:0:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):164:2 |==> 0
4487:LVR:POS:NEG:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):164:2 |==> -2
4488:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):165:edge != null |==> true
4489:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):165:_isWeighted && (edge != null) |==> _isWeighted == (edge != null)
4490:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):165:_isWeighted && (edge != null) |==> false
4491:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):165:_isWeighted && (edge != null) |==> _isWeighted
4492:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):165:_isWeighted && (edge != null) |==> (edge != null)
4493:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):166:_defaultWeight |==> 0.0
4494:LVR:POS:0:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):167:3 |==> 0
4495:LVR:POS:NEG:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):167:3 |==> -3
4496:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):167:cols.length > 3 |==> cols.length != 3
4497:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):167:cols.length > 3 |==> cols.length >= 3
4498:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):167:cols.length > 3 |==> false
4499:LVR:POS:0:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):168:3 |==> 0
4500:LVR:POS:NEG:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):168:3 |==> -3
4501:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):168:weight = Double.parseDouble(cols[3]) |==> <NO-OP>
4502:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):170:((WeightedGraph<V, E>)target).setEdgeWeight(edge, weight) |==> <NO-OP>
4503:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.GraphReader@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):173:cols = skipComments() |==> <NO-OP>
4504:LVR:FALSE:TRUE:org.jgrapht.experimental.GraphSquare@<init>(org.jgrapht.Graph<V,E>,boolean):70:false |==> true
4505:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphSquare@<init>(org.jgrapht.Graph<V,E>,boolean):71:Graphs.addAllVertices(this, g.vertexSet()) |==> <NO-OP>
4506:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphSquare@<init>(org.jgrapht.Graph<V,E>,boolean):72:addSquareEdges(g, createLoops) |==> <NO-OP>
4507:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.experimental.GraphSquare$1@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):79:e.getEdge() |==> null
4508:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphSquare$1@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):80:addEdgesStartingAt(g, g.getEdgeSource(edge), g.getEdgeTarget(edge), createLoops) |==> <NO-OP>
4509:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphSquare$1@edgeAdded(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):85:addEdgesStartingAt(g, g.getEdgeTarget(edge), g.getEdgeSource(edge), createLoops) |==> <NO-OP>
4510:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphSquare$1@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):94:GraphSquare.super.removeAllEdges(edgeSet()) |==> <NO-OP>
4511:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphSquare$1@edgeRemoved(org.jgrapht.event.GraphEdgeChangeEvent<V,E>):95:addSquareEdges(g, createLoops) |==> <NO-OP>
4512:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphSquare@<init>(org.jgrapht.Graph<V,E>,boolean):75:((ListenableGraph<V, E>)g).addGraphListener(new GraphListener<V, E>(){...) |==> <NO-OP>
4513:COR:g.containsEdge(v, u):TRUE:org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):189:g.containsEdge(v, u) |==> false
4514:COR:g.containsEdge(v, u):FALSE:org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):189:g.containsEdge(v, u) |==> true
4515:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):190:return; |==> <NO-OP>
4516:EVR:<METHOD_INVOCATION(java.util.List<V>)>:<DEFAULT>:org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):193:Graphs.neighborListOf(g, u) |==> null
4517:LVR:0:POS:org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):195:0 |==> 1
4518:LVR:0:NEG:org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):195:0 |==> -1
4519:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):195:i < adjVertices.size() |==> i != adjVertices.size()
4520:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):195:i < adjVertices.size() |==> i <= adjVertices.size()
4521:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):195:i < adjVertices.size() |==> false
4522:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):196:adjVertices.get(i) |==> null
4523:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):198:v != w |==> true
4524:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):198:(v != w) || createLoops |==> (v != w) != createLoops
4525:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):198:(v != w) || createLoops |==> (v != w)
4526:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):198:(v != w) || createLoops |==> createLoops
4527:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):198:(v != w) || createLoops |==> true
4528:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):198:g.containsEdge(u, w) && ((v != w) || createLoops) |==> g.containsEdge(u, w) == ((v != w) || createLoops)
4529:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):198:g.containsEdge(u, w) && ((v != w) || createLoops) |==> false
4530:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):198:g.containsEdge(u, w) && ((v != w) || createLoops) |==> g.containsEdge(u, w)
4531:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):198:g.containsEdge(u, w) && ((v != w) || createLoops) |==> ((v != w) || createLoops)
4532:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphSquare@addEdgesStartingAt(org.jgrapht.Graph<V,E>,V,V,boolean):199:super.addEdge(v, w) |==> <NO-OP>
4533:EVR:<METHOD_INVOCATION(java.util.List<V>)>:<DEFAULT>:org.jgrapht.experimental.GraphSquare@addSquareEdges(org.jgrapht.Graph<V,E>,boolean):207:Graphs.neighborListOf(g, v) |==> null
4534:LVR:0:POS:org.jgrapht.experimental.GraphSquare@addSquareEdges(org.jgrapht.Graph<V,E>,boolean):209:0 |==> 1
4535:LVR:0:NEG:org.jgrapht.experimental.GraphSquare@addSquareEdges(org.jgrapht.Graph<V,E>,boolean):209:0 |==> -1
4536:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.GraphSquare@addSquareEdges(org.jgrapht.Graph<V,E>,boolean):209:i < adjVertices.size() |==> i != adjVertices.size()
4537:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.GraphSquare@addSquareEdges(org.jgrapht.Graph<V,E>,boolean):209:i < adjVertices.size() |==> i <= adjVertices.size()
4538:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.GraphSquare@addSquareEdges(org.jgrapht.Graph<V,E>,boolean):209:i < adjVertices.size() |==> false
4539:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphSquare@addSquareEdges(org.jgrapht.Graph<V,E>,boolean):210:addEdgesStartingAt(g, v, adjVertices.get(i), createLoops) |==> <NO-OP>
4540:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isEmpty(org.jgrapht.Graph<V,E>):32:g.edgeSet().isEmpty() |==> false
4541:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):37:g.vertexSet().size() |==> 0
4542:LVR:POS:0:org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:1 |==> 0
4543:LVR:POS:NEG:org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:1 |==> -1
4544:AOR:-(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n - 1 |==> n % 1
4545:AOR:-(int,int):*(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n - 1 |==> n * 1
4546:AOR:-(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n - 1 |==> n + 1
4547:AOR:-(int,int):/(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n - 1 |==> n / 1
4548:AOR:*(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n * (n - 1) |==> n % (n - 1)
4549:AOR:*(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n * (n - 1) |==> n + (n - 1)
4550:AOR:*(int,int):-(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n * (n - 1) |==> n - (n - 1)
4551:AOR:*(int,int):/(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n * (n - 1) |==> n / (n - 1)
4552:LVR:POS:0:org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:2 |==> 0
4553:LVR:POS:NEG:org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:2 |==> -2
4554:AOR:/(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n * (n - 1) / 2 |==> n * (n - 1) % 2
4555:AOR:/(int,int):*(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n * (n - 1) / 2 |==> n * (n - 1) * 2
4556:AOR:/(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n * (n - 1) / 2 |==> n * (n - 1) + 2
4557:AOR:/(int,int):-(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:n * (n - 1) / 2 |==> n * (n - 1) - 2
4558:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):38:g.edgeSet().size() == (n * (n - 1) / 2) |==> g.edgeSet().size() <= (n * (n - 1) / 2)
4559:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):38:g.edgeSet().size() == (n * (n - 1) / 2) |==> g.edgeSet().size() >= (n * (n - 1) / 2)
4560:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.GraphTests@isComplete(org.jgrapht.Graph<V,E>):39:g.edgeSet().size() == (n * (n - 1) / 2) |==> false
4561:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):44:g.vertexSet().size() |==> 0
4562:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):45:g.edgeSet().size() |==> 0
4563:LVR:POS:0:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):47:1 |==> 0
4564:LVR:POS:NEG:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):47:1 |==> -1
4565:AOR:-(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):47:numVertices - 1 |==> numVertices % 1
4566:AOR:-(int,int):*(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):47:numVertices - 1 |==> numVertices * 1
4567:AOR:-(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):47:numVertices - 1 |==> numVertices + 1
4568:AOR:-(int,int):/(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):47:numVertices - 1 |==> numVertices / 1
4569:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):47:numEdges < (numVertices - 1) |==> numEdges != (numVertices - 1)
4570:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):47:numEdges < (numVertices - 1) |==> numEdges <= (numVertices - 1)
4571:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):47:numEdges < (numVertices - 1) |==> false
4572:LVR:FALSE:TRUE:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):48:false |==> true
4573:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):48:return Config.__M_NO == 0 && Config.COVERED(4572, 4572) ? false : Config.__M_NO == 4572 ? true : false; |==> <NO-OP>
4574:LVR:POS:0:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):50:2 |==> 0
4575:LVR:POS:NEG:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):50:2 |==> -2
4576:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):50:numVertices < 2 |==> numVertices != 2
4577:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):50:numVertices < 2 |==> numVertices <= 2
4578:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):50:numVertices < 2 |==> false
4579:LVR:POS:0:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:1 |==> 0
4580:LVR:POS:NEG:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:1 |==> -1
4581:AOR:-(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numVertices - 1 |==> numVertices % 1
4582:AOR:-(int,int):*(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numVertices - 1 |==> numVertices * 1
4583:AOR:-(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numVertices - 1 |==> numVertices + 1
4584:AOR:-(int,int):/(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numVertices - 1 |==> numVertices / 1
4585:LVR:POS:0:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:2 |==> 0
4586:LVR:POS:NEG:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:2 |==> -2
4587:AOR:-(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numVertices - 2 |==> numVertices % 2
4588:AOR:-(int,int):*(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numVertices - 2 |==> numVertices * 2
4589:AOR:-(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numVertices - 2 |==> numVertices + 2
4590:AOR:-(int,int):/(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numVertices - 2 |==> numVertices / 2
4591:AOR:*(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices - 1) * (numVertices - 2) |==> (numVertices - 1) % (numVertices - 2)
4592:AOR:*(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices - 1) * (numVertices - 2) |==> (numVertices - 1) + (numVertices - 2)
4593:AOR:*(int,int):-(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices - 1) * (numVertices - 2) |==> (numVertices - 1) - (numVertices - 2)
4594:AOR:*(int,int):/(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices - 1) * (numVertices - 2) |==> (numVertices - 1) / (numVertices - 2)
4595:LVR:POS:0:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:2 |==> 0
4596:LVR:POS:NEG:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:2 |==> -2
4597:AOR:/(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices - 1) * (numVertices - 2) / 2 |==> (numVertices - 1) * (numVertices - 2) % 2
4598:AOR:/(int,int):*(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices - 1) * (numVertices - 2) / 2 |==> (numVertices - 1) * (numVertices - 2) * 2
4599:AOR:/(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices - 1) * (numVertices - 2) / 2 |==> (numVertices - 1) * (numVertices - 2) + 2
4600:AOR:/(int,int):-(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices - 1) * (numVertices - 2) / 2 |==> (numVertices - 1) * (numVertices - 2) - 2
4601:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numEdges > ((numVertices - 1) * (numVertices - 2) / 2) |==> numEdges != ((numVertices - 1) * (numVertices - 2) / 2)
4602:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numEdges > ((numVertices - 1) * (numVertices - 2) / 2) |==> numEdges >= ((numVertices - 1) * (numVertices - 2) / 2)
4603:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:numEdges > ((numVertices - 1) * (numVertices - 2) / 2) |==> false
4604:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):50:(numVertices < 2) || (numEdges > ((numVertices - 1) * (numVertices - 2) / 2)) |==> (numVertices < 2) != (numEdges > ((numVertices - 1) * (numVertices - 2) / 2))
4605:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):50:(numVertices < 2) || (numEdges > ((numVertices - 1) * (numVertices - 2) / 2)) |==> (numVertices < 2)
4606:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices < 2) || (numEdges > ((numVertices - 1) * (numVertices - 2) / 2)) |==> (numEdges > ((numVertices - 1) * (numVertices - 2) / 2))
4607:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):51:(numVertices < 2) || (numEdges > ((numVertices - 1) * (numVertices - 2) / 2)) |==> true
4608:LVR:TRUE:FALSE:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):53:true |==> false
4609:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):53:return Config.__M_NO == 0 && Config.COVERED(4608, 4608) ? true : Config.__M_NO == 4608 ? false : true; |==> <NO-OP>
4610:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):56:new HashSet<V>() |==> null
4611:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):57:new LinkedList<V>() |==> null
4612:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):58:g.vertexSet().iterator().next() |==> null
4613:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):60:queue.add(v) |==> <NO-OP>
4614:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):61:known.add(v) |==> <NO-OP>
4615:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):64:v = queue.removeFirst() |==> <NO-OP>
4616:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):66:Graphs.neighborListOf(g, v).iterator() |==> null
4617:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):69:v = it.next() |==> <NO-OP>
4618:COR:known.contains(v):TRUE:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):70:known.contains(v) |==> false
4619:COR:known.contains(v):FALSE:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):70:known.contains(v) |==> true
4620:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):71:known.add(v) |==> <NO-OP>
4621:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):72:queue.add(v) |==> <NO-OP>
4622:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):76:known.size() == numVertices |==> known.size() <= numVertices
4623:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):76:known.size() == numVertices |==> known.size() >= numVertices
4624:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.GraphTests@isConnected(org.jgrapht.Graph<V,E>):76:known.size() == numVertices |==> false
4625:LVR:POS:0:org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:1 |==> 0
4626:LVR:POS:NEG:org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:1 |==> -1
4627:AOR:-(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:g.vertexSet().size() - 1 |==> g.vertexSet().size() % 1
4628:AOR:-(int,int):*(int,int):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:g.vertexSet().size() - 1 |==> g.vertexSet().size() * 1
4629:AOR:-(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:g.vertexSet().size() - 1 |==> g.vertexSet().size() + 1
4630:AOR:-(int,int):/(int,int):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:g.vertexSet().size() - 1 |==> g.vertexSet().size() / 1
4631:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:g.edgeSet().size() == (g.vertexSet().size() - 1) |==> g.edgeSet().size() <= (g.vertexSet().size() - 1)
4632:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:g.edgeSet().size() == (g.vertexSet().size() - 1) |==> g.edgeSet().size() >= (g.vertexSet().size() - 1)
4633:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:g.edgeSet().size() == (g.vertexSet().size() - 1) |==> false
4634:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):81:isConnected(g) && (g.edgeSet().size() == (g.vertexSet().size() - 1)) |==> isConnected(g) == (g.edgeSet().size() == (g.vertexSet().size() - 1))
4635:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:isConnected(g) && (g.edgeSet().size() == (g.vertexSet().size() - 1)) |==> false
4636:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):81:isConnected(g) && (g.edgeSet().size() == (g.vertexSet().size() - 1)) |==> isConnected(g)
4637:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.GraphTests@isTree(org.jgrapht.Graph<V,E>):82:isConnected(g) && (g.edgeSet().size() == (g.vertexSet().size() - 1)) |==> (g.edgeSet().size() == (g.vertexSet().size() - 1))
4638:LVR:POS:0:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):87:4 |==> 0
4639:LVR:POS:NEG:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):87:4 |==> -4
4640:AOR:*(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):87:4 * g.edgeSet().size() |==> 4 % g.edgeSet().size()
4641:AOR:*(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):87:4 * g.edgeSet().size() |==> 4 + g.edgeSet().size()
4642:AOR:*(int,int):-(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):87:4 * g.edgeSet().size() |==> 4 - g.edgeSet().size()
4643:AOR:*(int,int):/(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):87:4 * g.edgeSet().size() |==> 4 / g.edgeSet().size()
4644:AOR:*(int,int):%(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):88:g.vertexSet().size() * g.vertexSet().size() |==> g.vertexSet().size() % g.vertexSet().size()
4645:AOR:*(int,int):+(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):88:g.vertexSet().size() * g.vertexSet().size() |==> g.vertexSet().size() + g.vertexSet().size()
4646:AOR:*(int,int):-(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):88:g.vertexSet().size() * g.vertexSet().size() |==> g.vertexSet().size() - g.vertexSet().size()
4647:AOR:*(int,int):/(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):88:g.vertexSet().size() * g.vertexSet().size() |==> g.vertexSet().size() / g.vertexSet().size()
4648:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):87:(4 * g.edgeSet().size()) > (g.vertexSet().size() * g.vertexSet().size()) |==> (4 * g.edgeSet().size()) != (g.vertexSet().size() * g.vertexSet().size())
4649:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):87:(4 * g.edgeSet().size()) > (g.vertexSet().size() * g.vertexSet().size()) |==> (4 * g.edgeSet().size()) >= (g.vertexSet().size() * g.vertexSet().size())
4650:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):88:(4 * g.edgeSet().size()) > (g.vertexSet().size() * g.vertexSet().size()) |==> false
4651:LVR:FALSE:TRUE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):90:false |==> true
4652:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):90:return Config.__M_NO == 0 && Config.COVERED(4651, 4651) ? false : Config.__M_NO == 4651 ? true : false; |==> <NO-OP>
4653:COR:isEmpty(g):TRUE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):92:isEmpty(g) |==> false
4654:COR:isEmpty(g):FALSE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):92:isEmpty(g) |==> true
4655:LVR:TRUE:FALSE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):93:true |==> false
4656:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):93:return Config.__M_NO == 0 && Config.COVERED(4655, 4655) ? true : Config.__M_NO == 4655 ? false : true; |==> <NO-OP>
4657:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):96:new HashSet<V>(g.vertexSet()) |==> null
4658:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):97:new LinkedList<V>() |==> null
4659:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):98:unknown.iterator().next() |==> null
4660:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):99:new HashSet<V>() |==> null
4661:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):101:queue.add(v) |==> <NO-OP>
4662:COR:queue.isEmpty():TRUE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):104:queue.isEmpty() |==> false
4663:COR:queue.isEmpty():FALSE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):104:queue.isEmpty() |==> true
4664:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):105:queue.add(unknown.iterator().next()) |==> <NO-OP>
4665:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):108:v = queue.removeFirst() |==> <NO-OP>
4666:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):109:unknown.remove(v) |==> <NO-OP>
4667:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):112:Graphs.neighborListOf(g, v).iterator() |==> null
4668:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):115:it.next() |==> null
4669:COR:unknown.contains(n):TRUE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):116:unknown.contains(n) |==> false
4670:COR:unknown.contains(n):FALSE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):116:unknown.contains(n) |==> true
4671:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):117:queue.add(n) |==> <NO-OP>
4672:COR:odd.contains(v):TRUE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):118:odd.contains(v) |==> false
4673:COR:odd.contains(v):FALSE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):118:odd.contains(v) |==> true
4674:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):119:odd.add(n) |==> <NO-OP>
4675:LOR:^(boolean,boolean):&(boolean,boolean):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):121:odd.contains(v) ^ odd.contains(n) |==> odd.contains(v) & odd.contains(n)
4676:LOR:^(boolean,boolean):|(boolean,boolean):org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):121:odd.contains(v) ^ odd.contains(n) |==> odd.contains(v) | odd.contains(n)
4677:LVR:FALSE:TRUE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):122:false |==> true
4678:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):122:return Config.__M_NO == 0 && Config.COVERED(4677, 4677) ? false : Config.__M_NO == 4677 ? true : false; |==> <NO-OP>
4679:LVR:TRUE:FALSE:org.jgrapht.experimental.GraphTests@isBipartite(org.jgrapht.Graph<V,E>):126:true |==> false
4680:LVR:0:POS:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:0 |==> 1
4681:LVR:0:NEG:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:0 |==> -1
4682:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:numVertices1 < 0 |==> numVertices1 != 0
4683:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:numVertices1 < 0 |==> numVertices1 <= 0
4684:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:numVertices1 < 0 |==> false
4685:LVR:0:POS:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:0 |==> 1
4686:LVR:0:NEG:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:0 |==> -1
4687:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:numVertices2 < 0 |==> numVertices2 != 0
4688:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:numVertices2 < 0 |==> numVertices2 <= 0
4689:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:numVertices2 < 0 |==> false
4690:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:(numVertices1 < 0) || (numVertices2 < 0) |==> (numVertices1 < 0) != (numVertices2 < 0)
4691:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:(numVertices1 < 0) || (numVertices2 < 0) |==> (numVertices1 < 0)
4692:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:(numVertices1 < 0) || (numVertices2 < 0) |==> (numVertices2 < 0)
4693:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):80:(numVertices1 < 0) || (numVertices2 < 0) |==> true
4694:LVR:0:POS:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:0 |==> 1
4695:LVR:0:NEG:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:0 |==> -1
4696:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numEdges < 0 |==> numEdges != 0
4697:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numEdges < 0 |==> numEdges <= 0
4698:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numEdges < 0 |==> false
4699:AOR:*(int,int):%(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numVertices1 * numVertices2 |==> numVertices1 % numVertices2
4700:AOR:*(int,int):+(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numVertices1 * numVertices2 |==> numVertices1 + numVertices2
4701:AOR:*(int,int):-(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numVertices1 * numVertices2 |==> numVertices1 - numVertices2
4702:AOR:*(int,int):/(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numVertices1 * numVertices2 |==> numVertices1 / numVertices2
4703:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numEdges > (numVertices1 * numVertices2) |==> numEdges != (numVertices1 * numVertices2)
4704:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numEdges > (numVertices1 * numVertices2) |==> numEdges >= (numVertices1 * numVertices2)
4705:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:numEdges > (numVertices1 * numVertices2) |==> false
4706:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:(numEdges < 0) || (numEdges > (numVertices1 * numVertices2)) |==> (numEdges < 0) != (numEdges > (numVertices1 * numVertices2))
4707:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:(numEdges < 0) || (numEdges > (numVertices1 * numVertices2)) |==> (numEdges < 0)
4708:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:(numEdges < 0) || (numEdges > (numVertices1 * numVertices2)) |==> (numEdges > (numVertices1 * numVertices2))
4709:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):84:(numEdges < 0) || (numEdges > (numVertices1 * numVertices2)) |==> true
4710:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):88:{numVertices1, numVertices2} |==> null
4711:EVR:<IDENTIFIER(int[])>:<DEFAULT>:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):92:numVertices |==> null
4712:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int,int,int):93:numEdges |==> 0
4713:LVR:0:POS:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):107:0 |==> 1
4714:LVR:0:NEG:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):107:0 |==> -1
4715:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):107:numEdges < 0 |==> numEdges != 0
4716:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):107:numEdges < 0 |==> numEdges <= 0
4717:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):107:numEdges < 0 |==> false
4718:LVR:0:POS:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):111:0 |==> 1
4719:LVR:0:NEG:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):111:0 |==> -1
4720:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):111:i < numVertices.length |==> i != numVertices.length
4721:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):111:i < numVertices.length |==> i <= numVertices.length
4722:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):111:i < numVertices.length |==> false
4723:LVR:0:POS:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):112:0 |==> 1
4724:LVR:0:NEG:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):112:0 |==> -1
4725:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):112:numVertices[i] < 0 |==> numVertices[i] != 0
4726:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):112:numVertices[i] < 0 |==> numVertices[i] <= 0
4727:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):112:numVertices[i] < 0 |==> false
4728:LVR:0:POS:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):116:0 |==> 1
4729:LVR:0:NEG:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):116:0 |==> -1
4730:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):116:j < i |==> j != i
4731:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):116:j < i |==> j <= i
4732:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):116:j < i |==> false
4733:AOR:*(int,int):%(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):117:numVertices[i] * numVertices[j] |==> numVertices[i] % numVertices[j]
4734:AOR:*(int,int):+(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):117:numVertices[i] * numVertices[j] |==> numVertices[i] + numVertices[j]
4735:AOR:*(int,int):-(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):117:numVertices[i] * numVertices[j] |==> numVertices[i] - numVertices[j]
4736:AOR:*(int,int):/(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):117:numVertices[i] * numVertices[j] |==> numVertices[i] / numVertices[j]
4737:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):117:numEdges > (numVertices[i] * numVertices[j]) |==> numEdges != (numVertices[i] * numVertices[j])
4738:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):117:numEdges > (numVertices[i] * numVertices[j]) |==> numEdges >= (numVertices[i] * numVertices[j])
4739:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):117:numEdges > (numVertices[i] * numVertices[j]) |==> false
4740:EVR:<IDENTIFIER(int[])>:<DEFAULT>:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):124:numVertices |==> null
4741:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.PartiteRandomGraphGenerator@<init>(int[],int):125:numEdges |==> 0
4742:EVR:<NEW_ARRAY(java.lang.Object[][])>:<DEFAULT>:org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):144:new Object[numVertices.length][] |==> null
4743:LVR:0:POS:org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):146:0 |==> 1
4744:LVR:0:NEG:org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):146:0 |==> -1
4745:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):146:i < numVertices.length |==> i != numVertices.length
4746:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):146:i < numVertices.length |==> i <= numVertices.length
4747:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):146:i < numVertices.length |==> false
4748:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):147:vertices[i] = RandomGraphHelper.addVertices(target, vertexFactory, numVertices[i]) |==> <NO-OP>
4749:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):153:resultMap != null |==> true
4750:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):154:resultMap.put(Integer.toString(i), vertices[i]) |==> <NO-OP>
4751:LVR:0:POS:org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):157:0 |==> 1
4752:LVR:0:NEG:org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):157:0 |==> -1
4753:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):157:j < i |==> j != i
4754:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):157:j < i |==> j <= i
4755:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):157:j < i |==> false
4756:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.PartiteRandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,java.lang.Object[]>):158:RandomGraphHelper.addEdges(target, Arrays.asList(vertices[i]), Arrays.asList(vertices[j]), numEdges) |==> <NO-OP>
4757:EVR:<NEW_CLASS(java.util.Random)>:<DEFAULT>:org.jgrapht.experimental.RandomGraphHelper:58:new Random() |==> null
4758:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.RandomGraphHelper@addEdges(org.jgrapht.Graph,java.util.List,java.util.List,int):81:sourceVertices.size() |==> 0
4759:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.RandomGraphHelper@addEdges(org.jgrapht.Graph,java.util.List,java.util.List,int):82:destVertices.size() |==> 0
4760:LVR:0:POS:org.jgrapht.experimental.RandomGraphHelper@addEdges(org.jgrapht.Graph,java.util.List,java.util.List,int):84:0 |==> 1
4761:LVR:0:NEG:org.jgrapht.experimental.RandomGraphHelper@addEdges(org.jgrapht.Graph,java.util.List,java.util.List,int):84:0 |==> -1
4762:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.RandomGraphHelper@addEdges(org.jgrapht.Graph,java.util.List,java.util.List,int):84:i < numEdges |==> i != numEdges
4763:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.RandomGraphHelper@addEdges(org.jgrapht.Graph,java.util.List,java.util.List,int):84:i < numEdges |==> i <= numEdges
4764:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.RandomGraphHelper@addEdges(org.jgrapht.Graph,java.util.List,java.util.List,int):84:i < numEdges |==> false
4765:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.RandomGraphHelper@addEdges(org.jgrapht.Graph,java.util.List,java.util.List,int):90:target.addEdge(sourceVertices.get(randSingleton.nextInt(sourceSize)), destVertices.get(randSingleton.nextInt(destSize))) == null |==> false
4766:EVR:<NEW_ARRAY(java.lang.Object[])>:<DEFAULT>:org.jgrapht.experimental.RandomGraphHelper@addVertices(org.jgrapht.Graph,org.jgrapht.VertexFactory,int):112:new Object[numVertices] |==> null
4767:LVR:0:POS:org.jgrapht.experimental.RandomGraphHelper@addVertices(org.jgrapht.Graph,org.jgrapht.VertexFactory,int):114:0 |==> 1
4768:LVR:0:NEG:org.jgrapht.experimental.RandomGraphHelper@addVertices(org.jgrapht.Graph,org.jgrapht.VertexFactory,int):114:0 |==> -1
4769:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.RandomGraphHelper@addVertices(org.jgrapht.Graph,org.jgrapht.VertexFactory,int):114:i < numVertices |==> i != numVertices
4770:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.RandomGraphHelper@addVertices(org.jgrapht.Graph,org.jgrapht.VertexFactory,int):114:i < numVertices |==> i <= numVertices
4771:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.RandomGraphHelper@addVertices(org.jgrapht.Graph,org.jgrapht.VertexFactory,int):114:i < numVertices |==> false
4772:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.RandomGraphHelper@addVertices(org.jgrapht.Graph,org.jgrapht.VertexFactory,int):115:vertices[i] = vertexFactory.createVertex() |==> <NO-OP>
4773:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.RandomGraphHelper@addVertices(org.jgrapht.Graph,org.jgrapht.VertexFactory,int):116:target.addVertex(vertices[i]) |==> <NO-OP>
4774:EVR:<IDENTIFIER(java.lang.Object[])>:<DEFAULT>:org.jgrapht.experimental.RandomGraphHelper@addVertices(org.jgrapht.Graph,org.jgrapht.VertexFactory,int):119:vertices |==> null
4775:LVR:0:POS:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):75:0 |==> 1
4776:LVR:0:NEG:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):75:0 |==> -1
4777:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):75:numVertices < 0 |==> numVertices != 0
4778:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):75:numVertices < 0 |==> numVertices <= 0
4779:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):75:numVertices < 0 |==> false
4780:LVR:0:POS:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):79:0 |==> 1
4781:LVR:0:NEG:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):79:0 |==> -1
4782:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):79:numEdges < 0 |==> numEdges != 0
4783:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):79:numEdges < 0 |==> numEdges <= 0
4784:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):79:numEdges < 0 |==> false
4785:LVR:POS:0:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:1 |==> 0
4786:LVR:POS:NEG:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:1 |==> -1
4787:AOR:-(int,int):%(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices - 1 |==> numVertices % 1
4788:AOR:-(int,int):*(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices - 1 |==> numVertices * 1
4789:AOR:-(int,int):+(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices - 1 |==> numVertices + 1
4790:AOR:-(int,int):/(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices - 1 |==> numVertices / 1
4791:AOR:*(int,int):%(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices * (numVertices - 1) |==> numVertices % (numVertices - 1)
4792:AOR:*(int,int):+(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices * (numVertices - 1) |==> numVertices + (numVertices - 1)
4793:AOR:*(int,int):-(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices * (numVertices - 1) |==> numVertices - (numVertices - 1)
4794:AOR:*(int,int):/(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices * (numVertices - 1) |==> numVertices / (numVertices - 1)
4795:LVR:POS:0:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:2 |==> 0
4796:LVR:POS:NEG:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:2 |==> -2
4797:AOR:/(int,int):%(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices * (numVertices - 1) / 2 |==> numVertices * (numVertices - 1) % 2
4798:AOR:/(int,int):*(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices * (numVertices - 1) / 2 |==> numVertices * (numVertices - 1) * 2
4799:AOR:/(int,int):+(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices * (numVertices - 1) / 2 |==> numVertices * (numVertices - 1) + 2
4800:AOR:/(int,int):-(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numVertices * (numVertices - 1) / 2 |==> numVertices * (numVertices - 1) - 2
4801:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numEdges > (numVertices * (numVertices - 1) / 2) |==> numEdges != (numVertices * (numVertices - 1) / 2)
4802:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numEdges > (numVertices * (numVertices - 1) / 2) |==> numEdges >= (numVertices * (numVertices - 1) / 2)
4803:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:numEdges > (numVertices * (numVertices - 1) / 2) |==> false
4804:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):79:(numEdges < 0) || (numEdges > (numVertices * (numVertices - 1) / 2)) |==> (numEdges < 0) != (numEdges > (numVertices * (numVertices - 1) / 2))
4805:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):79:(numEdges < 0) || (numEdges > (numVertices * (numVertices - 1) / 2)) |==> (numEdges < 0)
4806:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:(numEdges < 0) || (numEdges > (numVertices * (numVertices - 1) / 2)) |==> (numEdges > (numVertices * (numVertices - 1) / 2))
4807:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):80:(numEdges < 0) || (numEdges > (numVertices * (numVertices - 1) / 2)) |==> true
4808:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):85:numVertices |==> 0
4809:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.UniformRandomGraphGenerator@<init>(int,int):86:numEdges |==> 0
4810:EVR:<METHOD_INVOCATION(java.lang.Object[])>:<DEFAULT>:org.jgrapht.experimental.UniformRandomGraphGenerator@generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map):100:RandomGraphHelper.addVertices(target, vertexFactory, numVertices) |==> null
4811:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.UniformRandomGraphGenerator@generateGraph(org.jgrapht.Graph,org.jgrapht.VertexFactory,java.util.Map):104:RandomGraphHelper.addEdges(target, Arrays.asList(vertices), Arrays.asList(vertices), numEdges) |==> <NO-OP>
4812:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):41:g.vertexSet().size() |==> 0
4813:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):42:new ArrayList<V>(numVertices) |==> null
4814:EVR:<NEW_ARRAY(int[][])>:<DEFAULT>:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):43:new int[numVertices][] |==> null
4815:EVR:<NEW_CLASS(java.util.HashMap<V,java.lang.Integer>)>:<DEFAULT>:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):44:new HashMap<V, Integer>(numVertices) |==> null
4816:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):46:_neighbors[_vertices.size()] = new int[g.edgesOf(vertex).size()] |==> <NO-OP>
4817:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):47:_vertexToPos.put(vertex, _vertices.size()) |==> <NO-OP>
4818:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):48:_vertices.add(vertex) |==> <NO-OP>
4819:LVR:0:POS:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):50:0 |==> 1
4820:LVR:0:NEG:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):50:0 |==> -1
4821:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):50:i < numVertices |==> i != numVertices
4822:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):50:i < numVertices |==> i <= numVertices
4823:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):50:i < numVertices |==> false
4824:LVR:0:POS:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):51:0 |==> 1
4825:LVR:0:NEG:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):51:0 |==> -1
4826:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):52:_vertices.get(i) |==> null
4827:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.IntArrayGraphAlgorithm@<init>(org.jgrapht.Graph<V,E>):54:_neighbors[i][nbIndex++] = _vertexToPos.get(Graphs.getOppositeVertex(g, e, vertex)) |==> <NO-OP>
4828:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):52:1 |==> 0
4829:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):52:1 |==> -1
4830:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):52:pos - 1 |==> pos % 1
4831:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):52:pos - 1 |==> pos * 1
4832:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):52:pos - 1 |==> pos + 1
4833:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):52:pos - 1 |==> pos / 1
4834:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):52:_colorCount[pos] = _colorCount[pos - 1] |==> <NO-OP>
4835:LVR:0:POS:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):53:0 |==> 1
4836:LVR:0:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):53:0 |==> -1
4837:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):53:1 |==> 0
4838:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):53:1 |==> -1
4839:AOR:+(int,int):%(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):53:_colorCount[pos] + 1 |==> _colorCount[pos] % 1
4840:AOR:+(int,int):*(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):53:_colorCount[pos] + 1 |==> _colorCount[pos] * 1
4841:AOR:+(int,int):-(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):53:_colorCount[pos] + 1 |==> _colorCount[pos] - 1
4842:AOR:+(int,int):/(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):53:_colorCount[pos] + 1 |==> _colorCount[pos] / 1
4843:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):53:_allowedColors[pos].set(0, _colorCount[pos] + 1) |==> <NO-OP>
4844:LVR:0:POS:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):54:0 |==> 1
4845:LVR:0:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):54:0 |==> -1
4846:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):54:i < _neighbors[pos].length |==> i != _neighbors[pos].length
4847:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):54:i < _neighbors[pos].length |==> i <= _neighbors[pos].length
4848:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):54:i < _neighbors[pos].length |==> false
4849:EVR:<ARRAY_ACCESS(int)>:<DEFAULT>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):55:_neighbors[pos][i] |==> 0
4850:LVR:0:POS:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):56:0 |==> 1
4851:LVR:0:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):56:0 |==> -1
4852:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):56:_color[nb] > 0 |==> _color[nb] != 0
4853:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):56:_color[nb] > 0 |==> _color[nb] >= 0
4854:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):56:_color[nb] > 0 |==> false
4855:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):57:_allowedColors[pos].clear(_color[nb]) |==> <NO-OP>
4856:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):61:1 |==> 0
4857:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):61:1 |==> -1
4858:ROR:<=(int,int):<(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):62:i <= _colorCount[pos] |==> i < _colorCount[pos]
4859:ROR:<=(int,int):==(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):62:i <= _colorCount[pos] |==> i == _colorCount[pos]
4860:ROR:<=(int,int):TRUE(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):62:i <= _colorCount[pos] |==> true
4861:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):63:_colorCount[pos] < _chi |==> _colorCount[pos] != _chi
4862:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):63:_colorCount[pos] < _chi |==> _colorCount[pos] <= _chi
4863:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):63:_colorCount[pos] < _chi |==> false
4864:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):62:(i <= _colorCount[pos]) && (_colorCount[pos] < _chi) |==> (i <= _colorCount[pos]) == (_colorCount[pos] < _chi)
4865:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):63:(i <= _colorCount[pos]) && (_colorCount[pos] < _chi) |==> false
4866:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):62:(i <= _colorCount[pos]) && (_colorCount[pos] < _chi) |==> (i <= _colorCount[pos])
4867:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):63:(i <= _colorCount[pos]) && (_colorCount[pos] < _chi) |==> (_colorCount[pos] < _chi)
4868:COR:_allowedColors[pos].get(i):TRUE:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):66:_allowedColors[pos].get(i) |==> false
4869:COR:_allowedColors[pos].get(i):FALSE:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):66:_allowedColors[pos].get(i) |==> true
4870:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):67:_color[pos] = i |==> <NO-OP>
4871:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):68:1 |==> 0
4872:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):68:1 |==> -1
4873:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):68:_neighbors.length - 1 |==> _neighbors.length % 1
4874:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):68:_neighbors.length - 1 |==> _neighbors.length * 1
4875:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):68:_neighbors.length - 1 |==> _neighbors.length + 1
4876:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):68:_neighbors.length - 1 |==> _neighbors.length / 1
4877:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):68:pos < (_neighbors.length - 1) |==> pos != (_neighbors.length - 1)
4878:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):68:pos < (_neighbors.length - 1) |==> pos <= (_neighbors.length - 1)
4879:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):68:pos < (_neighbors.length - 1) |==> false
4880:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):69:1 |==> 0
4881:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):69:1 |==> -1
4882:AOR:+(int,int):%(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):69:pos + 1 |==> pos % 1
4883:AOR:+(int,int):*(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):69:pos + 1 |==> pos * 1
4884:AOR:+(int,int):-(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):69:pos + 1 |==> pos - 1
4885:AOR:+(int,int):/(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):69:pos + 1 |==> pos / 1
4886:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):69:recursiveColor(pos + 1) |==> <NO-OP>
4887:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):71:_chi = _colorCount[pos] |==> <NO-OP>
4888:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):75:1 |==> 0
4889:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):75:1 |==> -1
4890:AOR:+(int,int):%(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):75:_colorCount[pos] + 1 |==> _colorCount[pos] % 1
4891:AOR:+(int,int):*(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):75:_colorCount[pos] + 1 |==> _colorCount[pos] * 1
4892:AOR:+(int,int):-(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):75:_colorCount[pos] + 1 |==> _colorCount[pos] - 1
4893:AOR:+(int,int):/(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):75:_colorCount[pos] + 1 |==> _colorCount[pos] / 1
4894:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):75:(_colorCount[pos] + 1) < _chi |==> (_colorCount[pos] + 1) != _chi
4895:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):75:(_colorCount[pos] + 1) < _chi |==> (_colorCount[pos] + 1) <= _chi
4896:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):75:(_colorCount[pos] + 1) < _chi |==> false
4897:STD:<INC>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):76:_colorCount[pos]++ |==> <NO-OP>
4898:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):77:_color[pos] = _colorCount[pos] |==> <NO-OP>
4899:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):78:1 |==> 0
4900:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):78:1 |==> -1
4901:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):78:_neighbors.length - 1 |==> _neighbors.length % 1
4902:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):78:_neighbors.length - 1 |==> _neighbors.length * 1
4903:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):78:_neighbors.length - 1 |==> _neighbors.length + 1
4904:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):78:_neighbors.length - 1 |==> _neighbors.length / 1
4905:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):78:pos < (_neighbors.length - 1) |==> pos != (_neighbors.length - 1)
4906:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):78:pos < (_neighbors.length - 1) |==> pos <= (_neighbors.length - 1)
4907:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):78:pos < (_neighbors.length - 1) |==> false
4908:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):79:1 |==> 0
4909:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):79:1 |==> -1
4910:AOR:+(int,int):%(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):79:pos + 1 |==> pos % 1
4911:AOR:+(int,int):*(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):79:pos + 1 |==> pos * 1
4912:AOR:+(int,int):-(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):79:pos + 1 |==> pos - 1
4913:AOR:+(int,int):/(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):79:pos + 1 |==> pos / 1
4914:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):79:recursiveColor(pos + 1) |==> <NO-OP>
4915:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):81:_chi = _colorCount[pos] |==> <NO-OP>
4916:LVR:0:POS:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):84:0 |==> 1
4917:LVR:0:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):84:0 |==> -1
4918:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@recursiveColor(int):84:_color[pos] = 0 |==> <NO-OP>
4919:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):92:_chi = _neighbors.length |==> <NO-OP>
4920:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):93:_color = new int[_neighbors.length] |==> <NO-OP>
4921:LVR:0:POS:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):94:0 |==> 1
4922:LVR:0:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):94:0 |==> -1
4923:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):94:1 |==> 0
4924:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):94:1 |==> -1
4925:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):94:_color[0] = 1 |==> <NO-OP>
4926:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):95:_colorCount = new int[_neighbors.length] |==> <NO-OP>
4927:LVR:0:POS:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):96:0 |==> 1
4928:LVR:0:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):96:0 |==> -1
4929:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):96:1 |==> 0
4930:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):96:1 |==> -1
4931:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):96:_colorCount[0] = 1 |==> <NO-OP>
4932:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):97:_allowedColors = new BitSet[_neighbors.length] |==> <NO-OP>
4933:LVR:0:POS:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):98:0 |==> 1
4934:LVR:0:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):98:0 |==> -1
4935:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):98:i < _neighbors.length |==> i != _neighbors.length
4936:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):98:i < _neighbors.length |==> i <= _neighbors.length
4937:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):98:i < _neighbors.length |==> false
4938:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):99:1 |==> 0
4939:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):99:1 |==> -1
4940:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):99:_allowedColors[i] = new BitSet(1) |==> <NO-OP>
4941:LVR:POS:0:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):101:1 |==> 0
4942:LVR:POS:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):101:1 |==> -1
4943:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):101:recursiveColor(1) |==> <NO-OP>
4944:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):102:additionalData != null |==> true
4945:LVR:0:POS:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):103:0 |==> 1
4946:LVR:0:NEG:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):103:0 |==> -1
4947:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):103:i < _vertices.size() |==> i != _vertices.size()
4948:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):103:i < _vertices.size() |==> i <= _vertices.size()
4949:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):103:i < _vertices.size() |==> false
4950:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):104:additionalData.put(_vertices.get(i), _color[i]) |==> <NO-OP>
4951:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.alg.color.BrownBacktrackColoring@getResult(java.util.Map<V,java.lang.Object>):107:_chi |==> 0
4952:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring:34:BEST_ORDER |==> 0
4953:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@<init>(org.jgrapht.Graph<V,E>,int):52:_order = method |==> <NO-OP>
4954:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):59:new int[_neighbors.length] |==> null
4955:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):60:1 |==> 0
4956:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):60:1 |==> -1
4957:EVR:<NEW_CLASS(java.util.BitSet)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):61:new BitSet(_neighbors.length) |==> null
4958:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):63:0 |==> 1
4959:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):63:0 |==> -1
4960:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):63:i < _neighbors.length |==> i != _neighbors.length
4961:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):63:i < _neighbors.length |==> i <= _neighbors.length
4962:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):63:i < _neighbors.length |==> false
4963:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):64:order == null |==> false
4964:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):65:usedColors.clear() |==> <NO-OP>
4965:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):66:0 |==> 1
4966:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):66:0 |==> -1
4967:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):66:j < _neighbors[v].length |==> j != _neighbors[v].length
4968:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):66:j < _neighbors[v].length |==> j <= _neighbors[v].length
4969:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):66:j < _neighbors[v].length |==> false
4970:EVR:<ARRAY_ACCESS(int)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):67:_neighbors[v][j] |==> 0
4971:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):68:0 |==> 1
4972:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):68:0 |==> -1
4973:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):68:color[nb] > 0 |==> color[nb] != 0
4974:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):68:color[nb] > 0 |==> color[nb] >= 0
4975:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):68:color[nb] > 0 |==> false
4976:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):69:usedColors.set(color[nb]) |==> <NO-OP>
4977:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):72:1 |==> 0
4978:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):72:1 |==> -1
4979:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):72:color[v] = usedColors.nextClearBit(1) |==> <NO-OP>
4980:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):73:color[v] > maxColor |==> color[v] != maxColor
4981:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):73:color[v] > maxColor |==> color[v] >= maxColor
4982:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):73:color[v] > maxColor |==> false
4983:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):74:maxColor = color[v] |==> <NO-OP>
4984:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@color(int[]):77:maxColor |==> 0
4985:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():82:new int[_neighbors.length] |==> null
4986:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():83:new int[_neighbors.length] |==> null
4987:EVR:<NEW_CLASS(java.util.ArrayList<java.util.List<java.lang.Integer>>)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():85:new ArrayList<List<Integer>>(_neighbors.length) |==> null
4988:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():86:1 |==> 0
4989:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():86:1 |==> -1
4990:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():86:_neighbors.length - 1 |==> _neighbors.length % 1
4991:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():86:_neighbors.length - 1 |==> _neighbors.length * 1
4992:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():86:_neighbors.length - 1 |==> _neighbors.length + 1
4993:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():86:_neighbors.length - 1 |==> _neighbors.length / 1
4994:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():88:0 |==> 1
4995:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():88:0 |==> -1
4996:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():88:i < _neighbors.length |==> i != _neighbors.length
4997:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():88:i < _neighbors.length |==> i <= _neighbors.length
4998:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():88:i < _neighbors.length |==> false
4999:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():89:buckets.add(new ArrayList<Integer>()) |==> <NO-OP>
5000:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():90:degree[i] = _neighbors[i].length |==> <NO-OP>
5001:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():92:0 |==> 1
5002:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():92:0 |==> -1
5003:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():92:i < _neighbors.length |==> i != _neighbors.length
5004:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():92:i < _neighbors.length |==> i <= _neighbors.length
5005:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():92:i < _neighbors.length |==> false
5006:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():93:buckets.get(degree[i]).add(i) |==> <NO-OP>
5007:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():95:0 |==> 1
5008:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():95:0 |==> -1
5009:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():95:i < _neighbors.length |==> i != _neighbors.length
5010:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():95:i < _neighbors.length |==> i <= _neighbors.length
5011:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():95:i < _neighbors.length |==> false
5012:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():96:0 |==> 1
5013:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():96:0 |==> -1
5014:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():96:buckets.get(i).size() > 0 |==> buckets.get(i).size() != 0
5015:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():96:buckets.get(i).size() > 0 |==> buckets.get(i).size() >= 0
5016:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():96:buckets.get(i).size() > 0 |==> false
5017:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():97:1 |==> 0
5018:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():97:1 |==> -1
5019:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():97:buckets.get(i).size() - 1 |==> buckets.get(i).size() % 1
5020:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():97:buckets.get(i).size() - 1 |==> buckets.get(i).size() * 1
5021:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():97:buckets.get(i).size() - 1 |==> buckets.get(i).size() + 1
5022:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():97:buckets.get(i).size() - 1 |==> buckets.get(i).size() / 1
5023:EVR:<TYPE_CAST(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():98:(Integer)buckets.get(i).get(s) |==> null
5024:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():99:buckets.get(i).remove(s) |==> <NO-OP>
5025:LVR:NEG:0:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():100:-1 |==> 0
5026:LVR:NEG:POS:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():100:-1 |==> 1
5027:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():100:degree[vertex] = -1 |==> <NO-OP>
5028:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():101:order[index--] = vertex |==> <NO-OP>
5029:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():102:0 |==> 1
5030:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():102:0 |==> -1
5031:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():102:j < _neighbors[vertex].length |==> j != _neighbors[vertex].length
5032:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():102:j < _neighbors[vertex].length |==> j <= _neighbors[vertex].length
5033:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():102:j < _neighbors[vertex].length |==> false
5034:EVR:<ARRAY_ACCESS(int)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():103:_neighbors[vertex][j] |==> 0
5035:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():104:0 |==> 1
5036:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():104:0 |==> -1
5037:ROR:>=(int,int):==(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():104:degree[nb] >= 0 |==> degree[nb] == 0
5038:ROR:>=(int,int):>(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():104:degree[nb] >= 0 |==> degree[nb] > 0
5039:ROR:>=(int,int):TRUE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():104:degree[nb] >= 0 |==> true
5040:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():105:buckets.get(degree[nb]).remove(new Integer(nb)) |==> <NO-OP>
5041:STD:<DEC>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():106:degree[nb]-- |==> <NO-OP>
5042:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():107:buckets.get(degree[nb]).add(nb) |==> <NO-OP>
5043:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():108:degree[nb] < i |==> degree[nb] != i
5044:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():108:degree[nb] < i |==> degree[nb] <= i
5045:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():108:degree[nb] < i |==> false
5046:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():109:i = degree[nb] |==> <NO-OP>
5047:EVR:<IDENTIFIER(int[])>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@smallestDegreeLastOrder():115:order |==> null
5048:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():120:new int[_neighbors.length] |==> null
5049:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():121:new int[_neighbors.length] |==> null
5050:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():122:new int[_neighbors.length] |==> null
5051:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():123:new int[_neighbors.length] |==> null
5052:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():124:0 |==> 1
5053:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():124:0 |==> -1
5054:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():125:0 |==> 1
5055:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():125:0 |==> -1
5056:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():127:0 |==> 1
5057:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():127:0 |==> -1
5058:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():127:i < _neighbors.length |==> i != _neighbors.length
5059:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():127:i < _neighbors.length |==> i <= _neighbors.length
5060:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():127:i < _neighbors.length |==> false
5061:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():128:buckets[i] = i |==> <NO-OP>
5062:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():129:bucketIndex[i] = i |==> <NO-OP>
5063:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():131:0 |==> 1
5064:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():131:0 |==> -1
5065:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():131:cumBucketSize[0] = _neighbors.length |==> <NO-OP>
5066:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():132:index < _neighbors.length |==> index != _neighbors.length
5067:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():132:index < _neighbors.length |==> index <= _neighbors.length
5068:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():132:index < _neighbors.length |==> false
5069:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():134:0 |==> 1
5070:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():134:0 |==> -1
5071:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():134:maxSat > 0 |==> maxSat != 0
5072:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():134:maxSat > 0 |==> maxSat >= 0
5073:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():134:maxSat > 0 |==> false
5074:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:1 |==> 0
5075:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:1 |==> -1
5076:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:maxSat - 1 |==> maxSat % 1
5077:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:maxSat - 1 |==> maxSat * 1
5078:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:maxSat - 1 |==> maxSat + 1
5079:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:maxSat - 1 |==> maxSat / 1
5080:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:cumBucketSize[maxSat] == cumBucketSize[maxSat - 1] |==> cumBucketSize[maxSat] <= cumBucketSize[maxSat - 1]
5081:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:cumBucketSize[maxSat] == cumBucketSize[maxSat - 1] |==> cumBucketSize[maxSat] >= cumBucketSize[maxSat - 1]
5082:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:cumBucketSize[maxSat] == cumBucketSize[maxSat - 1] |==> false
5083:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():134:(maxSat > 0) && (cumBucketSize[maxSat] == cumBucketSize[maxSat - 1]) |==> (maxSat > 0) == (cumBucketSize[maxSat] == cumBucketSize[maxSat - 1])
5084:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:(maxSat > 0) && (cumBucketSize[maxSat] == cumBucketSize[maxSat - 1]) |==> false
5085:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():134:(maxSat > 0) && (cumBucketSize[maxSat] == cumBucketSize[maxSat - 1]) |==> (maxSat > 0)
5086:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():135:(maxSat > 0) && (cumBucketSize[maxSat] == cumBucketSize[maxSat - 1]) |==> (cumBucketSize[maxSat] == cumBucketSize[maxSat - 1])
5087:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():137:0 |==> 1
5088:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():137:0 |==> -1
5089:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():137:cumBucketSize[maxSat--] = 0 |==> <NO-OP>
5090:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():139:1 |==> 0
5091:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():139:1 |==> -1
5092:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():139:cumBucketSize[maxSat] - 1 |==> cumBucketSize[maxSat] % 1
5093:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():139:cumBucketSize[maxSat] - 1 |==> cumBucketSize[maxSat] * 1
5094:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():139:cumBucketSize[maxSat] - 1 |==> cumBucketSize[maxSat] + 1
5095:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():139:cumBucketSize[maxSat] - 1 |==> cumBucketSize[maxSat] / 1
5096:STD:<DEC>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():140:cumBucketSize[maxSat]-- |==> <NO-OP>
5097:LVR:NEG:0:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():141:-1 |==> 0
5098:LVR:NEG:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():141:-1 |==> 1
5099:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():141:satur[v] = -1 |==> <NO-OP>
5100:STD:<INC>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():142:index++ |==> <NO-OP>
5101:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():143:0 |==> 1
5102:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():143:0 |==> -1
5103:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():143:j < _neighbors[v].length |==> j != _neighbors[v].length
5104:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():143:j < _neighbors[v].length |==> j <= _neighbors[v].length
5105:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():143:j < _neighbors[v].length |==> false
5106:EVR:<TYPE_CAST(int)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():144:(int)_neighbors[v][j] |==> 0
5107:EVR:<ARRAY_ACCESS(int)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():145:bucketIndex[nb] |==> 0
5108:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():146:0 |==> 1
5109:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():146:0 |==> -1
5110:ROR:>=(int,int):==(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():146:satur[nb] >= 0 |==> satur[nb] == 0
5111:ROR:>=(int,int):>(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():146:satur[nb] >= 0 |==> satur[nb] > 0
5112:ROR:>=(int,int):TRUE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():146:satur[nb] >= 0 |==> true
5113:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():147:1 |==> 0
5114:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():147:1 |==> -1
5115:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():147:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] % 1
5116:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():147:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] * 1
5117:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():147:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] + 1
5118:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():147:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] / 1
5119:ROR:!=(int,int):<(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():147:bi != (cumBucketSize[satur[nb]] - 1) |==> bi < (cumBucketSize[satur[nb]] - 1)
5120:ROR:!=(int,int):>(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():147:bi != (cumBucketSize[satur[nb]] - 1) |==> bi > (cumBucketSize[satur[nb]] - 1)
5121:ROR:!=(int,int):TRUE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():147:bi != (cumBucketSize[satur[nb]] - 1) |==> true
5122:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():148:1 |==> 0
5123:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():148:1 |==> -1
5124:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():148:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] % 1
5125:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():148:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] * 1
5126:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():148:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] + 1
5127:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():148:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] / 1
5128:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():148:buckets[bi] = buckets[cumBucketSize[satur[nb]] - 1] |==> <NO-OP>
5129:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():149:1 |==> 0
5130:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():149:1 |==> -1
5131:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():149:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] % 1
5132:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():149:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] * 1
5133:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():149:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] + 1
5134:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():149:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] / 1
5135:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():149:buckets[cumBucketSize[satur[nb]] - 1] = nb |==> <NO-OP>
5136:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():150:1 |==> 0
5137:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():150:1 |==> -1
5138:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():150:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] % 1
5139:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():150:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] * 1
5140:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():150:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] + 1
5141:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():150:cumBucketSize[satur[nb]] - 1 |==> cumBucketSize[satur[nb]] / 1
5142:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():150:bucketIndex[nb] = cumBucketSize[satur[nb]] - 1 |==> <NO-OP>
5143:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():151:bucketIndex[buckets[bi]] = bi |==> <NO-OP>
5144:STD:<DEC>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():153:cumBucketSize[satur[nb]]-- |==> <NO-OP>
5145:STD:<INC>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():154:satur[nb]++ |==> <NO-OP>
5146:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():155:0 |==> 1
5147:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():155:0 |==> -1
5148:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():155:cumBucketSize[satur[nb]] == 0 |==> cumBucketSize[satur[nb]] <= 0
5149:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():155:cumBucketSize[satur[nb]] == 0 |==> cumBucketSize[satur[nb]] >= 0
5150:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():155:cumBucketSize[satur[nb]] == 0 |==> false
5151:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:1 |==> 0
5152:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:1 |==> -1
5153:AOR:-(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:satur[nb] - 1 |==> satur[nb] % 1
5154:AOR:-(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:satur[nb] - 1 |==> satur[nb] * 1
5155:AOR:-(int,int):+(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:satur[nb] - 1 |==> satur[nb] + 1
5156:AOR:-(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:satur[nb] - 1 |==> satur[nb] / 1
5157:LVR:POS:0:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:1 |==> 0
5158:LVR:POS:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:1 |==> -1
5159:AOR:+(int,int):%(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:cumBucketSize[satur[nb] - 1] + 1 |==> cumBucketSize[satur[nb] - 1] % 1
5160:AOR:+(int,int):*(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:cumBucketSize[satur[nb] - 1] + 1 |==> cumBucketSize[satur[nb] - 1] * 1
5161:AOR:+(int,int):-(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:cumBucketSize[satur[nb] - 1] + 1 |==> cumBucketSize[satur[nb] - 1] - 1
5162:AOR:+(int,int):/(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():157:cumBucketSize[satur[nb] - 1] + 1 |==> cumBucketSize[satur[nb] - 1] / 1
5163:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():156:cumBucketSize[satur[nb]] = cumBucketSize[satur[nb] - 1] + 1 |==> <NO-OP>
5164:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():159:satur[nb] > maxSat |==> satur[nb] != maxSat
5165:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():159:satur[nb] > maxSat |==> satur[nb] >= maxSat
5166:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():159:satur[nb] > maxSat |==> false
5167:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():160:maxSat = satur[nb] |==> <NO-OP>
5168:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():165:Collections.reverse(Arrays.asList(buckets)) |==> <NO-OP>
5169:EVR:<IDENTIFIER(int[])>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@largestSaturationFirstOrder():166:buckets |==> null
5170:LVR:0:POS:org.jgrapht.experimental.alg.color.GreedyColoring@getLowerBound(java.util.Map<V,java.lang.Object>):171:0 |==> 1
5171:LVR:0:NEG:org.jgrapht.experimental.alg.color.GreedyColoring@getLowerBound(java.util.Map<V,java.lang.Object>):171:0 |==> -1
5172:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@getUpperBound(java.util.Map<V,java.lang.Object>):178:return Math.min(Math.min(color(null), color(smallestDegreeLastOrder())), color(largestSaturationFirstOrder())); |==> <NO-OP>
5173:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@getUpperBound(java.util.Map<V,java.lang.Object>):182:return color(null); |==> <NO-OP>
5174:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@getUpperBound(java.util.Map<V,java.lang.Object>):184:return color(smallestDegreeLastOrder()); |==> <NO-OP>
5175:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.alg.color.GreedyColoring@getUpperBound(java.util.Map<V,java.lang.Object>):186:return color(largestSaturationFirstOrder()); |==> <NO-OP>
5176:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.experimental.alg.color.GreedyColoring@getUpperBound(java.util.Map<V,java.lang.Object>):188:_neighbors.length |==> 0
5177:LVR:FALSE:TRUE:org.jgrapht.experimental.alg.color.GreedyColoring@isExact():193:false |==> true
5178:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph:85:0 |==> 1
5179:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph:85:0 |==> -1
5180:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph:86:0 |==> 1
5181:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph:86:0 |==> -1
5182:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph:89:0 |==> 1
5183:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph:89:0 |==> -1
5184:EVR:<NEW_CLASS(org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedBitSetImpl)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph:94:new VisitedBitSetImpl() |==> null
5185:EVR:<NEW_CLASS(org.jgrapht.experimental.dag.DirectedAcyclicGraph<V,E>.TopoVertexBiMap)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph:99:new TopoVertexBiMap() |==> null
5186:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@<init>(java.lang.Class<? extends E>):106:initialize() |==> <NO-OP>
5187:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph@<init>(java.lang.Class<? extends E>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedFactory,org.jgrapht.experimental.dag.DirectedAcyclicGraph.TopoOrderMappingFactory<V>):115:visitedFactory != null |==> true
5188:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@<init>(java.lang.Class<? extends E>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedFactory,org.jgrapht.experimental.dag.DirectedAcyclicGraph.TopoOrderMappingFactory<V>):116:this.visitedFactory = visitedFactory |==> <NO-OP>
5189:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph@<init>(java.lang.Class<? extends E>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedFactory,org.jgrapht.experimental.dag.DirectedAcyclicGraph.TopoOrderMappingFactory<V>):118:topoOrderFactory != null |==> true
5190:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@<init>(java.lang.Class<? extends E>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedFactory,org.jgrapht.experimental.dag.DirectedAcyclicGraph.TopoOrderMappingFactory<V>):119:this.topoOrderFactory = topoOrderFactory |==> <NO-OP>
5191:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@<init>(java.lang.Class<? extends E>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedFactory,org.jgrapht.experimental.dag.DirectedAcyclicGraph.TopoOrderMappingFactory<V>):121:initialize() |==> <NO-OP>
5192:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@initialize():132:topoOrderMap = topoOrderFactory.getTopoOrderMapping() |==> <NO-OP>
5193:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@initialize():133:topoComparator = new TopoComparator<V>(topoOrderMap) |==> <NO-OP>
5194:EVR:<NEW_CLASS(org.jgrapht.experimental.dag.DirectedAcyclicGraph<V,E>.TopoIterator)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@iterator():146:new TopoIterator() |==> null
5195:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V):155:super.addVertex(v) |==> false
5196:COR:added:TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V):157:added |==> false
5197:COR:added:FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V):157:added |==> true
5198:STD:<INC>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V):159:++maxTopoIndex |==> <NO-OP>
5199:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V):160:topoOrderMap.putVertex(maxTopoIndex, v) |==> <NO-OP>
5200:STD:<INC>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V):162:++topologyUpdateCount |==> <NO-OP>
5201:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V):165:added |==> false
5202:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):181:super.addVertex(v) |==> false
5203:COR:added:TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):183:added |==> false
5204:COR:added:FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):183:added |==> true
5205:COR:addToTop:TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):187:addToTop |==> false
5206:COR:addToTop:FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):187:addToTop |==> true
5207:EVR:<PREFIX_INCREMENT(int)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):188:++maxTopoIndex |==> 0
5208:EVR:<PREFIX_DECREMENT(int)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):190:--minTopoIndex |==> 0
5209:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):192:topoOrderMap.putVertex(insertIndex, v) |==> <NO-OP>
5210:STD:<INC>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):194:++topologyUpdateCount |==> <NO-OP>
5211:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addVertex(V,boolean):196:added |==> false
5212:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addDagEdge(V,V):221:updateDag(fromVertex, toVertex) |==> <NO-OP>
5213:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addDagEdge(V,V):223:super.addEdge(fromVertex, toVertex) |==> null
5214:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addEdge(V,V):235:addDagEdge(sourceVertex, targetVertex) |==> null
5215:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addEdge(V,V):239:result |==> null
5216:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph@addDagEdge(V,V,E):263:e == null |==> false
5217:COR:containsEdge(e):TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addDagEdge(V,V,E):265:containsEdge(e) |==> false
5218:COR:containsEdge(e):FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addDagEdge(V,V,E):265:containsEdge(e) |==> true
5219:LVR:FALSE:TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addDagEdge(V,V,E):266:false |==> true
5220:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addDagEdge(V,V,E):266:return Config.__M_NO == 0 && Config.COVERED(5219, 5219) ? false : Config.__M_NO == 5219 ? true : false; |==> <NO-OP>
5221:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addDagEdge(V,V,E):269:updateDag(fromVertex, toVertex) |==> <NO-OP>
5222:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addDagEdge(V,V,E):271:super.addEdge(fromVertex, toVertex, e) |==> false
5223:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):277:topoOrderMap.getTopologicalIndex(toVertex) |==> null
5224:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):278:topoOrderMap.getTopologicalIndex(fromVertex) |==> null
5225:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):280:lb == null |==> false
5226:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):280:ub == null |==> false
5227:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):280:(lb == null) || (ub == null) |==> (lb == null) != (ub == null)
5228:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):280:(lb == null) || (ub == null) |==> (lb == null)
5229:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):280:(lb == null) || (ub == null) |==> (ub == null)
5230:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):280:(lb == null) || (ub == null) |==> true
5231:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):285:lb < ub |==> lb != ub
5232:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):285:lb < ub |==> lb <= ub
5233:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):285:lb < ub |==> false
5234:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):286:new HashSet<V>() |==> null
5235:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):287:new HashSet<V>() |==> null
5236:EVR:<NEW_CLASS(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):290:new Region(lb, ub) |==> null
5237:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):291:visitedFactory.getInstance(affectedRegion) |==> null
5238:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):294:dfsF(toVertex, df, visited, affectedRegion) |==> <NO-OP>
5239:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):296:dfsB(fromVertex, db, visited, affectedRegion) |==> <NO-OP>
5240:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):297:reorder(df, db, visited) |==> <NO-OP>
5241:STD:<INC>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@updateDag(V,V):298:++topologyUpdateCount |==> <NO-OP>
5242:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addEdge(V,V,E):312:addDagEdge(sourceVertex, targetVertex, edge) |==> false
5243:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@addEdge(V,V,E):316:result |==> false
5244:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):324:super.removeVertex(v) |==> false
5245:COR:removed:TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):326:removed |==> false
5246:COR:removed:FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):326:removed |==> true
5247:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):327:topoOrderMap.removeVertex(v) |==> null
5248:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):330:topoIndex == minTopoIndex |==> topoIndex <= minTopoIndex
5249:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):330:topoIndex == minTopoIndex |==> topoIndex >= minTopoIndex
5250:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):330:topoIndex == minTopoIndex |==> false
5251:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):332:0 |==> 1
5252:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):332:0 |==> -1
5253:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):332:minTopoIndex < 0 |==> minTopoIndex != 0
5254:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):332:minTopoIndex < 0 |==> minTopoIndex <= 0
5255:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):332:minTopoIndex < 0 |==> false
5256:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):333:null == topoOrderMap.getVertex(minTopoIndex) |==> false
5257:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):332:(minTopoIndex < 0) && (null == topoOrderMap.getVertex(minTopoIndex)) |==> (minTopoIndex < 0) == (null == topoOrderMap.getVertex(minTopoIndex))
5258:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):333:(minTopoIndex < 0) && (null == topoOrderMap.getVertex(minTopoIndex)) |==> false
5259:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):332:(minTopoIndex < 0) && (null == topoOrderMap.getVertex(minTopoIndex)) |==> (minTopoIndex < 0)
5260:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):333:(minTopoIndex < 0) && (null == topoOrderMap.getVertex(minTopoIndex)) |==> (null == topoOrderMap.getVertex(minTopoIndex))
5261:STD:<INC>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):335:++minTopoIndex |==> <NO-OP>
5262:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):340:topoIndex == maxTopoIndex |==> topoIndex <= maxTopoIndex
5263:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):340:topoIndex == maxTopoIndex |==> topoIndex >= maxTopoIndex
5264:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):340:topoIndex == maxTopoIndex |==> false
5265:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):342:0 |==> 1
5266:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):342:0 |==> -1
5267:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):342:maxTopoIndex > 0 |==> maxTopoIndex != 0
5268:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):342:maxTopoIndex > 0 |==> maxTopoIndex >= 0
5269:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):342:maxTopoIndex > 0 |==> false
5270:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):343:null == topoOrderMap.getVertex(maxTopoIndex) |==> false
5271:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):342:(maxTopoIndex > 0) && (null == topoOrderMap.getVertex(maxTopoIndex)) |==> (maxTopoIndex > 0) == (null == topoOrderMap.getVertex(maxTopoIndex))
5272:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):343:(maxTopoIndex > 0) && (null == topoOrderMap.getVertex(maxTopoIndex)) |==> false
5273:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):342:(maxTopoIndex > 0) && (null == topoOrderMap.getVertex(maxTopoIndex)) |==> (maxTopoIndex > 0)
5274:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):343:(maxTopoIndex > 0) && (null == topoOrderMap.getVertex(maxTopoIndex)) |==> (null == topoOrderMap.getVertex(maxTopoIndex))
5275:STD:<DEC>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):345:--maxTopoIndex |==> <NO-OP>
5276:STD:<INC>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):349:++topologyUpdateCount |==> <NO-OP>
5277:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeVertex(V):352:removed |==> false
5278:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):357:super.removeAllVertices(arg0) |==> false
5279:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):359:topoOrderMap.removeAllVertices() |==> <NO-OP>
5280:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):361:0 |==> 1
5281:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):361:0 |==> -1
5282:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):361:maxTopoIndex = 0 |==> <NO-OP>
5283:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):362:0 |==> 1
5284:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):362:0 |==> -1
5285:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):362:minTopoIndex = 0 |==> <NO-OP>
5286:STD:<INC>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):364:++topologyUpdateCount |==> <NO-OP>
5287:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@removeAllVertices(java.util.Collection<? extends V>):366:removed |==> false
5288:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):392:topoOrderMap.getTopologicalIndex(vertex) |==> null
5289:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):395:visited.setVisited(topoIndex) |==> <NO-OP>
5290:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):397:df.add(vertex) |==> <NO-OP>
5291:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):400:getEdgeTarget(outEdge) |==> null
5292:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):402:topoOrderMap.getTopologicalIndex(nextVertex) |==> null
5293:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):404:nextVertexTopoIndex.intValue() == affectedRegion.finish |==> nextVertexTopoIndex.intValue() <= affectedRegion.finish
5294:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):404:nextVertexTopoIndex.intValue() == affectedRegion.finish |==> nextVertexTopoIndex.intValue() >= affectedRegion.finish
5295:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):404:nextVertexTopoIndex.intValue() == affectedRegion.finish |==> false
5296:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):408:visited.clearVisited(topoOrderMap.getTopologicalIndex(visitedVertex)) |==> <NO-OP>
5297:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):422:affectedRegion.isIn(nextVertexTopoIndex) && !visited.getVisited(nextVertexTopoIndex) |==> affectedRegion.isIn(nextVertexTopoIndex) == !visited.getVisited(nextVertexTopoIndex)
5298:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):423:affectedRegion.isIn(nextVertexTopoIndex) && !visited.getVisited(nextVertexTopoIndex) |==> false
5299:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):422:affectedRegion.isIn(nextVertexTopoIndex) && !visited.getVisited(nextVertexTopoIndex) |==> affectedRegion.isIn(nextVertexTopoIndex)
5300:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):423:affectedRegion.isIn(nextVertexTopoIndex) && !visited.getVisited(nextVertexTopoIndex) |==> !visited.getVisited(nextVertexTopoIndex)
5301:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsF(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):425:dfsF(nextVertex, df, visited, affectedRegion) |==> <NO-OP>
5302:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):448:topoOrderMap.getTopologicalIndex(vertex) |==> null
5303:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):449:visited.setVisited(topoIndex) |==> <NO-OP>
5304:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):451:db.add(vertex) |==> <NO-OP>
5305:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):454:getEdgeSource(inEdge) |==> null
5306:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):456:topoOrderMap.getTopologicalIndex(previousVertex) |==> null
5307:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):462:affectedRegion.isIn(previousVertexTopoIndex) && !visited.getVisited(previousVertexTopoIndex) |==> affectedRegion.isIn(previousVertexTopoIndex) == !visited.getVisited(previousVertexTopoIndex)
5308:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):463:affectedRegion.isIn(previousVertexTopoIndex) && !visited.getVisited(previousVertexTopoIndex) |==> false
5309:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):462:affectedRegion.isIn(previousVertexTopoIndex) && !visited.getVisited(previousVertexTopoIndex) |==> affectedRegion.isIn(previousVertexTopoIndex)
5310:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):463:affectedRegion.isIn(previousVertexTopoIndex) && !visited.getVisited(previousVertexTopoIndex) |==> !visited.getVisited(previousVertexTopoIndex)
5311:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@dfsB(V,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):468:dfsB(previousVertex, db, visited, affectedRegion) |==> <NO-OP>
5312:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):476:new ArrayList<V>(df) |==> null
5313:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):477:new ArrayList<V>(db) |==> null
5314:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):479:Collections.sort(topoDf, topoComparator) |==> <NO-OP>
5315:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):480:Collections.sort(topoDb, topoComparator) |==> <NO-OP>
5316:EVR:<NEW_CLASS(java.util.TreeSet<java.lang.Integer>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):484:new TreeSet<Integer>() |==> null
5317:AOR:+(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):488:df.size() + db.size() |==> df.size() % db.size()
5318:AOR:+(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):488:df.size() + db.size() |==> df.size() * db.size()
5319:AOR:+(int,int):-(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):488:df.size() + db.size() |==> df.size() - db.size()
5320:AOR:+(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):488:df.size() + db.size() |==> df.size() / db.size()
5321:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):489:0 |==> 1
5322:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):489:0 |==> -1
5323:LVR:TRUE:FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):495:true |==> false
5324:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):498:topoOrderMap.getTopologicalIndex(vertex) |==> null
5325:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):501:availableTopoIndices.add(topoIndex) |==> <NO-OP>
5326:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):503:bigL[lIndex++] = vertex |==> <NO-OP>
5327:COR:clearVisited:TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):505:clearVisited |==> false
5328:COR:clearVisited:FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):505:clearVisited |==> true
5329:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):507:visited.clearVisited(topoIndex) |==> <NO-OP>
5330:LVR:FALSE:TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):509:false |==> true
5331:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):509:clearVisited = false |==> <NO-OP>
5332:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):515:topoOrderMap.getTopologicalIndex(vertex) |==> null
5333:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):518:availableTopoIndices.add(topoIndex) |==> <NO-OP>
5334:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):519:bigL[lIndex++] = vertex |==> <NO-OP>
5335:COR:clearVisited:TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):521:clearVisited |==> false
5336:COR:clearVisited:FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):521:clearVisited |==> true
5337:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):523:visited.clearVisited(topoIndex) |==> <NO-OP>
5338:LVR:FALSE:TRUE:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):525:false |==> true
5339:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):525:clearVisited = false |==> <NO-OP>
5340:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):530:0 |==> 1
5341:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):530:0 |==> -1
5342:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):530:lIndex = 0 |==> <NO-OP>
5343:EVR:<ARRAY_ACCESS(V)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):533:bigL[lIndex++] |==> null
5344:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph@reorder(java.util.Set<V>,java.util.Set<V>,org.jgrapht.experimental.dag.DirectedAcyclicGraph.Visited):534:topoOrderMap.putVertex(topoIndex, vertex) |==> <NO-OP>
5345:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoComparator@<init>(org.jgrapht.experimental.dag.DirectedAcyclicGraph.TopoOrderMapping<V>):665:this.topoOrderMap = topoOrderMap |==> <NO-OP>
5346:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoComparator@compare(V,V):670:topoOrderMap.getTopologicalIndex(o1).compareTo(topoOrderMap.getTopologicalIndex(o2)) |==> 0
5347:EVR:<NEW_CLASS(java.util.HashMap<java.lang.Integer,V>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap:688:new HashMap<Integer, V>() |==> null
5348:EVR:<NEW_CLASS(java.util.HashMap<V,java.lang.Integer>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap:689:new HashMap<V, Integer>() |==> null
5349:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@putVertex(java.lang.Integer,V):693:topoToVertex.put(index, vertex) |==> <NO-OP>
5350:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@putVertex(java.lang.Integer,V):694:vertexToTopo.put(vertex, index) |==> <NO-OP>
5351:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@getVertex(java.lang.Integer):699:topoToVertex.get(index) |==> null
5352:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@getTopologicalIndex(V):704:vertexToTopo.get(vertex) |==> null
5353:EVR:<IDENTIFIER(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@getTopologicalIndex(V):705:topoIndex |==> null
5354:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@removeVertex(V):710:vertexToTopo.remove(vertex) |==> null
5355:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@removeVertex(V):711:topoIndex != null |==> true
5356:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@removeVertex(V):712:topoToVertex.remove(topoIndex) |==> <NO-OP>
5357:EVR:<IDENTIFIER(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@removeVertex(V):714:topoIndex |==> null
5358:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@removeAllVertices():719:vertexToTopo.clear() |==> <NO-OP>
5359:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@removeAllVertices():720:topoToVertex.clear() |==> <NO-OP>
5360:EVR:<IDENTIFIER(org.jgrapht.experimental.dag.DirectedAcyclicGraph<V,E>.TopoVertexBiMap)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexBiMap@getTopoOrderMapping():725:this |==> null
5361:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap:743:new ArrayList<V>() |==> null
5362:EVR:<NEW_CLASS(java.util.HashMap<V,java.lang.Integer>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap:744:new HashMap<V, Integer>() |==> null
5363:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):748:translateIndex(index) |==> 0
5364:LVR:POS:0:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):751:1 |==> 0
5365:LVR:POS:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):751:1 |==> -1
5366:AOR:+(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):751:translatedIndex + 1 |==> translatedIndex % 1
5367:AOR:+(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):751:translatedIndex + 1 |==> translatedIndex * 1
5368:AOR:+(int,int):-(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):751:translatedIndex + 1 |==> translatedIndex - 1
5369:AOR:+(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):751:translatedIndex + 1 |==> translatedIndex / 1
5370:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):751:(translatedIndex + 1) > topoToVertex.size() |==> (translatedIndex + 1) != topoToVertex.size()
5371:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):751:(translatedIndex + 1) > topoToVertex.size() |==> (translatedIndex + 1) >= topoToVertex.size()
5372:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):751:(translatedIndex + 1) > topoToVertex.size() |==> false
5373:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):752:topoToVertex.add(null) |==> <NO-OP>
5374:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):755:topoToVertex.set(translatedIndex, vertex) |==> <NO-OP>
5375:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@putVertex(java.lang.Integer,V):756:vertexToTopo.put(vertex, index) |==> <NO-OP>
5376:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@getVertex(java.lang.Integer):761:topoToVertex.get(translateIndex(index)) |==> null
5377:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@getTopologicalIndex(V):766:vertexToTopo.get(vertex) |==> null
5378:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@removeVertex(V):771:vertexToTopo.remove(vertex) |==> null
5379:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@removeVertex(V):772:topoIndex != null |==> true
5380:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@removeVertex(V):773:topoToVertex.set(translateIndex(topoIndex), null) |==> <NO-OP>
5381:EVR:<IDENTIFIER(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@removeVertex(V):775:topoIndex |==> null
5382:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@removeAllVertices():780:vertexToTopo.clear() |==> <NO-OP>
5383:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@removeAllVertices():781:topoToVertex.clear() |==> <NO-OP>
5384:EVR:<IDENTIFIER(org.jgrapht.experimental.dag.DirectedAcyclicGraph<V,E>.TopoVertexMap)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@getTopoOrderMapping():786:this |==> null
5385:LVR:0:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):801:0 |==> 1
5386:LVR:0:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):801:0 |==> -1
5387:ROR:>=(int,int):==(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):801:index >= 0 |==> index == 0
5388:ROR:>=(int,int):>(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):801:index >= 0 |==> index > 0
5389:ROR:>=(int,int):TRUE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):801:index >= 0 |==> true
5390:LVR:POS:0:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):802:2 |==> 0
5391:LVR:POS:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):802:2 |==> -2
5392:AOR:*(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):802:2 * index |==> 2 % index
5393:AOR:*(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):802:2 * index |==> 2 + index
5394:AOR:*(int,int):-(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):802:2 * index |==> 2 - index
5395:AOR:*(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):802:2 * index |==> 2 / index
5396:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):802:return Config.__M_NO == 5395 ? 2 / index : Config.__M_NO == 5394 ? 2 - index : Config.__M_NO == 5393 ? 2 + index : Config.__M_NO == 5392 ? 2 % index : Config.__M_NO == 0 && Config.COVERED(5392, 5395) ? 2 * index : (Config.__M_NO == 0 && Config.COVERED(5390, 5391) ? 2 : Config.__M_NO == 5391 ? -2 : Config.__M_NO == 5390 ? 0 : 2) * index; |==> <NO-OP>
5397:LVR:NEG:0:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:-1 |==> 0
5398:LVR:NEG:POS:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:-1 |==> 1
5399:LVR:POS:0:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:2 |==> 0
5400:LVR:POS:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:2 |==> -2
5401:AOR:*(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:index * 2 |==> index % 2
5402:AOR:*(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:index * 2 |==> index + 2
5403:AOR:*(int,int):-(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:index * 2 |==> index - 2
5404:AOR:*(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:index * 2 |==> index / 2
5405:LVR:POS:0:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:1 |==> 0
5406:LVR:POS:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:1 |==> -1
5407:AOR:-(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:(index * 2) - 1 |==> (index * 2) % 1
5408:AOR:-(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:(index * 2) - 1 |==> (index * 2) * 1
5409:AOR:-(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:(index * 2) - 1 |==> (index * 2) + 1
5410:AOR:-(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:(index * 2) - 1 |==> (index * 2) / 1
5411:AOR:*(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:-1 * ((index * 2) - 1) |==> -1 % ((index * 2) - 1)
5412:AOR:*(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:-1 * ((index * 2) - 1) |==> -1 + ((index * 2) - 1)
5413:AOR:*(int,int):-(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:-1 * ((index * 2) - 1) |==> -1 - ((index * 2) - 1)
5414:AOR:*(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoVertexMap@translateIndex(int):804:-1 * ((index * 2) - 1) |==> -1 / ((index * 2) - 1)
5415:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@<init>(int,int):826:start > finish |==> start != finish
5416:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@<init>(int,int):826:start > finish |==> start >= finish
5417:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@<init>(int,int):826:start > finish |==> false
5418:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@<init>(int,int):830:start |==> 0
5419:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@<init>(int,int):831:finish |==> 0
5420:AOR:-(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:finish - start |==> finish % start
5421:AOR:-(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:finish - start |==> finish * start
5422:AOR:-(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:finish - start |==> finish + start
5423:AOR:-(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:finish - start |==> finish / start
5424:LVR:POS:0:org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:1 |==> 0
5425:LVR:POS:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:1 |==> -1
5426:AOR:+(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:(finish - start) + 1 |==> (finish - start) % 1
5427:AOR:+(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:(finish - start) + 1 |==> (finish - start) * 1
5428:AOR:+(int,int):-(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:(finish - start) + 1 |==> (finish - start) - 1
5429:AOR:+(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@getSize():836:(finish - start) + 1 |==> (finish - start) / 1
5430:ROR:>=(int,int):==(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:index >= start |==> index == start
5431:ROR:>=(int,int):>(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:index >= start |==> index > start
5432:ROR:>=(int,int):TRUE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:index >= start |==> true
5433:ROR:<=(int,int):<(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:index <= finish |==> index < finish
5434:ROR:<=(int,int):==(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:index <= finish |==> index == finish
5435:ROR:<=(int,int):TRUE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:index <= finish |==> true
5436:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:(index >= start) && (index <= finish) |==> (index >= start) == (index <= finish)
5437:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:(index >= start) && (index <= finish) |==> false
5438:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:(index >= start) && (index <= finish) |==> (index >= start)
5439:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.dag.DirectedAcyclicGraph$Region@isIn(int):841:(index >= start) && (index <= finish) |==> (index <= finish)
5440:EVR:<NEW_CLASS(java.util.BitSet)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl:859:new BitSet() |==> null
5441:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):865:this.affectedRegion = affectedRegion |==> <NO-OP>
5442:EVR:<IDENTIFIER(org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedBitSetImpl)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):867:this |==> null
5443:LVR:TRUE:FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@setVisited(int):872:true |==> false
5444:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@setVisited(int):872:visited.set(translateIndex(index), true) |==> <NO-OP>
5445:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@getVisited(int):877:visited.get(translateIndex(index)) |==> false
5446:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@clearVisited(int):883:visited.clear(translateIndex(index)) |==> <NO-OP>
5447:AOR:-(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@translateIndex(int):898:index - affectedRegion.start |==> index % affectedRegion.start
5448:AOR:-(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@translateIndex(int):898:index - affectedRegion.start |==> index * affectedRegion.start
5449:AOR:-(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@translateIndex(int):898:index - affectedRegion.start |==> index + affectedRegion.start
5450:AOR:-(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedBitSetImpl@translateIndex(int):898:index - affectedRegion.start |==> index / affectedRegion.start
5451:EVR:<NEW_CLASS(java.util.ArrayList<java.lang.Boolean>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl:919:new ArrayList<Boolean>() |==> null
5452:AOR:-(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:affectedRegion.finish - affectedRegion.start |==> affectedRegion.finish % affectedRegion.start
5453:AOR:-(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:affectedRegion.finish - affectedRegion.start |==> affectedRegion.finish * affectedRegion.start
5454:AOR:-(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:affectedRegion.finish - affectedRegion.start |==> affectedRegion.finish + affectedRegion.start
5455:AOR:-(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:affectedRegion.finish - affectedRegion.start |==> affectedRegion.finish / affectedRegion.start
5456:LVR:POS:0:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:1 |==> 0
5457:LVR:POS:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:1 |==> -1
5458:AOR:+(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:(affectedRegion.finish - affectedRegion.start) + 1 |==> (affectedRegion.finish - affectedRegion.start) % 1
5459:AOR:+(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:(affectedRegion.finish - affectedRegion.start) + 1 |==> (affectedRegion.finish - affectedRegion.start) * 1
5460:AOR:+(int,int):-(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:(affectedRegion.finish - affectedRegion.start) + 1 |==> (affectedRegion.finish - affectedRegion.start) - 1
5461:AOR:+(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):926:(affectedRegion.finish - affectedRegion.start) + 1 |==> (affectedRegion.finish - affectedRegion.start) / 1
5462:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):929:visited.size() < minSize |==> visited.size() != minSize
5463:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):929:visited.size() < minSize |==> visited.size() <= minSize
5464:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):929:visited.size() < minSize |==> false
5465:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):930:visited.add(Boolean.FALSE) |==> <NO-OP>
5466:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):933:this.affectedRegion = affectedRegion |==> <NO-OP>
5467:EVR:<IDENTIFIER(org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedArrayListImpl)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):935:this |==> null
5468:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@setVisited(int):940:visited.set(translateIndex(index), Boolean.TRUE) |==> <NO-OP>
5469:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getVisited(int):947:result = visited.get(translateIndex(index)) |==> <NO-OP>
5470:EVR:<IDENTIFIER(java.lang.Boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@getVisited(int):949:result |==> null
5471:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@clearVisited(int):955:visited.set(translateIndex(index), Boolean.FALSE) |==> <NO-OP>
5472:AOR:-(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@translateIndex(int):970:index - affectedRegion.start |==> index % affectedRegion.start
5473:AOR:-(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@translateIndex(int):970:index - affectedRegion.start |==> index * affectedRegion.start
5474:AOR:-(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@translateIndex(int):970:index - affectedRegion.start |==> index + affectedRegion.start
5475:AOR:-(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayListImpl@translateIndex(int):970:index - affectedRegion.start |==> index / affectedRegion.start
5476:EVR:<NEW_CLASS(java.util.HashSet<java.lang.Integer>)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedHashSetImpl:990:new HashSet<Integer>() |==> null
5477:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedHashSetImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):994:visited.clear() |==> <NO-OP>
5478:EVR:<IDENTIFIER(org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedHashSetImpl)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedHashSetImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):995:this |==> null
5479:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedHashSetImpl@setVisited(int):1000:visited.add(index) |==> <NO-OP>
5480:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedHashSetImpl@getVisited(int):1005:visited.contains(index) |==> false
5481:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@<init>(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):1044:region == null |==> false
5482:EVR:<IDENTIFIER(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@<init>(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):1048:region |==> null
5483:EVR:<NEW_ARRAY(boolean[])>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@<init>(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):1051:new boolean[region.getSize()] |==> null
5484:EVR:<NEW_CLASS(org.jgrapht.experimental.dag.DirectedAcyclicGraph.VisitedArrayImpl)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@getInstance(org.jgrapht.experimental.dag.DirectedAcyclicGraph.Region):1057:new VisitedArrayImpl(affectedRegion) |==> null
5485:AOR:-(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@setVisited(int):1063:index - region.start |==> index % region.start
5486:AOR:-(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@setVisited(int):1063:index - region.start |==> index * region.start
5487:AOR:-(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@setVisited(int):1063:index - region.start |==> index + region.start
5488:AOR:-(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@setVisited(int):1063:index - region.start |==> index / region.start
5489:LVR:TRUE:FALSE:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@setVisited(int):1063:true |==> false
5490:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@setVisited(int):1063:visited[index - region.start] = true |==> <NO-OP>
5491:AOR:-(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@getVisited(int):1075:index - region.start |==> index % region.start
5492:AOR:-(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@getVisited(int):1075:index - region.start |==> index * region.start
5493:AOR:-(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@getVisited(int):1075:index - region.start |==> index + region.start
5494:AOR:-(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$VisitedArrayImpl@getVisited(int):1075:index - region.start |==> index / region.start
5495:EVR:<IDENTIFIER(long)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@<init>():1116:topologyUpdateCount |==> 0L
5496:LVR:POS:0:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@<init>():1117:1 |==> 0
5497:LVR:POS:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@<init>():1117:1 |==> -1
5498:AOR:-(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@<init>():1117:minTopoIndex - 1 |==> minTopoIndex % 1
5499:AOR:-(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@<init>():1117:minTopoIndex - 1 |==> minTopoIndex * 1
5500:AOR:-(int,int):+(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@<init>():1117:minTopoIndex - 1 |==> minTopoIndex + 1
5501:AOR:-(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@<init>():1117:minTopoIndex - 1 |==> minTopoIndex / 1
5502:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@<init>():1117:currentTopoIndex = minTopoIndex - 1 |==> <NO-OP>
5503:ROR:!=(long,long):<(long,long):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@hasNext():1122:updateCountAtCreation != topologyUpdateCount |==> updateCountAtCreation < topologyUpdateCount
5504:ROR:!=(long,long):>(long,long):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@hasNext():1122:updateCountAtCreation != topologyUpdateCount |==> updateCountAtCreation > topologyUpdateCount
5505:ROR:!=(long,long):TRUE(long,long):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@hasNext():1122:updateCountAtCreation != topologyUpdateCount |==> true
5506:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@hasNext():1126:nextIndex = getNextIndex() |==> <NO-OP>
5507:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@hasNext():1127:nextIndex != null |==> true
5508:ROR:!=(long,long):<(long,long):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@next():1132:updateCountAtCreation != topologyUpdateCount |==> updateCountAtCreation < topologyUpdateCount
5509:ROR:!=(long,long):>(long,long):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@next():1132:updateCountAtCreation != topologyUpdateCount |==> updateCountAtCreation > topologyUpdateCount
5510:ROR:!=(long,long):TRUE(long,long):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@next():1132:updateCountAtCreation != topologyUpdateCount |==> true
5511:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@next():1136:nextIndex == null |==> false
5512:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@next():1138:nextIndex = getNextIndex() |==> <NO-OP>
5513:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@next():1140:nextIndex == null |==> false
5514:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@next():1143:currentTopoIndex = nextIndex |==> <NO-OP>
5515:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@next():1144:nextIndex = null |==> <NO-OP>
5516:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@next():1145:topoOrderMap.getVertex(currentTopoIndex) |==> null
5517:ROR:!=(long,long):<(long,long):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@remove():1150:updateCountAtCreation != topologyUpdateCount |==> updateCountAtCreation < topologyUpdateCount
5518:ROR:!=(long,long):>(long,long):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@remove():1150:updateCountAtCreation != topologyUpdateCount |==> updateCountAtCreation > topologyUpdateCount
5519:ROR:!=(long,long):TRUE(long,long):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@remove():1150:updateCountAtCreation != topologyUpdateCount |==> true
5520:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@remove():1156:null != (vertexToRemove = topoOrderMap.getVertex(currentTopoIndex)) |==> true
5521:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@remove():1160:topoOrderMap.removeVertex(vertexToRemove) |==> <NO-OP>
5522:LVR:POS:0:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1169:1 |==> 0
5523:LVR:POS:NEG:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1169:1 |==> -1
5524:AOR:+(int,int):%(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1169:currentTopoIndex + 1 |==> currentTopoIndex % 1
5525:AOR:+(int,int):*(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1169:currentTopoIndex + 1 |==> currentTopoIndex * 1
5526:AOR:+(int,int):-(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1169:currentTopoIndex + 1 |==> currentTopoIndex - 1
5527:AOR:+(int,int):/(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1169:currentTopoIndex + 1 |==> currentTopoIndex / 1
5528:ROR:<=(int,int):<(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1169:i <= maxTopoIndex |==> i < maxTopoIndex
5529:ROR:<=(int,int):==(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1169:i <= maxTopoIndex |==> i == maxTopoIndex
5530:ROR:<=(int,int):TRUE(int,int):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1169:i <= maxTopoIndex |==> true
5531:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1170:null != topoOrderMap.getVertex(i) |==> true
5532:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.dag.DirectedAcyclicGraph$TopoIterator@getNextIndex():1171:return i; |==> <NO-OP>
5533:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@<init>(org.jgrapht.experimental.equivalence.EquivalenceComparator<E,C>):82:this.chain = new LinkedList<EquivalenceComparator<? super E, ? super C>>() |==> <NO-OP>
5534:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@<init>(org.jgrapht.experimental.equivalence.EquivalenceComparator<E,C>):84:this.chain.add(firstComaparator) |==> <NO-OP>
5535:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@appendComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator):101:comparatorAfter != null |==> true
5536:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@appendComparator(org.jgrapht.experimental.equivalence.EquivalenceComparator):102:this.chain.add(comparatorAfter) |==> <NO-OP>
5537:COR:currentComparator.equivalenceCompare(arg1, arg2, context1, context2):TRUE:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceCompare(E,E,C,C):124:currentComparator.equivalenceCompare(arg1, arg2, context1, context2) |==> false
5538:COR:currentComparator.equivalenceCompare(arg1, arg2, context1, context2):FALSE:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceCompare(E,E,C,C):124:currentComparator.equivalenceCompare(arg1, arg2, context1, context2) |==> true
5539:LVR:FALSE:TRUE:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceCompare(E,E,C,C):130:false |==> true
5540:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceCompare(E,E,C,C):130:return Config.__M_NO == 0 && Config.COVERED(5539, 5539) ? false : Config.__M_NO == 5539 ? true : false; |==> <NO-OP>
5541:LVR:TRUE:FALSE:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceCompare(E,E,C,C):133:true |==> false
5542:EVR:<NEW_CLASS(java.lang.StringBuffer)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceHashcode(E,C):143:new StringBuffer() |==> null
5543:EVR:<METHOD_INVOCATION(java.util.ListIterator<org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super C>>)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceHashcode(E,C):146:this.chain.listIterator() |==> null
5544:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.equivalence.EquivalenceComparator<capture#175 of ? super E,capture#632 of ? super C>)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceHashcode(E,C):150:iter.next() |==> null
5545:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceHashcode(E,C):152:currentComparator.equivalenceHashcode(arg1, context) |==> 0
5546:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceHashcode(E,C):153:hashStringBuffer.append(currentHashCode) |==> <NO-OP>
5547:COR:iter.hasNext():TRUE:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceHashcode(E,C):156:iter.hasNext() |==> false
5548:COR:iter.hasNext():FALSE:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceHashcode(E,C):156:iter.hasNext() |==> true
5549:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceHashcode(E,C):157:hashStringBuffer.append('+') |==> <NO-OP>
5550:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase@equivalenceHashcode(E,C):160:hashStringBuffer.toString().hashCode() |==> 0
5551:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSet@<init>(E,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super C>,C):83:this.eqComparator = aEqComparator |==> <NO-OP>
5552:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSet@<init>(E,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super C>,C):84:this.comparatorContext = aComparatorContext |==> <NO-OP>
5553:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSet@<init>(E,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super C>,C):86:this.elementsSet = new HashSet<E>() |==> <NO-OP>
5554:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSet@<init>(E,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super C>,C):87:this.elementsSet.add(aElement) |==> <NO-OP>
5555:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@getRepresentative():99:elementsSet.iterator().next() |==> null
5556:EVR:<MEMBER_SELECT(C)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@getContext():104:this.comparatorContext |==> null
5557:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@size():109:elementsSet.size() |==> 0
5558:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSet@add(E):118:this.elementsSet.add(element) |==> <NO-OP>
5559:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@equivalentTo(E,C):124:this.eqComparator.equivalenceCompare(this.getRepresentative(), aOther, this.comparatorContext, aOtherContext) |==> false
5560:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@equivalentTo(E,C):129:result |==> false
5561:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSet@equals(java.lang.Object):155:otherRepresentative = ((EquivalenceSet<E, C>)other).getRepresentative() |==> <NO-OP>
5562:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSet@equals(java.lang.Object):157:otherContext = ((EquivalenceSet<E, C>)other).getContext() |==> <NO-OP>
5563:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@equals(java.lang.Object):164:this.eqComparator.equivalenceCompare(this.getRepresentative(), otherRepresentative, this.comparatorContext, otherContext) |==> false
5564:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@equals(java.lang.Object):169:result |==> false
5565:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@hashCode():181:this.eqComparator.equivalenceHashcode(this.getRepresentative(), this.comparatorContext) |==> 0
5566:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@hashCode():184:result |==> 0
5567:EVR:<PLUS(java.lang.String)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@toString():189:"Eq.Group=" + this.elementsSet.toString() |==> null
5568:EVR:<METHOD_INVOCATION(java.lang.Object[])>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSet@toArray():199:this.elementsSet.toArray() |==> null
5569:EVR:<NEW_CLASS(org.jgrapht.experimental.equivalence.EquivalenceSetCreator.EqGroupSizeComparator)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator:56:new EqGroupSizeComparator() |==> null
5570:EVR:<PARENTHESIZED(org.jgrapht.experimental.equivalence.EquivalenceSet[])>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupOrderedArray(EE[],org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):77:(createEqualityGroupOrderedArray(Arrays.asList(aElementsArray), aEqComparator, aContext)) |==> null
5571:EVR:<NEW_CLASS(java.util.ArrayList<org.jgrapht.experimental.equivalence.EquivalenceSet<? super EE,? super CC>>)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupOrderedArray(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):117:new ArrayList<EquivalenceSet<? super EE, ? super CC>>() |==> null
5572:EVR:<METHOD_INVOCATION(java.util.HashMap<java.lang.Integer,java.util.List<org.jgrapht.experimental.equivalence.EquivalenceSet<? super EE,? super CC>>>)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupOrderedArray(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):120:createEqualityGroupMap(elements, aEqComparator, aContext) |==> null
5573:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupOrderedArray(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):129:arrayList.add(eSet) |==> <NO-OP>
5574:EVR:<NEW_ARRAY(org.jgrapht.experimental.equivalence.EquivalenceSet[])>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupOrderedArray(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):135:new EquivalenceSet[arrayList.size()] |==> null
5575:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupOrderedArray(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):136:arrayList.toArray(resultArray) |==> <NO-OP>
5576:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupOrderedArray(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):137:Arrays.sort(resultArray, groupSizeComparator) |==> <NO-OP>
5577:EVR:<IDENTIFIER(org.jgrapht.experimental.equivalence.EquivalenceSet[])>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupOrderedArray(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):138:resultArray |==> null
5578:EVR:<NEW_CLASS(java.util.HashMap<java.lang.Integer,java.util.List<org.jgrapht.experimental.equivalence.EquivalenceSet<? super EE,? super CC>>>)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):160:new HashMap<Integer, List<EquivalenceSet<? super EE, ? super CC>>>(elements.size()) |==> null
5579:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):165:aEqComparator.equivalenceHashcode(curentElement, aComparatorContext) |==> 0
5580:EVR:<METHOD_INVOCATION(java.util.List<org.jgrapht.experimental.equivalence.EquivalenceSet<? super EE,? super CC>>)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):169:equalityGroupMap.get(Integer.valueOf(hashcode)) |==> null
5581:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):174:list == null |==> false
5582:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):176:list = new LinkedList<EquivalenceSet<? super EE, ? super CC>>() |==> <NO-OP>
5583:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):177:list.add(new EquivalenceSet<EE, CC>(curentElement, aEqComparator, aComparatorContext)) |==> <NO-OP>
5584:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):184:equalityGroupMap.put(Integer.valueOf(hashcode), list) |==> <NO-OP>
5585:LVR:FALSE:TRUE:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):186:false |==> true
5586:COR:eqGroup.equivalentTo(curentElement, aComparatorContext):TRUE:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):191:eqGroup.equivalentTo(curentElement, aComparatorContext) |==> false
5587:COR:eqGroup.equivalentTo(curentElement, aComparatorContext):FALSE:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):191:eqGroup.equivalentTo(curentElement, aComparatorContext) |==> true
5588:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):196:eqGroup.add(curentElement) |==> <NO-OP>
5589:LVR:TRUE:FALSE:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):197:true |==> false
5590:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):197:eqWasFound = true |==> <NO-OP>
5591:STD:<BREAK>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):198:break; |==> <NO-OP>
5592:COR:eqWasFound:TRUE:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):203:eqWasFound |==> false
5593:COR:eqWasFound:FALSE:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):203:eqWasFound |==> true
5594:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):204:list.add(new EquivalenceSet<EE, CC>(curentElement, aEqComparator, aComparatorContext)) |==> <NO-OP>
5595:EVR:<IDENTIFIER(java.util.HashMap<java.lang.Integer,java.util.List<org.jgrapht.experimental.equivalence.EquivalenceSet<? super EE,? super CC>>>)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator@createEqualityGroupMap(java.util.Collection<EE>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super EE,? super CC>,CC):213:equalityGroupMap |==> null
5596:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):238:arg1.size() |==> 0
5597:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):239:arg2.size() |==> 0
5598:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):240:eqGroupSize1 > eqGroupSize2 |==> eqGroupSize1 != eqGroupSize2
5599:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):240:eqGroupSize1 > eqGroupSize2 |==> eqGroupSize1 >= eqGroupSize2
5600:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):240:eqGroupSize1 > eqGroupSize2 |==> false
5601:LVR:POS:0:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):241:1 |==> 0
5602:LVR:POS:NEG:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):241:1 |==> -1
5603:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):242:eqGroupSize1 < eqGroupSize2 |==> eqGroupSize1 != eqGroupSize2
5604:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):242:eqGroupSize1 < eqGroupSize2 |==> eqGroupSize1 <= eqGroupSize2
5605:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):242:eqGroupSize1 < eqGroupSize2 |==> false
5606:LVR:NEG:0:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):243:-1 |==> 0
5607:LVR:NEG:POS:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):243:-1 |==> 1
5608:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):245:arg1.hashCode() |==> 0
5609:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):246:arg2.hashCode() |==> 0
5610:ROR:>(int,int):!=(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):247:eqGroupHash1 > eqGroupHash2 |==> eqGroupHash1 != eqGroupHash2
5611:ROR:>(int,int):>=(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):247:eqGroupHash1 > eqGroupHash2 |==> eqGroupHash1 >= eqGroupHash2
5612:ROR:>(int,int):FALSE(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):247:eqGroupHash1 > eqGroupHash2 |==> false
5613:LVR:POS:0:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):248:1 |==> 0
5614:LVR:POS:NEG:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):248:1 |==> -1
5615:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):249:eqGroupHash1 < eqGroupHash2 |==> eqGroupHash1 != eqGroupHash2
5616:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):249:eqGroupHash1 < eqGroupHash2 |==> eqGroupHash1 <= eqGroupHash2
5617:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):249:eqGroupHash1 < eqGroupHash2 |==> false
5618:LVR:NEG:0:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):250:-1 |==> 0
5619:LVR:NEG:POS:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):250:-1 |==> 1
5620:LVR:0:POS:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):252:0 |==> 1
5621:LVR:0:NEG:org.jgrapht.experimental.equivalence.EquivalenceSetCreator$EqGroupSizeComparator@compare(org.jgrapht.experimental.equivalence.EquivalenceSet,org.jgrapht.experimental.equivalence.EquivalenceSet):252:0 |==> -1
5622:LVR:TRUE:FALSE:org.jgrapht.experimental.equivalence.UniformEquivalenceComparator@equivalenceCompare(E,E,C,C):63:true |==> false
5623:LVR:0:POS:org.jgrapht.experimental.equivalence.UniformEquivalenceComparator@equivalenceHashcode(E,C):73:0 |==> 1
5624:LVR:0:NEG:org.jgrapht.experimental.equivalence.UniformEquivalenceComparator@equivalenceHashcode(E,C):73:0 |==> -1
5625:EVR:<NEW_CLASS(org.jgrapht.experimental.equivalence.UniformEquivalenceComparator<java.lang.Object,java.lang.Object>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector:62:new UniformEquivalenceComparator<Object, Object>() |==> null
5626:EVR:<NEW_CLASS(org.jgrapht.experimental.equivalence.UniformEquivalenceComparator<java.lang.Object,java.lang.Object>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector:65:new UniformEquivalenceComparator<Object, Object>() |==> null
5627:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super V,? super org.jgrapht.Graph<? super V,? super E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<? super V,? super E>>):107:this.graph1 = graph1 |==> <NO-OP>
5628:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super V,? super org.jgrapht.Graph<? super V,? super E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<? super V,? super E>>):108:this.graph2 = graph2 |==> <NO-OP>
5629:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super V,? super org.jgrapht.Graph<? super V,? super E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<? super V,? super E>>):110:vertexChecker != null |==> true
5630:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super V,? super org.jgrapht.Graph<? super V,? super E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<? super V,? super E>>):111:this.vertexComparator = vertexChecker |==> <NO-OP>
5631:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super V,? super org.jgrapht.Graph<? super V,? super E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<? super V,? super E>>):113:this.vertexComparator = vertexDefaultIsomorphismComparator |==> <NO-OP>
5632:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super V,? super org.jgrapht.Graph<? super V,? super E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<? super V,? super E>>):120:edgeChecker != null |==> true
5633:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super V,? super org.jgrapht.Graph<? super V,? super E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<? super V,? super E>>):121:this.edgeComparator = edgeChecker |==> <NO-OP>
5634:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super V,? super org.jgrapht.Graph<? super V,? super E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<? super V,? super E>>):124:init() |==> <NO-OP>
5635:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@init():164:this.nextSupplier = new PrefetchIterator<IsomorphismRelation>(new NextFunctor()) |==> <NO-OP>
5636:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@init():170:this.graph1VertexSet = new LinkedHashSet<V>(this.graph1.vertexSet()) |==> <NO-OP>
5637:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@init():173:this.vertexPermuteIter = createPermutationIterator(this.graph1VertexSet, this.graph2.vertexSet()) |==> <NO-OP>
5638:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@init():178:this.lableGraph1 = new GraphOrdering<V, E>(this.graph1, this.graph1VertexSet, this.graph1.edgeSet()) |==> <NO-OP>
5639:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@init():184:this.graph2EdgeSet = new LinkedHashSet<E>(this.graph2.edgeSet()) |==> <NO-OP>
5640:LVR:FALSE:TRUE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():243:false |==> true
5641:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():245:this.vertexPermuteIter != null |==> true
5642:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():248:currVertexPermutation = this.vertexPermuteIter.getNextSet() |==> <NO-OP>
5643:COR:areVertexSetsOfTheSameEqualityGroup(this.graph1VertexSet, currVertexPermutation):TRUE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():251:areVertexSetsOfTheSameEqualityGroup(this.graph1VertexSet, currVertexPermutation) |==> false
5644:COR:areVertexSetsOfTheSameEqualityGroup(this.graph1VertexSet, currVertexPermutation):FALSE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():251:areVertexSetsOfTheSameEqualityGroup(this.graph1VertexSet, currVertexPermutation) |==> true
5645:STD:<CONT>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():255:continue; |==> <NO-OP>
5646:EVR:<NEW_CLASS(org.jgrapht.experimental.isomorphism.GraphOrdering<V,E>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():260:new GraphOrdering<V, E>(this.graph2, currVertexPermutation, this.graph2EdgeSet) |==> null
5647:COR:this.lableGraph1.equalsByEdgeOrder(currPermuteGraph):TRUE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():266:this.lableGraph1.equalsByEdgeOrder(currPermuteGraph) |==> false
5648:COR:this.lableGraph1.equalsByEdgeOrder(currPermuteGraph):FALSE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():266:this.lableGraph1.equalsByEdgeOrder(currPermuteGraph) |==> true
5649:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():268:resultRelation = new IsomorphismRelation<V, E>(new ArrayList<V>(graph1VertexSet), new ArrayList<V>(currVertexPermutation), graph1, graph2) |==> <NO-OP>
5650:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():277:areAllEdgesEquivalent(resultRelation, this.edgeComparator) |==> false
5651:COR:edgeEq:TRUE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():280:edgeEq |==> false
5652:COR:edgeEq:FALSE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():280:edgeEq |==> true
5653:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():283:true |==> false
5654:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():283:result = true |==> <NO-OP>
5655:STD:<BREAK>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():284:break; |==> <NO-OP>
5656:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():290:true |==> false
5657:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():290:result == true |==> false
5658:ROR:==(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():290:result == true |==> result
5659:ROR:==(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():290:result == true |==> true
5660:EVR:<IDENTIFIER(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@findNextIsomorphicGraph():291:resultRelation |==> null
5661:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):321:true |==> false
5662:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):323:edgeComparator == null |==> false
5663:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):325:true |==> false
5664:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):325:return Config.__M_NO == 0 && Config.COVERED(5663, 5663) ? true : Config.__M_NO == 5663 ? false : true; |==> <NO-OP>
5665:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):329:this.graph1.edgeSet() |==> null
5666:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):333:true |==> false
5667:COR:edgeComparator.equivalenceCompare(currEdge, correspondingEdge, this.graph1, this.graph2):TRUE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):336:edgeComparator.equivalenceCompare(currEdge, correspondingEdge, this.graph1, this.graph2) |==> false
5668:COR:edgeComparator.equivalenceCompare(currEdge, correspondingEdge, this.graph1, this.graph2):FALSE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):336:edgeComparator.equivalenceCompare(currEdge, correspondingEdge, this.graph1, this.graph2) |==> true
5669:LVR:FALSE:TRUE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):342:false |==> true
5670:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):342:checkResult = false |==> <NO-OP>
5671:STD:<BREAK>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):343:break; |==> <NO-OP>
5672:LVR:FALSE:TRUE:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):347:false |==> true
5673:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):347:checkResult = false |==> <NO-OP>
5674:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@areAllEdgesEquivalent(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<? super E,? super org.jgrapht.Graph<V,E>>):350:checkResult |==> false
5675:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.IsomorphismRelation)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@nextIsoRelation():358:next() |==> null
5676:EVR:<LOGICAL_COMPLEMENT(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@isIsomorphic():370:!(this.nextSupplier.isEnumerationStartedEmpty()) |==> false
5677:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@hasNext():378:this.nextSupplier.hasMoreElements() |==> false
5678:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@hasNext():380:result |==> false
5679:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.IsomorphismRelation)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector@next():388:this.nextSupplier.nextElement() |==> null
5680:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.IsomorphismRelation<V,E>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector$NextFunctor@nextElement():409:findNextIsomorphicGraph() |==> null
5681:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector$NextFunctor@nextElement():410:resultRelation != null |==> true
5682:EVR:<IDENTIFIER(org.jgrapht.experimental.isomorphism.IsomorphismRelation)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AbstractExhaustiveIsomorphismInspector$NextFunctor@nextElement():411:resultRelation |==> null
5683:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@<init>(java.util.List<V>,java.util.List<V>,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):85:this.vertexList1 = aGraph1vertexArray |==> <NO-OP>
5684:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@<init>(java.util.List<V>,java.util.List<V>,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):86:this.vertexList2 = aGraph2vertexArray |==> <NO-OP>
5685:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@<init>(java.util.List<V>,java.util.List<V>,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):87:this.graph1 = g1 |==> <NO-OP>
5686:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@<init>(java.util.List<V>,java.util.List<V>,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):88:this.graph2 = g2 |==> <NO-OP>
5687:EVR:<NEW_CLASS(java.lang.StringBuffer)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@toString():95:new StringBuffer() |==> null
5688:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@toString():96:sb.append("vertexList1: ").append(this.vertexList1.toString()) |==> <NO-OP>
5689:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@toString():98:sb.append("\tvertexList2: ").append(this.vertexList2.toString()) |==> <NO-OP>
5690:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@toString():100:sb.toString() |==> null
5691:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.isomorphism.IsomorphismRelation@getVertexCorrespondence(V,boolean):106:graphMapping == null |==> false
5692:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@getVertexCorrespondence(V,boolean):107:initGraphMapping() |==> <NO-OP>
5693:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@getVertexCorrespondence(V,boolean):110:graphMapping.getVertexCorrespondence(vertex, forward) |==> null
5694:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.isomorphism.IsomorphismRelation@getEdgeCorrespondence(E,boolean):116:graphMapping == null |==> false
5695:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@getEdgeCorrespondence(E,boolean):117:initGraphMapping() |==> <NO-OP>
5696:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@getEdgeCorrespondence(E,boolean):120:graphMapping.getEdgeCorrespondence(edge, forward) |==> null
5697:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():129:vertexList1.size() |==> 0
5698:EVR:<NEW_CLASS(java.util.HashMap<V,V>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():130:new HashMap<V, V>(mapSize) |==> null
5699:EVR:<NEW_CLASS(java.util.HashMap<V,V>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():131:new HashMap<V, V>(mapSize) |==> null
5700:LVR:0:POS:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():133:0 |==> 1
5701:LVR:0:NEG:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():133:0 |==> -1
5702:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():133:i < mapSize |==> i != mapSize
5703:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():133:i < mapSize |==> i <= mapSize
5704:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():133:i < mapSize |==> false
5705:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():134:this.vertexList1.get(i) |==> null
5706:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():135:this.vertexList2.get(i) |==> null
5707:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():136:g1ToG2.put(source, target) |==> <NO-OP>
5708:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():137:g2ToG1.put(target, source) |==> <NO-OP>
5709:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.IsomorphismRelation@initGraphMapping():139:this.graphMapping = new DefaultGraphMapping<V, E>(g1ToG2, g2ToG1, this.graph1, this.graph2) |==> <NO-OP>
5710:LVR:FALSE:TRUE:org.jgrapht.util.PrefetchIterator:95:false |==> true
5711:LVR:FALSE:TRUE:org.jgrapht.util.PrefetchIterator:96:false |==> true
5712:LVR:TRUE:FALSE:org.jgrapht.util.PrefetchIterator:97:true |==> false
5713:LVR:0:POS:org.jgrapht.util.PrefetchIterator:98:0 |==> 1
5714:LVR:0:NEG:org.jgrapht.util.PrefetchIterator:98:0 |==> -1
5715:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.PrefetchIterator@<init>(org.jgrapht.util.PrefetchIterator.NextElementFunctor<E>):104:innerEnum = aEnum |==> <NO-OP>
5716:STD:<INC>:<NO-OP>:org.jgrapht.util.PrefetchIterator@getNextElementFromInnerFunctor():115:innerFunctorUsageCounter++ |==> <NO-OP>
5717:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.util.PrefetchIterator@getNextElementFromInnerFunctor():116:this.innerEnum.nextElement() |==> null
5718:LVR:FALSE:TRUE:org.jgrapht.util.PrefetchIterator@getNextElementFromInnerFunctor():120:false |==> true
5719:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.PrefetchIterator@getNextElementFromInnerFunctor():120:flagIsEnumerationStartedEmpty = false |==> <NO-OP>
5720:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.util.PrefetchIterator@getNextElementFromInnerFunctor():121:result |==> null
5721:COR:this.isGetNextLastResultUpToDate:TRUE:org.jgrapht.util.PrefetchIterator@nextElement():132:this.isGetNextLastResultUpToDate |==> false
5722:COR:this.isGetNextLastResultUpToDate:FALSE:org.jgrapht.util.PrefetchIterator@nextElement():132:this.isGetNextLastResultUpToDate |==> true
5723:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.PrefetchIterator@nextElement():133:result = this.getNextLastResult |==> <NO-OP>
5724:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.PrefetchIterator@nextElement():135:result = getNextElementFromInnerFunctor() |==> <NO-OP>
5725:LVR:FALSE:TRUE:org.jgrapht.util.PrefetchIterator@nextElement():138:false |==> true
5726:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.PrefetchIterator@nextElement():138:this.isGetNextLastResultUpToDate = false |==> <NO-OP>
5727:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.util.PrefetchIterator@nextElement():139:result |==> null
5728:COR:endOfEnumerationReached:TRUE:org.jgrapht.util.PrefetchIterator@hasMoreElements():148:endOfEnumerationReached |==> false
5729:COR:endOfEnumerationReached:FALSE:org.jgrapht.util.PrefetchIterator@hasMoreElements():148:endOfEnumerationReached |==> true
5730:LVR:FALSE:TRUE:org.jgrapht.util.PrefetchIterator@hasMoreElements():149:false |==> true
5731:STD:<RETURN>:<NO-OP>:org.jgrapht.util.PrefetchIterator@hasMoreElements():149:return Config.__M_NO == 0 && Config.COVERED(5730, 5730) ? false : Config.__M_NO == 5730 ? true : false; |==> <NO-OP>
5732:COR:isGetNextLastResultUpToDate:TRUE:org.jgrapht.util.PrefetchIterator@hasMoreElements():152:isGetNextLastResultUpToDate |==> false
5733:COR:isGetNextLastResultUpToDate:FALSE:org.jgrapht.util.PrefetchIterator@hasMoreElements():152:isGetNextLastResultUpToDate |==> true
5734:LVR:TRUE:FALSE:org.jgrapht.util.PrefetchIterator@hasMoreElements():153:true |==> false
5735:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.PrefetchIterator@hasMoreElements():156:this.getNextLastResult = getNextElementFromInnerFunctor() |==> <NO-OP>
5736:LVR:TRUE:FALSE:org.jgrapht.util.PrefetchIterator@hasMoreElements():157:true |==> false
5737:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.PrefetchIterator@hasMoreElements():157:this.isGetNextLastResultUpToDate = true |==> <NO-OP>
5738:LVR:TRUE:FALSE:org.jgrapht.util.PrefetchIterator@hasMoreElements():158:true |==> false
5739:LVR:TRUE:FALSE:org.jgrapht.util.PrefetchIterator@hasMoreElements():160:true |==> false
5740:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.PrefetchIterator@hasMoreElements():160:endOfEnumerationReached = true |==> <NO-OP>
5741:LVR:FALSE:TRUE:org.jgrapht.util.PrefetchIterator@hasMoreElements():161:false |==> true
5742:LVR:0:POS:org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():174:0 |==> 1
5743:LVR:0:NEG:org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():174:0 |==> -1
5744:ROR:==(int,int):<=(int,int):org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():174:this.innerFunctorUsageCounter == 0 |==> this.innerFunctorUsageCounter <= 0
5745:ROR:==(int,int):>=(int,int):org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():174:this.innerFunctorUsageCounter == 0 |==> this.innerFunctorUsageCounter >= 0
5746:ROR:==(int,int):FALSE(int,int):org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():174:this.innerFunctorUsageCounter == 0 |==> false
5747:COR:hasMoreElements():TRUE:org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():175:hasMoreElements() |==> false
5748:COR:hasMoreElements():FALSE:org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():175:hasMoreElements() |==> true
5749:LVR:FALSE:TRUE:org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():176:false |==> true
5750:LVR:TRUE:FALSE:org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():178:true |==> false
5751:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.util.PrefetchIterator@isEnumerationStartedEmpty():184:flagIsEnumerationStartedEmpty |==> false
5752:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.util.PrefetchIterator@hasNext():190:this.hasMoreElements() |==> false
5753:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.util.PrefetchIterator@next():195:this.nextElement() |==> null
5754:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@<init>(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):97:init(regularGraph, vertexSet, edgeSet) |==> <NO-OP>
5755:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):107:this.mapVertexToOrder = new HashMap<V, Integer>(vertexSet.size()) |==> <NO-OP>
5756:LVR:0:POS:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):109:0 |==> 1
5757:LVR:0:NEG:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):109:0 |==> -1
5758:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):111:mapVertexToOrder.put(vertex, new Integer(counter)) |==> <NO-OP>
5759:STD:<INC>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):112:counter++ |==> <NO-OP>
5760:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):121:this.labelsEdgesSet = new HashSet<LabelsEdge>(edgeSet.size()) |==> <NO-OP>
5761:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):123:g.getEdgeSource(edge) |==> null
5762:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):124:mapVertexToOrder.get(sourceVertex) |==> null
5763:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):125:sourceOrder.intValue() |==> 0
5764:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):127:(mapVertexToOrder.get(g.getEdgeTarget(edge))).intValue() |==> 0
5765:EVR:<NEW_CLASS(org.jgrapht.experimental.isomorphism.GraphOrdering<V,E>.LabelsEdge)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):129:new LabelsEdge(sourceLabel, targetLabel) |==> null
5766:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):130:this.labelsEdgesSet.add(lablesEdge) |==> <NO-OP>
5767:EVR:<NEW_CLASS(org.jgrapht.experimental.isomorphism.GraphOrdering<V,E>.LabelsEdge)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):134:new LabelsEdge(targetLabel, sourceLabel) |==> null
5768:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@init(org.jgrapht.Graph<V,E>,java.util.Set<V>,java.util.Set<E>):135:this.labelsEdgesSet.add(oppositeEdge) |==> <NO-OP>
5769:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@equalsByEdgeOrder(org.jgrapht.experimental.isomorphism.GraphOrdering):146:this.getLabelsEdgesSet().equals(otherGraph.getLabelsEdgesSet()) |==> false
5770:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@equalsByEdgeOrder(org.jgrapht.experimental.isomorphism.GraphOrdering):148:result |==> false
5771:EVR:<IDENTIFIER(java.util.Set<org.jgrapht.experimental.isomorphism.GraphOrdering<V,E>.LabelsEdge>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@getLabelsEdgesSet():153:labelsEdgesSet |==> null
5772:EVR:<NEW_CLASS(java.lang.StringBuffer)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@toString():165:new StringBuffer() |==> null
5773:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@toString():166:sb.append("mapVertexToOrder=") |==> <NO-OP>
5774:EVR:<NEW_ARRAY(java.lang.Object[])>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@toString():169:new Object[this.mapVertexToOrder.size()] |==> null
5775:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@toString():170:this.mapVertexToOrder.keySet() |==> null
5776:EVR:<METHOD_INVOCATION(java.lang.Integer)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@toString():172:this.mapVertexToOrder.get(currVertex) |==> null
5777:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@toString():173:vertexArray[index.intValue()] = currVertex |==> <NO-OP>
5778:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@toString():175:sb.append(Arrays.toString(vertexArray)) |==> <NO-OP>
5779:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering@toString():176:sb.append("labelsOrder=").append(this.labelsEdgesSet.toString()) |==> <NO-OP>
5780:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering@toString():177:sb.toString() |==> null
5781:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@<init>(int,int):190:this.source = aSource |==> <NO-OP>
5782:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@<init>(int,int):191:this.target = aTarget |==> <NO-OP>
5783:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@<init>(int,int):192:this.hashCode = new String(this.source + "" + this.target).hashCode() |==> <NO-OP>
5784:EVR:<TYPE_CAST(org.jgrapht.experimental.isomorphism.GraphOrdering<V,E>.LabelsEdge)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):204:(LabelsEdge)obj |==> null
5785:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):205:this.source == otherEdge.source |==> this.source <= otherEdge.source
5786:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):205:this.source == otherEdge.source |==> this.source >= otherEdge.source
5787:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):205:this.source == otherEdge.source |==> false
5788:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):206:this.target == otherEdge.target |==> this.target <= otherEdge.target
5789:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):206:this.target == otherEdge.target |==> this.target >= otherEdge.target
5790:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):206:this.target == otherEdge.target |==> false
5791:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):205:(this.source == otherEdge.source) && (this.target == otherEdge.target) |==> (this.source == otherEdge.source) == (this.target == otherEdge.target)
5792:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):206:(this.source == otherEdge.source) && (this.target == otherEdge.target) |==> false
5793:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):205:(this.source == otherEdge.source) && (this.target == otherEdge.target) |==> (this.source == otherEdge.source)
5794:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):206:(this.source == otherEdge.source) && (this.target == otherEdge.target) |==> (this.target == otherEdge.target)
5795:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):208:true |==> false
5796:LVR:FALSE:TRUE:org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@equals(java.lang.Object):210:false |==> true
5797:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@hashCode():219:this.hashCode |==> 0
5798:EVR:<PLUS(java.lang.String)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.GraphOrdering$LabelsEdge@toString():224:this.source + "->" + this.target |==> null
5799:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@<init>(java.util.List<E>,org.jgrapht.experimental.permutation.ArrayPermutationsIter):99:this.permOrder = permuter |==> <NO-OP>
5800:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@<init>(java.util.List<E>,org.jgrapht.experimental.permutation.ArrayPermutationsIter):100:this.sourceArray = objectsArray |==> <NO-OP>
5801:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@hasNext():107:this.permOrder.hasNextPermutaions() |==> false
5802:COR:this.permOrder.hasNextPermutaions():TRUE:org.jgrapht.experimental.permutation.CollectionPermutationIter@getNextArray():119:this.permOrder.hasNextPermutaions() |==> false
5803:COR:this.permOrder.hasNextPermutaions():FALSE:org.jgrapht.experimental.permutation.CollectionPermutationIter@getNextArray():119:this.permOrder.hasNextPermutaions() |==> true
5804:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@getNextArray():120:this.currPermutationArray = this.permOrder.nextPermutation() |==> <NO-OP>
5805:EVR:<METHOD_INVOCATION(java.util.List<E>)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@getNextArray():121:applyPermutation() |==> null
5806:EVR:<IDENTIFIER(java.util.List<E>)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@getNextArray():126:permutationResult |==> null
5807:EVR:<NEW_CLASS(java.util.ArrayList<E>)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@applyPermutation():131:new ArrayList<E>(sourceArray) |==> null
5808:LVR:0:POS:org.jgrapht.experimental.permutation.CollectionPermutationIter@applyPermutation():136:0 |==> 1
5809:LVR:0:NEG:org.jgrapht.experimental.permutation.CollectionPermutationIter@applyPermutation():136:0 |==> -1
5810:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.permutation.CollectionPermutationIter@applyPermutation():136:i < output.size() |==> i != output.size()
5811:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.permutation.CollectionPermutationIter@applyPermutation():136:i < output.size() |==> i <= output.size()
5812:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.CollectionPermutationIter@applyPermutation():136:i < output.size() |==> false
5813:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@applyPermutation():137:output.set(i, this.sourceArray.get(this.currPermutationArray[i])) |==> <NO-OP>
5814:EVR:<IDENTIFIER(java.util.ArrayList<E>)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@applyPermutation():141:output |==> null
5815:EVR:<METHOD_INVOCATION(java.util.List<E>)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@getNextSet():151:getNextArray() |==> null
5816:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.experimental.permutation.CollectionPermutationIter@getNextSet():152:result == null |==> false
5817:EVR:<NEW_CLASS(java.util.LinkedHashSet<E>)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@getNextSet():156:new LinkedHashSet<E>(result) |==> null
5818:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@getNextSet():157:resultSet |==> null
5819:EVR:<MEMBER_SELECT(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@getCurrentPermutationArray():163:this.currPermutationArray |==> null
5820:EVR:<NEW_CLASS(java.lang.StringBuffer)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@toString():168:new StringBuffer() |==> null
5821:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@toString():169:sb.append("Permutation int[]=") |==> <NO-OP>
5822:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@toString():170:sb.append(Arrays.toString(getCurrentPermutationArray())) |==> <NO-OP>
5823:EVR:<METHOD_INVOCATION(java.util.List<E>)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@toString():172:applyPermutation() |==> null
5824:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@toString():173:sb.append("\nPermutationSet Source Object[]=") |==> <NO-OP>
5825:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@toString():174:sb.append(this.sourceArray.toString()) |==> <NO-OP>
5826:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@toString():175:sb.append("\nPermutationSet Result Object[]=") |==> <NO-OP>
5827:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CollectionPermutationIter@toString():176:sb.append(permutationResult.toString()) |==> <NO-OP>
5828:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.experimental.permutation.CollectionPermutationIter@toString():177:sb.toString() |==> null
5829:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createIsomorphismInspector(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):87:checkGraphsType(graph1, graph2) |==> 0
5830:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.GraphIsomorphismInspector)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createIsomorphismInspector(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):88:createAppropriateConcreteInspector(graphType, graph1, graph2, vertexChecker, edgeChecker) |==> null
5831:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.GraphIsomorphismInspector)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createIsomorphismInspector(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):109:createIsomorphismInspector(graph1, graph2, null, null) |==> null
5832:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.GraphIsomorphismInspector)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createIsomorphismInspectorByType(int,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):130:createAppropriateConcreteInspector(type, graph1, graph2, vertexChecker, edgeChecker) |==> null
5833:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.GraphIsomorphismInspector)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createIsomorphismInspectorByType(int,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):155:createAppropriateConcreteInspector(type, graph1, graph2, null, null) |==> null
5834:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createAppropriateConcreteInspector(int,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):182:assertUnsupportedGraphTypes(graph1) |==> <NO-OP>
5835:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createAppropriateConcreteInspector(int,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):183:assertUnsupportedGraphTypes(graph2) |==> <NO-OP>
5836:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createAppropriateConcreteInspector(int,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):190:currentInspector = createTopologicalExhaustiveInspector(graph1, graph2, vertexChecker, edgeChecker) |==> <NO-OP>
5837:STD:<BREAK>:<NO-OP>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createAppropriateConcreteInspector(int,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):196:break; |==> <NO-OP>
5838:EVR:<IDENTIFIER(org.jgrapht.experimental.isomorphism.GraphIsomorphismInspector)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createAppropriateConcreteInspector(int,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):203:currentInspector |==> null
5839:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@assertUnsupportedGraphTypes(org.jgrapht.Graph):218:(g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>) |==> (g instanceof Multigraph<?, ?>) != (g instanceof DirectedMultigraph<?, ?>)
5840:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@assertUnsupportedGraphTypes(org.jgrapht.Graph):218:(g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>) |==> (g instanceof Multigraph<?, ?>)
5841:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@assertUnsupportedGraphTypes(org.jgrapht.Graph):219:(g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>) |==> (g instanceof DirectedMultigraph<?, ?>)
5842:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@assertUnsupportedGraphTypes(org.jgrapht.Graph):219:(g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>) |==> true
5843:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@assertUnsupportedGraphTypes(org.jgrapht.Graph):218:(g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>) || (g instanceof Pseudograph<?, ?>) |==> ((g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>)) != (g instanceof Pseudograph<?, ?>)
5844:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@assertUnsupportedGraphTypes(org.jgrapht.Graph):218:(g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>) || (g instanceof Pseudograph<?, ?>) |==> (g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>)
5845:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@assertUnsupportedGraphTypes(org.jgrapht.Graph):220:(g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>) || (g instanceof Pseudograph<?, ?>) |==> (g instanceof Pseudograph<?, ?>)
5846:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@assertUnsupportedGraphTypes(org.jgrapht.Graph):220:(g instanceof Multigraph<?, ?>) || (g instanceof DirectedMultigraph<?, ?>) || (g instanceof Pseudograph<?, ?>) |==> true
5847:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@checkGraphsType(org.jgrapht.Graph,org.jgrapht.Graph):229:GRAPH_TYPE_ARBITRARY |==> 0
5848:EVR:<NEW_CLASS(org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator<V,E>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createTopologicalExhaustiveInspector(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):246:new VertexDegreeEquivalenceComparator<V, E>() |==> null
5849:EVR:<NEW_CLASS(org.jgrapht.experimental.equivalence.EquivalenceComparatorChainBase<V,org.jgrapht.Graph<V,E>>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createTopologicalExhaustiveInspector(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):248:new EquivalenceComparatorChainBase<V, Graph<V, E>>(degreeComparator) |==> null
5850:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createTopologicalExhaustiveInspector(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):250:vertexChainedChecker.appendComparator(vertexChecker) |==> <NO-OP>
5851:EVR:<NEW_CLASS(org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createTopologicalExhaustiveInspector(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):255:new EquivalenceIsomorphismInspector(graph1, graph2, vertexChainedChecker, edgeChecker) |==> null
5852:EVR:<IDENTIFIER(org.jgrapht.experimental.isomorphism.GraphIsomorphismInspector)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.AdaptiveIsomorphismInspectorFactory@createTopologicalExhaustiveInspector(org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>,org.jgrapht.experimental.equivalence.EquivalenceComparator<V,org.jgrapht.Graph<V,E>>,org.jgrapht.experimental.equivalence.EquivalenceComparator<E,org.jgrapht.Graph<V,E>>):260:inspector |==> null
5853:ROR:!=(int,int):<(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):133:vertexSet1.size() != vertexSet2.size() |==> vertexSet1.size() < vertexSet2.size()
5854:ROR:!=(int,int):>(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):133:vertexSet1.size() != vertexSet2.size() |==> vertexSet1.size() > vertexSet2.size()
5855:ROR:!=(int,int):TRUE(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):133:vertexSet1.size() != vertexSet2.size() |==> true
5856:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):138:return null; |==> <NO-OP>
5857:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.equivalence.EquivalenceSet[])>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):143:EquivalenceSetCreator.createEqualityGroupOrderedArray(vertexSet1, this.vertexComparator, this.graph1) |==> null
5858:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.equivalence.EquivalenceSet[])>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):150:EquivalenceSetCreator.createEqualityGroupOrderedArray(vertexSet2, this.vertexComparator, this.graph2) |==> null
5859:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):157:reorderTargetArrayToMatchSourceOrder(eqGroupArray1, eqGroupArray2) |==> false
5860:COR:reorderSuccess:TRUE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):158:reorderSuccess |==> false
5861:COR:reorderSuccess:FALSE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):158:reorderSuccess |==> true
5862:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):160:return null; |==> <NO-OP>
5863:EVR:<TYPE_CAST(V[])>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):168:(V[])new Object[vertexSet1.size()] |==> null
5864:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):169:fillElementsflatArray(eqGroupArray1, reorderingVertexSet1Temp) |==> <NO-OP>
5865:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):170:vertexSet1.clear() |==> <NO-OP>
5866:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):171:vertexSet1.addAll(Arrays.asList(reorderingVertexSet1Temp)) |==> <NO-OP>
5867:EVR:<TYPE_CAST(V[])>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):180:(V[])new Object[vertexSet2.size()] |==> null
5868:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):181:fillElementsflatArray(eqGroupArray2, flatVertexArray) |==> <NO-OP>
5869:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):184:new int[eqGroupArray1.length] |==> null
5870:LVR:0:POS:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):188:0 |==> 1
5871:LVR:0:NEG:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):188:0 |==> -1
5872:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):189:eqGroupCounter < eqGroupArray2.length |==> eqGroupCounter != eqGroupArray2.length
5873:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):189:eqGroupCounter < eqGroupArray2.length |==> eqGroupCounter <= eqGroupArray2.length
5874:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):189:eqGroupCounter < eqGroupArray2.length |==> false
5875:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):193:groupSizesArray[eqGroupCounter] = eqGroupArray2[eqGroupCounter].size() |==> <NO-OP>
5876:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.permutation.ArrayPermutationsIter)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):198:PermutationFactory.createByGroups(groupSizesArray) |==> null
5877:EVR:<NEW_CLASS(org.jgrapht.experimental.permutation.CollectionPermutationIter<V>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):200:new CollectionPermutationIter<V>(Arrays.asList(flatVertexArray), arrayPermIter) |==> null
5878:EVR:<IDENTIFIER(org.jgrapht.experimental.permutation.CollectionPermutationIter<V>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):204:vertexPermIter |==> null
5879:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):231:true |==> false
5880:LVR:0:POS:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):233:0 |==> 1
5881:LVR:0:NEG:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):233:0 |==> -1
5882:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):234:sourceIndex < sourceArray.length |==> sourceIndex != sourceArray.length
5883:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):234:sourceIndex < sourceArray.length |==> sourceIndex <= sourceArray.length
5884:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):234:sourceIndex < sourceArray.length |==> false
5885:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):237:sourceIndex |==> 0
5886:EVR:<ARRAY_ACCESS(org.jgrapht.experimental.equivalence.EquivalenceSet)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):240:sourceArray[sourceIndex] |==> null
5887:EVR:<ARRAY_ACCESS(org.jgrapht.experimental.equivalence.EquivalenceSet)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):241:targetArray[currTargetIndex] |==> null
5888:COR:sourceEqGroup.equals(targetEqGroup):TRUE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):242:sourceEqGroup.equals(targetEqGroup) |==> false
5889:COR:sourceEqGroup.equals(targetEqGroup):FALSE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):242:sourceEqGroup.equals(targetEqGroup) |==> true
5890:LVR:FALSE:TRUE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):245:false |==> true
5891:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):246:sourceEqGroup.size() |==> 0
5892:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):247:sourceEqGroup.hashCode() |==> 0
5893:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):249:targetEqGroup.size() == sourceSize |==> targetEqGroup.size() <= sourceSize
5894:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):249:targetEqGroup.size() == sourceSize |==> targetEqGroup.size() >= sourceSize
5895:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):249:targetEqGroup.size() == sourceSize |==> false
5896:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):250:targetEqGroup.hashCode() == sourceHashCode |==> targetEqGroup.hashCode() <= sourceHashCode
5897:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):250:targetEqGroup.hashCode() == sourceHashCode |==> targetEqGroup.hashCode() >= sourceHashCode
5898:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):250:targetEqGroup.hashCode() == sourceHashCode |==> false
5899:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):249:(targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode) |==> (targetEqGroup.size() == sourceSize) == (targetEqGroup.hashCode() == sourceHashCode)
5900:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):250:(targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode) |==> false
5901:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):249:(targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode) |==> (targetEqGroup.size() == sourceSize)
5902:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):250:(targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode) |==> (targetEqGroup.hashCode() == sourceHashCode)
5903:LVR:POS:0:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:1 |==> 0
5904:LVR:POS:NEG:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:1 |==> -1
5905:AOR:-(int,int):%(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:targetArray.length - 1 |==> targetArray.length % 1
5906:AOR:-(int,int):*(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:targetArray.length - 1 |==> targetArray.length * 1
5907:AOR:-(int,int):+(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:targetArray.length - 1 |==> targetArray.length + 1
5908:AOR:-(int,int):/(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:targetArray.length - 1 |==> targetArray.length / 1
5909:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:currTargetIndex < (targetArray.length - 1) |==> currTargetIndex != (targetArray.length - 1)
5910:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:currTargetIndex < (targetArray.length - 1) |==> currTargetIndex <= (targetArray.length - 1)
5911:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:currTargetIndex < (targetArray.length - 1) |==> false
5912:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):249:(targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode) && (currTargetIndex < (targetArray.length - 1)) |==> ((targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode)) == (currTargetIndex < (targetArray.length - 1))
5913:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:(targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode) && (currTargetIndex < (targetArray.length - 1)) |==> false
5914:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):249:(targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode) && (currTargetIndex < (targetArray.length - 1)) |==> (targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode)
5915:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):251:(targetEqGroup.size() == sourceSize) && (targetEqGroup.hashCode() == sourceHashCode) && (currTargetIndex < (targetArray.length - 1)) |==> (currTargetIndex < (targetArray.length - 1))
5916:STD:<INC>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):253:currTargetIndex++ |==> <NO-OP>
5917:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):254:targetEqGroup = targetArray[currTargetIndex] |==> <NO-OP>
5918:COR:targetEqGroup.equals(sourceEqGroup):TRUE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):255:targetEqGroup.equals(sourceEqGroup) |==> false
5919:COR:targetEqGroup.equals(sourceEqGroup):FALSE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):255:targetEqGroup.equals(sourceEqGroup) |==> true
5920:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):256:true |==> false
5921:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):256:foundMatch = true |==> <NO-OP>
5922:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):260:targetArray[currTargetIndex] = targetArray[sourceIndex] |==> <NO-OP>
5923:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):261:targetArray[sourceIndex] = targetEqGroup |==> <NO-OP>
5924:COR:foundMatch:TRUE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):264:foundMatch |==> false
5925:COR:foundMatch:FALSE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):264:foundMatch |==> true
5926:LVR:FALSE:TRUE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):268:false |==> true
5927:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):268:result = false |==> <NO-OP>
5928:STD:<BREAK>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):269:break; |==> <NO-OP>
5929:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@reorderTargetArrayToMatchSourceOrder(org.jgrapht.experimental.equivalence.EquivalenceSet[],org.jgrapht.experimental.equivalence.EquivalenceSet[]):273:result |==> false
5930:LVR:0:POS:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):284:0 |==> 1
5931:LVR:0:NEG:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):284:0 |==> -1
5932:LVR:0:POS:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):288:0 |==> 1
5933:LVR:0:NEG:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):288:0 |==> -1
5934:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):289:eqGroupCounter < eqGroupArray.length |==> eqGroupCounter != eqGroupArray.length
5935:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):289:eqGroupCounter < eqGroupArray.length |==> eqGroupCounter <= eqGroupArray.length
5936:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):289:eqGroupCounter < eqGroupArray.length |==> false
5937:EVR:<METHOD_INVOCATION(java.lang.Object[])>:<DEFAULT>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):292:eqGroupArray[eqGroupCounter].toArray() |==> null
5938:LVR:0:POS:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):298:0 |==> 1
5939:LVR:0:NEG:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):298:0 |==> -1
5940:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):296:System.arraycopy(currGroupArray, 0, flatVertexArray, flatVertexArrayNextFree, currGroupArray.length) |==> <NO-OP>
5941:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@fillElementsflatArray(org.jgrapht.experimental.equivalence.EquivalenceSet[],java.lang.Object[]):303:flatVertexArrayNextFree += currGroupArray.length |==> <NO-OP>
5942:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.EquivalenceIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set,java.util.Set):318:true |==> false
5943:EVR:<NEW_CLASS(org.jgrapht.experimental.permutation.CollectionPermutationIter<V>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@createPermutationIterator(java.util.Set<V>,java.util.Set<V>):108:new CollectionPermutationIter<V>(vertexSet2) |==> null
5944:ROR:!=(int,int):<(int,int):org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):123:vertexSet1.size() != vertexSet2.size() |==> vertexSet1.size() < vertexSet2.size()
5945:ROR:!=(int,int):>(int,int):org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):123:vertexSet1.size() != vertexSet2.size() |==> vertexSet1.size() > vertexSet2.size()
5946:ROR:!=(int,int):TRUE(int,int):org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):123:vertexSet1.size() != vertexSet2.size() |==> true
5947:LVR:FALSE:TRUE:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):124:false |==> true
5948:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):124:return Config.__M_NO == 0 && Config.COVERED(5947, 5947) ? false : Config.__M_NO == 5947 ? true : false; |==> <NO-OP>
5949:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):126:vertexSet2.iterator() |==> null
5950:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):129:vertexSet1.iterator() |==> null
5951:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):130:iter1.next() |==> null
5952:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):131:iter2.next() |==> null
5953:COR:this.vertexComparator.equivalenceCompare(vertex1, vertex2, this.graph1, this.graph2):TRUE:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):132:this.vertexComparator.equivalenceCompare(vertex1, vertex2, this.graph1, this.graph2) |==> false
5954:COR:this.vertexComparator.equivalenceCompare(vertex1, vertex2, this.graph1, this.graph2):FALSE:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):132:this.vertexComparator.equivalenceCompare(vertex1, vertex2, this.graph1, this.graph2) |==> true
5955:LVR:FALSE:TRUE:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):138:false |==> true
5956:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):138:return Config.__M_NO == 0 && Config.COVERED(5955, 5955) ? false : Config.__M_NO == 5955 ? true : false; |==> <NO-OP>
5957:LVR:TRUE:FALSE:org.jgrapht.experimental.isomorphism.PermutationIsomorphismInspector@areVertexSetsOfTheSameEqualityGroup(java.util.Set<V>,java.util.Set<V>):141:true |==> false
5958:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator<V,E>.InOutDegrees)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceCompare(V,V,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):85:getInOutDegrees(context1, vertex1) |==> null
5959:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator<V,E>.InOutDegrees)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceCompare(V,V,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):86:getInOutDegrees(context2, vertex2) |==> null
5960:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceCompare(V,V,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):87:inOut1.equals(inOut2) |==> false
5961:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceCompare(V,V,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):88:result |==> false
5962:EVR:<METHOD_INVOCATION(org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator<V,E>.InOutDegrees)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceHashcode(V,org.jgrapht.Graph<V,E>):98:getInOutDegrees(context, vertex) |==> null
5963:EVR:<NEW_CLASS(java.lang.StringBuffer)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceHashcode(V,org.jgrapht.Graph<V,E>):101:new StringBuffer() |==> null
5964:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceHashcode(V,org.jgrapht.Graph<V,E>):102:sb.append(String.valueOf(inOut.inDegree)) |==> <NO-OP>
5965:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceHashcode(V,org.jgrapht.Graph<V,E>):103:sb.append("-") |==> <NO-OP>
5966:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceHashcode(V,org.jgrapht.Graph<V,E>):104:sb.append(String.valueOf(inOut.outDegree)) |==> <NO-OP>
5967:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@equivalenceHashcode(V,org.jgrapht.Graph<V,E>):105:sb.toString().hashCode() |==> 0
5968:LVR:0:POS:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):119:0 |==> 1
5969:LVR:0:NEG:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):119:0 |==> -1
5970:LVR:0:POS:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):120:0 |==> 1
5971:LVR:0:NEG:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):120:0 |==> -1
5972:EVR:<TYPE_CAST(org.jgrapht.UndirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):123:(UndirectedGraph<V, E>)aContextGraph |==> null
5973:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):124:inVertexDegree = undirectedGraph.degreeOf(vertex) |==> <NO-OP>
5974:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):125:outVertexDegree = inVertexDegree |==> <NO-OP>
5975:EVR:<TYPE_CAST(org.jgrapht.DirectedGraph<V,E>)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):128:(DirectedGraph<V, E>)aContextGraph |==> null
5976:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):129:inVertexDegree = directedGraph.inDegreeOf(vertex) |==> <NO-OP>
5977:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):130:outVertexDegree = directedGraph.outDegreeOf(vertex) |==> <NO-OP>
5978:EVR:<NEW_CLASS(org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator<V,E>.InOutDegrees)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator@getInOutDegrees(org.jgrapht.Graph<V,E>,V):136:new InOutDegrees(inVertexDegree, outVertexDegree) |==> null
5979:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@<init>(int,int):156:this.inDegree = aInDegree |==> <NO-OP>
5980:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@<init>(int,int):157:this.outDegree = aOutDegree |==> <NO-OP>
5981:EVR:<TYPE_CAST(org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator<V,E>.InOutDegrees)>:<DEFAULT>:org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):168:(InOutDegrees)obj |==> null
5982:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):169:this.inDegree == other.inDegree |==> this.inDegree <= other.inDegree
5983:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):169:this.inDegree == other.inDegree |==> this.inDegree >= other.inDegree
5984:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):169:this.inDegree == other.inDegree |==> false
5985:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):170:this.outDegree == other.outDegree |==> this.outDegree <= other.outDegree
5986:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):170:this.outDegree == other.outDegree |==> this.outDegree >= other.outDegree
5987:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):170:this.outDegree == other.outDegree |==> false
5988:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):169:(this.inDegree == other.inDegree) && (this.outDegree == other.outDegree) |==> (this.inDegree == other.inDegree) == (this.outDegree == other.outDegree)
5989:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):170:(this.inDegree == other.inDegree) && (this.outDegree == other.outDegree) |==> false
5990:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):169:(this.inDegree == other.inDegree) && (this.outDegree == other.outDegree) |==> (this.inDegree == other.inDegree)
5991:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.isomorphism.VertexDegreeEquivalenceComparator$InOutDegrees@equals(java.lang.Object):170:(this.inDegree == other.inDegree) && (this.outDegree == other.outDegree) |==> (this.outDegree == other.outDegree)
5992:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter:116:0 |==> 1
5993:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter:116:0 |==> -1
5994:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@<init>(int[]):127:init(equalityGroupsSizesArray) |==> <NO-OP>
5995:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):140:this.permArray = new IntegerPermutationIter[equalityGroupsSizesArray.length] |==> <NO-OP>
5996:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):143:0 |==> 1
5997:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):143:0 |==> -1
5998:LVR:POS:0:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):144:1 |==> 0
5999:LVR:POS:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):144:1 |==> -1
6000:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):144:this.max = 1 |==> <NO-OP>
6001:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):146:0 |==> 1
6002:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):146:0 |==> -1
6003:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):147:eqGroup < equalityGroupsSizesArray.length |==> eqGroup != equalityGroupsSizesArray.length
6004:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):147:eqGroup < equalityGroupsSizesArray.length |==> eqGroup <= equalityGroupsSizesArray.length
6005:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):147:eqGroup < equalityGroupsSizesArray.length |==> false
6006:EVR:<ARRAY_ACCESS(int)>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):152:equalityGroupsSizesArray[eqGroup] |==> 0
6007:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):153:new int[currGroupSize] |==> null
6008:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):154:0 |==> 1
6009:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):154:0 |==> -1
6010:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):154:i < currGroupSize |==> i != currGroupSize
6011:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):154:i < currGroupSize |==> i <= currGroupSize
6012:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):154:i < currGroupSize |==> false
6013:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):155:currArray[i] = counter |==> <NO-OP>
6014:STD:<INC>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):156:counter++ |==> <NO-OP>
6015:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):158:this.permArray[eqGroup] = new IntegerPermutationIter(currArray) |==> <NO-OP>
6016:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):159:this.permArray[eqGroup].getNext() |==> <NO-OP>
6017:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):163:this.max *= MathUtil.factorial(currGroupSize) |==> <NO-OP>
6018:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@init(int[]):165:this.totalPermArraySize = counter |==> <NO-OP>
6019:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@next():172:getNext() |==> null
6020:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():183:0 |==> 1
6021:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():183:0 |==> -1
6022:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():183:this.iterCounter == 0 |==> this.iterCounter <= 0
6023:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():183:this.iterCounter == 0 |==> this.iterCounter >= 0
6024:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():183:this.iterCounter == 0 |==> false
6025:STD:<INC>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():185:this.iterCounter++ |==> <NO-OP>
6026:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():186:return getPermAsArray(); |==> <NO-OP>
6027:LVR:NEG:0:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():189:-1 |==> 0
6028:LVR:NEG:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():189:-1 |==> 1
6029:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():190:0 |==> 1
6030:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():190:0 |==> -1
6031:LVR:NEG:0:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():191:-1 |==> 0
6032:LVR:NEG:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():191:-1 |==> 1
6033:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():191:firstGroupCapableOfAdvancing == -1 |==> firstGroupCapableOfAdvancing <= -1
6034:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():191:firstGroupCapableOfAdvancing == -1 |==> firstGroupCapableOfAdvancing >= -1
6035:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():191:firstGroupCapableOfAdvancing == -1 |==> false
6036:EVR:<ARRAY_ACCESS(org.jgrapht.experimental.permutation.IntegerPermutationIter)>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():192:this.permArray[currGroupIndex] |==> null
6037:COR:currGroup.hasNext():TRUE:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():194:currGroup.hasNext() |==> false
6038:COR:currGroup.hasNext():FALSE:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():194:currGroup.hasNext() |==> true
6039:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():195:currGroup.getNext() |==> <NO-OP>
6040:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():198:0 |==> 1
6041:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():198:0 |==> -1
6042:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():198:i < currGroupIndex |==> i != currGroupIndex
6043:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():198:i < currGroupIndex |==> i <= currGroupIndex
6044:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():198:i < currGroupIndex |==> false
6045:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():199:restartPermutationGroup(i) |==> <NO-OP>
6046:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():201:firstGroupCapableOfAdvancing = currGroupIndex |==> <NO-OP>
6047:STD:<INC>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():204:currGroupIndex++ |==> <NO-OP>
6048:ROR:>=(int,int):==(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():205:currGroupIndex >= this.permArray.length |==> currGroupIndex == this.permArray.length
6049:ROR:>=(int,int):>(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():205:currGroupIndex >= this.permArray.length |==> currGroupIndex > this.permArray.length
6050:ROR:>=(int,int):TRUE(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():205:currGroupIndex >= this.permArray.length |==> true
6051:STD:<BREAK>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():206:break; |==> <NO-OP>
6052:STD:<INC>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():210:this.iterCounter++ |==> <NO-OP>
6053:LVR:NEG:0:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():212:-1 |==> 0
6054:LVR:NEG:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():212:-1 |==> 1
6055:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():212:firstGroupCapableOfAdvancing == -1 |==> firstGroupCapableOfAdvancing <= -1
6056:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():212:firstGroupCapableOfAdvancing == -1 |==> firstGroupCapableOfAdvancing >= -1
6057:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():212:firstGroupCapableOfAdvancing == -1 |==> false
6058:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():216:getPermAsArray() |==> null
6059:EVR:<IDENTIFIER(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getNext():217:tempArray |==> null
6060:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():229:new int[this.totalPermArraySize] |==> null
6061:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():230:0 |==> 1
6062:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():230:0 |==> -1
6063:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():232:0 |==> 1
6064:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():232:0 |==> -1
6065:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():233:groupIndex < this.permArray.length |==> groupIndex != this.permArray.length
6066:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():233:groupIndex < this.permArray.length |==> groupIndex <= this.permArray.length
6067:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():233:groupIndex < this.permArray.length |==> false
6068:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():236:this.permArray[groupIndex].getCurrent() |==> null
6069:LVR:0:POS:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():239:0 |==> 1
6070:LVR:0:NEG:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():239:0 |==> -1
6071:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():237:System.arraycopy(currPermArray, 0, resultArray, counter, currPermArray.length) |==> <NO-OP>
6072:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():243:counter += currPermArray.length |==> <NO-OP>
6073:EVR:<IDENTIFIER(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getPermAsArray():245:resultArray |==> null
6074:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@restartPermutationGroup(int):255:this.permArray[groupIndex].getCurrent() |==> null
6075:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@restartPermutationGroup(int):256:Arrays.sort(oldPermArray) |==> <NO-OP>
6076:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@restartPermutationGroup(int):257:this.permArray[groupIndex] = new IntegerPermutationIter(oldPermArray) |==> <NO-OP>
6077:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.CompoundPermutationIter@restartPermutationGroup(int):258:this.permArray[groupIndex].getNext() |==> <NO-OP>
6078:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@hasNext():264:this.iterCounter < this.max |==> this.iterCounter != this.max
6079:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@hasNext():264:this.iterCounter < this.max |==> this.iterCounter <= this.max
6080:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.CompoundPermutationIter@hasNext():264:this.iterCounter < this.max |==> false
6081:LVR:TRUE:FALSE:org.jgrapht.experimental.permutation.CompoundPermutationIter@hasNext():265:true |==> false
6082:LVR:FALSE:TRUE:org.jgrapht.experimental.permutation.CompoundPermutationIter@hasNext():267:false |==> true
6083:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@hasNext():269:result |==> false
6084:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@getMax():274:max |==> 0
6085:EVR:<TYPE_CAST(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@nextPermutation():282:(int[])next() |==> null
6086:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.permutation.CompoundPermutationIter@hasNextPermutaions():290:hasNext() |==> false
6087:LVR:FALSE:TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter:61:false |==> true
6088:LVR:FALSE:TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter:62:false |==> true
6089:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int):80:new int[N] |==> null
6090:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int):83:0 |==> 1
6091:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int):83:0 |==> -1
6092:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int):83:i < newArray.length |==> i != newArray.length
6093:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int):83:i < newArray.length |==> i <= newArray.length
6094:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int):83:i < newArray.length |==> false
6095:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int):84:newArray[i] = i |==> <NO-OP>
6096:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int):86:init(newArray) |==> <NO-OP>
6097:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int[]):99:new int[array.length] |==> null
6098:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int[]):100:0 |==> 1
6099:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int[]):100:0 |==> -1
6100:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int[]):100:0 |==> 1
6101:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int[]):100:0 |==> -1
6102:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int[]):100:System.arraycopy(array, 0, newArray, 0, array.length) |==> <NO-OP>
6103:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int[]):101:Arrays.sort(newArray) |==> <NO-OP>
6104:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@<init>(int[]):102:init(newArray) |==> <NO-OP>
6105:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@init(int[]):109:this.N = array.length |==> <NO-OP>
6106:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@init(int[]):110:this.Value = array |==> <NO-OP>
6107:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@init(int[]):111:this.currentValueBackup = this.Value |==> <NO-OP>
6108:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@init(int[]):112:0 |==> 1
6109:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@init(int[]):112:0 |==> -1
6110:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@init(int[]):112:permutationCounter = 0 |==> <NO-OP>
6111:EVR:<ARRAY_ACCESS(int)>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@swap(int,int):123:this.Value[i] |==> 0
6112:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@swap(int,int):124:this.Value[i] = this.Value[j] |==> <NO-OP>
6113:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@swap(int,int):125:this.Value[j] = temp |==> <NO-OP>
6114:EVR:<NEW_ARRAY(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@arrayClone(int[]):130:new int[sourceArray.length] |==> null
6115:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@arrayClone(int[]):131:0 |==> 1
6116:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@arrayClone(int[]):131:0 |==> -1
6117:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@arrayClone(int[]):131:0 |==> 1
6118:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@arrayClone(int[]):131:0 |==> -1
6119:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@arrayClone(int[]):131:System.arraycopy(sourceArray, 0, destArray, 0, sourceArray.length) |==> <NO-OP>
6120:EVR:<IDENTIFIER(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@arrayClone(int[]):132:destArray |==> null
6121:STD:<INC>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():137:permutationCounter++ |==> <NO-OP>
6122:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():138:1 |==> 0
6123:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():138:1 |==> -1
6124:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():138:N - 1 |==> N % 1
6125:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():138:N - 1 |==> N * 1
6126:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():138:N - 1 |==> N + 1
6127:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():138:N - 1 |==> N / 1
6128:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():140:0 |==> 1
6129:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():140:0 |==> -1
6130:ROR:<=(int,int):<(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():140:i <= 0 |==> i < 0
6131:ROR:<=(int,int):==(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():140:i <= 0 |==> i == 0
6132:ROR:<=(int,int):TRUE(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():140:i <= 0 |==> true
6133:LVR:TRUE:FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():143:true |==> false
6134:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():143:this.endWasReached = true |==> <NO-OP>
6135:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():144:return null; |==> <NO-OP>
6136:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():151:1 |==> 0
6137:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():151:1 |==> -1
6138:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():151:i - 1 |==> i % 1
6139:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():151:i - 1 |==> i * 1
6140:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():151:i - 1 |==> i + 1
6141:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():151:i - 1 |==> i / 1
6142:ROR:>=(int,int):==(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():151:Value[i - 1] >= Value[i] |==> Value[i - 1] == Value[i]
6143:ROR:>=(int,int):>(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():151:Value[i - 1] >= Value[i] |==> Value[i - 1] > Value[i]
6144:ROR:>=(int,int):TRUE(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():151:Value[i - 1] >= Value[i] |==> true
6145:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():152:1 |==> 0
6146:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():152:1 |==> -1
6147:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():152:i - 1 |==> i % 1
6148:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():152:i - 1 |==> i * 1
6149:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():152:i - 1 |==> i + 1
6150:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():152:i - 1 |==> i / 1
6151:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():152:i = i - 1 |==> <NO-OP>
6152:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():153:0 |==> 1
6153:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():153:0 |==> -1
6154:ROR:==(int,int):<=(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():153:i == 0 |==> i <= 0
6155:ROR:==(int,int):>=(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():153:i == 0 |==> i >= 0
6156:ROR:==(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():153:i == 0 |==> false
6157:LVR:TRUE:FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():154:true |==> false
6158:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():154:this.endWasReached = true |==> <NO-OP>
6159:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():155:return null; |==> <NO-OP>
6160:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():159:N |==> 0
6161:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:1 |==> 0
6162:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:1 |==> -1
6163:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:j - 1 |==> j % 1
6164:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:j - 1 |==> j * 1
6165:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:j - 1 |==> j + 1
6166:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:j - 1 |==> j / 1
6167:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:1 |==> 0
6168:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:1 |==> -1
6169:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:i - 1 |==> i % 1
6170:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:i - 1 |==> i * 1
6171:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:i - 1 |==> i + 1
6172:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:i - 1 |==> i / 1
6173:ROR:<=(int,int):<(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:Value[j - 1] <= Value[i - 1] |==> Value[j - 1] < Value[i - 1]
6174:ROR:<=(int,int):==(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:Value[j - 1] <= Value[i - 1] |==> Value[j - 1] == Value[i - 1]
6175:ROR:<=(int,int):TRUE(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():161:Value[j - 1] <= Value[i - 1] |==> true
6176:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():162:1 |==> 0
6177:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():162:1 |==> -1
6178:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():162:j - 1 |==> j % 1
6179:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():162:j - 1 |==> j * 1
6180:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():162:j - 1 |==> j + 1
6181:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():162:j - 1 |==> j / 1
6182:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():162:j = j - 1 |==> <NO-OP>
6183:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:1 |==> 0
6184:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:1 |==> -1
6185:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:i - 1 |==> i % 1
6186:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:i - 1 |==> i * 1
6187:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:i - 1 |==> i + 1
6188:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:i - 1 |==> i / 1
6189:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:1 |==> 0
6190:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:1 |==> -1
6191:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:j - 1 |==> j % 1
6192:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:j - 1 |==> j * 1
6193:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:j - 1 |==> j + 1
6194:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:j - 1 |==> j / 1
6195:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():165:swap(i - 1, j - 1) |==> <NO-OP>
6196:STD:<INC>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():167:i++ |==> <NO-OP>
6197:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():168:j = N |==> <NO-OP>
6198:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():170:i < j |==> i != j
6199:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():170:i < j |==> i <= j
6200:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():170:i < j |==> false
6201:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:1 |==> 0
6202:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:1 |==> -1
6203:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:i - 1 |==> i % 1
6204:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:i - 1 |==> i * 1
6205:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:i - 1 |==> i + 1
6206:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:i - 1 |==> i / 1
6207:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:1 |==> 0
6208:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:1 |==> -1
6209:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:j - 1 |==> j % 1
6210:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:j - 1 |==> j * 1
6211:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:j - 1 |==> j + 1
6212:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:j - 1 |==> j / 1
6213:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():171:swap(i - 1, j - 1) |==> <NO-OP>
6214:STD:<INC>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():172:i++ |==> <NO-OP>
6215:STD:<DEC>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():173:j-- |==> <NO-OP>
6216:EVR:<MEMBER_SELECT(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNextStartingWith2():175:this.Value |==> null
6217:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():183:0 |==> 1
6218:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():183:0 |==> -1
6219:ROR:==(long,long):<=(long,long):org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():183:this.permutationCounter == 0 |==> this.permutationCounter <= 0
6220:ROR:==(long,long):>=(long,long):org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():183:this.permutationCounter == 0 |==> this.permutationCounter >= 0
6221:ROR:==(long,long):FALSE(long,long):org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():183:this.permutationCounter == 0 |==> false
6222:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():183:(this.permutationCounter == 0) || (this.wasNextValueCalculatedAlready) |==> (this.permutationCounter == 0) != (this.wasNextValueCalculatedAlready)
6223:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():183:(this.permutationCounter == 0) || (this.wasNextValueCalculatedAlready) |==> (this.permutationCounter == 0)
6224:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():184:(this.permutationCounter == 0) || (this.wasNextValueCalculatedAlready) |==> (this.wasNextValueCalculatedAlready)
6225:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():184:(this.permutationCounter == 0) || (this.wasNextValueCalculatedAlready) |==> true
6226:LVR:TRUE:FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():186:true |==> false
6227:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():186:return Config.__M_NO == 0 && Config.COVERED(6226, 6226) ? true : Config.__M_NO == 6226 ? false : true; |==> <NO-OP>
6228:COR:this.endWasReached:TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():187:this.endWasReached |==> false
6229:COR:this.endWasReached:FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():187:this.endWasReached |==> true
6230:LVR:FALSE:TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():188:false |==> true
6231:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():188:return Config.__M_NO == 0 && Config.COVERED(6230, 6230) ? false : Config.__M_NO == 6230 ? true : false; |==> <NO-OP>
6232:LVR:TRUE:FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():191:true |==> false
6233:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():206:getNextStartingWith2() |==> <NO-OP>
6234:LVR:TRUE:FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():207:true |==> false
6235:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():207:this.wasNextValueCalculatedAlready = true |==> <NO-OP>
6236:COR:endWasReached:TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():208:endWasReached |==> false
6237:COR:endWasReached:FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():208:endWasReached |==> true
6238:LVR:FALSE:TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():209:false |==> true
6239:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():209:return Config.__M_NO == 0 && Config.COVERED(6238, 6238) ? false : Config.__M_NO == 6238 ? true : false; |==> <NO-OP>
6240:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNext():213:result |==> false
6241:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@next():218:getNext() |==> null
6242:COR:hasNext():TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():229:hasNext() |==> false
6243:COR:hasNext():FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():229:hasNext() |==> true
6244:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():238:0 |==> 1
6245:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():238:0 |==> -1
6246:ROR:==(long,long):<=(long,long):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():238:this.permutationCounter == 0 |==> this.permutationCounter <= 0
6247:ROR:==(long,long):>=(long,long):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():238:this.permutationCounter == 0 |==> this.permutationCounter >= 0
6248:ROR:==(long,long):FALSE(long,long):org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():238:this.permutationCounter == 0 |==> false
6249:STD:<INC>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():239:this.permutationCounter++ |==> <NO-OP>
6250:EVR:<MEMBER_SELECT(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():240:this.Value |==> null
6251:COR:this.wasNextValueCalculatedAlready:TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():243:this.wasNextValueCalculatedAlready |==> false
6252:COR:this.wasNextValueCalculatedAlready:FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():243:this.wasNextValueCalculatedAlready |==> true
6253:EVR:<MEMBER_SELECT(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():244:this.Value |==> null
6254:LVR:FALSE:TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():245:false |==> true
6255:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():245:this.wasNextValueCalculatedAlready = false |==> <NO-OP>
6256:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():247:getNextStartingWith2() |==> null
6257:COR:this.endWasReached:TRUE:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():248:this.endWasReached |==> false
6258:COR:this.endWasReached:FALSE:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():248:this.endWasReached |==> true
6259:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():249:return null; |==> <NO-OP>
6260:STD:<ASSIGN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():253:this.currentValueBackup = arrayClone(internalArray) |==> <NO-OP>
6261:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getNext():254:arrayClone(internalArray) |==> null
6262:EVR:<METHOD_INVOCATION(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@getCurrent():259:arrayClone(this.currentValueBackup) |==> null
6263:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):270:0 |==> 1
6264:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):270:0 |==> -1
6265:ROR:<=(int,int):<(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):270:array.length <= 0 |==> array.length < 0
6266:ROR:<=(int,int):==(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):270:array.length <= 0 |==> array.length == 0
6267:ROR:<=(int,int):TRUE(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):270:array.length <= 0 |==> true
6268:STD:<RETURN>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):271:return "[]"; |==> <NO-OP>
6269:EVR:<NEW_CLASS(java.lang.StringBuffer)>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):273:new StringBuffer("[") |==> null
6270:LVR:0:POS:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:0 |==> 1
6271:LVR:0:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:0 |==> -1
6272:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:1 |==> 0
6273:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:1 |==> -1
6274:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:array.length - 1 |==> array.length % 1
6275:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:array.length - 1 |==> array.length * 1
6276:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:array.length - 1 |==> array.length + 1
6277:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:array.length - 1 |==> array.length / 1
6278:ROR:<(int,int):!=(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:i < (array.length - 1) |==> i != (array.length - 1)
6279:ROR:<(int,int):<=(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:i < (array.length - 1) |==> i <= (array.length - 1)
6280:ROR:<(int,int):FALSE(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):274:i < (array.length - 1) |==> false
6281:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):275:stBuffer.append(array[i]).append(",") |==> <NO-OP>
6282:LVR:POS:0:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):277:1 |==> 0
6283:LVR:POS:NEG:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):277:1 |==> -1
6284:AOR:-(int,int):%(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):277:array.length - 1 |==> array.length % 1
6285:AOR:-(int,int):*(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):277:array.length - 1 |==> array.length * 1
6286:AOR:-(int,int):+(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):277:array.length - 1 |==> array.length + 1
6287:AOR:-(int,int):/(int,int):org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):277:array.length - 1 |==> array.length / 1
6288:STD:<CALL>:<NO-OP>:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):277:stBuffer.append(array[array.length - 1]).append("]") |==> <NO-OP>
6289:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@toString(int[]):278:stBuffer.toString() |==> null
6290:EVR:<TYPE_CAST(int[])>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@nextPermutation():296:(int[])next() |==> null
6291:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.experimental.permutation.IntegerPermutationIter@hasNextPermutaions():304:hasNext() |==> false
6292:EVR:<NEW_CLASS(org.jgrapht.experimental.permutation.IntegerPermutationIter)>:<DEFAULT>:org.jgrapht.experimental.permutation.PermutationFactory@createRegular(int[]):76:new IntegerPermutationIter(permSourceArray) |==> null
6293:EVR:<IDENTIFIER(org.jgrapht.experimental.permutation.IntegerPermutationIter)>:<DEFAULT>:org.jgrapht.experimental.permutation.PermutationFactory@createRegular(int[]):77:regularPerm |==> null
6294:EVR:<NEW_CLASS(org.jgrapht.experimental.permutation.CompoundPermutationIter)>:<DEFAULT>:org.jgrapht.experimental.permutation.PermutationFactory@createByGroups(int[]):90:new CompoundPermutationIter(groupSizesArray) |==> null
6295:EVR:<IDENTIFIER(org.jgrapht.experimental.permutation.CompoundPermutationIter)>:<DEFAULT>:org.jgrapht.experimental.permutation.PermutationFactory@createByGroups(int[]):91:complexPerm |==> null
6296:LVR:0:POS:org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:0 |==> 1
6297:LVR:0:NEG:org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:0 |==> -1
6298:ROR:<(int,int):!=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:partitionOne < 0 |==> partitionOne != 0
6299:ROR:<(int,int):<=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:partitionOne < 0 |==> partitionOne <= 0
6300:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:partitionOne < 0 |==> false
6301:LVR:0:POS:org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:0 |==> 1
6302:LVR:0:NEG:org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:0 |==> -1
6303:ROR:<(int,int):!=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:partitionTwo < 0 |==> partitionTwo != 0
6304:ROR:<(int,int):<=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:partitionTwo < 0 |==> partitionTwo <= 0
6305:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:partitionTwo < 0 |==> false
6306:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:(partitionOne < 0) || (partitionTwo < 0) |==> (partitionOne < 0) != (partitionTwo < 0)
6307:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:(partitionOne < 0) || (partitionTwo < 0) |==> (partitionOne < 0)
6308:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:(partitionOne < 0) || (partitionTwo < 0) |==> (partitionTwo < 0)
6309:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):71:(partitionOne < 0) || (partitionTwo < 0) |==> true
6310:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):74:this.sizeA = partitionOne |==> <NO-OP>
6311:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@<init>(int,int):75:this.sizeB = partitionTwo |==> <NO-OP>
6312:LVR:POS:0:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:1 |==> 0
6313:LVR:POS:NEG:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:1 |==> -1
6314:ROR:<(int,int):!=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:sizeA < 1 |==> sizeA != 1
6315:ROR:<(int,int):<=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:sizeA < 1 |==> sizeA <= 1
6316:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:sizeA < 1 |==> false
6317:LVR:POS:0:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:1 |==> 0
6318:LVR:POS:NEG:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:1 |==> -1
6319:ROR:<(int,int):!=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:sizeB < 1 |==> sizeB != 1
6320:ROR:<(int,int):<=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:sizeB < 1 |==> sizeB <= 1
6321:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:sizeB < 1 |==> false
6322:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:(sizeA < 1) && (sizeB < 1) |==> (sizeA < 1) == (sizeB < 1)
6323:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:(sizeA < 1) && (sizeB < 1) |==> false
6324:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:(sizeA < 1) && (sizeB < 1) |==> (sizeA < 1)
6325:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:(sizeA < 1) && (sizeB < 1) |==> (sizeB < 1)
6326:STD:<RETURN>:<NO-OP>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):89:return; |==> <NO-OP>
6327:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:new HashSet<V>() |==> null
6328:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):94:new HashSet<V>() |==> null
6329:LVR:0:POS:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):95:0 |==> 1
6330:LVR:0:NEG:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):95:0 |==> -1
6331:ROR:<(int,int):!=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):95:i < sizeA |==> i != sizeA
6332:ROR:<(int,int):<=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):95:i < sizeA |==> i <= sizeA
6333:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):95:i < sizeA |==> false
6334:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):96:vertexFactory.createVertex() |==> null
6335:STD:<CALL>:<NO-OP>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:target.addVertex(newVertex) |==> <NO-OP>
6336:STD:<CALL>:<NO-OP>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):98:a.add(newVertex) |==> <NO-OP>
6337:LVR:0:POS:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:0 |==> 1
6338:LVR:0:NEG:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:0 |==> -1
6339:ROR:<(int,int):!=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:i < sizeB |==> i != sizeB
6340:ROR:<(int,int):<=(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:i < sizeB |==> i <= sizeB
6341:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:i < sizeB |==> false
6342:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):101:vertexFactory.createVertex() |==> null
6343:STD:<CALL>:<NO-OP>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):102:target.addVertex(newVertex) |==> <NO-OP>
6344:STD:<CALL>:<NO-OP>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:b.add(newVertex) |==> <NO-OP>
6345:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):107:a.iterator() |==> null
6346:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):108:iterA.next() |==> null
6347:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):109:b.iterator() |==> null
6348:STD:<CALL>:<NO-OP>:org.jgrapht.generate.CompleteBipartiteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:target.addEdge(v, iterB.next()) |==> <NO-OP>
6349:LVR:0:POS:org.jgrapht.generate.CompleteGraphGenerator@<init>(int):76:0 |==> 1
6350:LVR:0:NEG:org.jgrapht.generate.CompleteGraphGenerator@<init>(int):76:0 |==> -1
6351:ROR:<(int,int):!=(int,int):org.jgrapht.generate.CompleteGraphGenerator@<init>(int):76:size < 0 |==> size != 0
6352:ROR:<(int,int):<=(int,int):org.jgrapht.generate.CompleteGraphGenerator@<init>(int):76:size < 0 |==> size <= 0
6353:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.CompleteGraphGenerator@<init>(int):76:size < 0 |==> false
6354:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.CompleteGraphGenerator@<init>(int):80:this.size = size |==> <NO-OP>
6355:LVR:POS:0:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:1 |==> 0
6356:LVR:POS:NEG:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:1 |==> -1
6357:ROR:<(int,int):!=(int,int):org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:size < 1 |==> size != 1
6358:ROR:<(int,int):<=(int,int):org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:size < 1 |==> size <= 1
6359:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:size < 1 |==> false
6360:STD:<RETURN>:<NO-OP>:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):94:return; |==> <NO-OP>
6361:LVR:0:POS:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):98:0 |==> 1
6362:LVR:0:NEG:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):98:0 |==> -1
6363:ROR:<(int,int):!=(int,int):org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):98:i < size |==> i != size
6364:ROR:<(int,int):<=(int,int):org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):98:i < size |==> i <= size
6365:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):98:i < size |==> false
6366:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):99:vertexFactory.createVertex() |==> null
6367:STD:<CALL>:<NO-OP>:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:target.addVertex(newVertex) |==> <NO-OP>
6368:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):112:target.vertexSet().iterator() |==> null
6369:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:slowI.next() |==> null
6370:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):118:target.vertexSet().iterator() |==> null
6371:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):121:fastI.next() != latestVertex |==> true
6372:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):128:fastI.next() |==> null
6373:STD:<CALL>:<NO-OP>:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):129:target.addEdge(latestVertex, temp) |==> <NO-OP>
6374:STD:<CALL>:<NO-OP>:org.jgrapht.generate.CompleteGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:target.addEdge(temp, latestVertex) |==> <NO-OP>
6375:LVR:0:POS:org.jgrapht.generate.EmptyGraphGenerator@<init>(int):69:0 |==> 1
6376:LVR:0:NEG:org.jgrapht.generate.EmptyGraphGenerator@<init>(int):69:0 |==> -1
6377:ROR:<(int,int):!=(int,int):org.jgrapht.generate.EmptyGraphGenerator@<init>(int):69:size < 0 |==> size != 0
6378:ROR:<(int,int):<=(int,int):org.jgrapht.generate.EmptyGraphGenerator@<init>(int):69:size < 0 |==> size <= 0
6379:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.EmptyGraphGenerator@<init>(int):69:size < 0 |==> false
6380:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.EmptyGraphGenerator@<init>(int):73:this.size = size |==> <NO-OP>
6381:LVR:0:POS:org.jgrapht.generate.EmptyGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):86:0 |==> 1
6382:LVR:0:NEG:org.jgrapht.generate.EmptyGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):86:0 |==> -1
6383:ROR:<(int,int):!=(int,int):org.jgrapht.generate.EmptyGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):86:i < size |==> i != size
6384:ROR:<(int,int):<=(int,int):org.jgrapht.generate.EmptyGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):86:i < size |==> i <= size
6385:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.EmptyGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):86:i < size |==> false
6386:STD:<CALL>:<NO-OP>:org.jgrapht.generate.EmptyGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):87:target.addVertex(vertexFactory.createVertex()) |==> <NO-OP>
6387:LVR:POS:0:org.jgrapht.generate.GridGraphGenerator@<init>(int,int):82:2 |==> 0
6388:LVR:POS:NEG:org.jgrapht.generate.GridGraphGenerator@<init>(int,int):82:2 |==> -2
6389:ROR:<(int,int):!=(int,int):org.jgrapht.generate.GridGraphGenerator@<init>(int,int):82:rows < 2 |==> rows != 2
6390:ROR:<(int,int):<=(int,int):org.jgrapht.generate.GridGraphGenerator@<init>(int,int):82:rows < 2 |==> rows <= 2
6391:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@<init>(int,int):82:rows < 2 |==> false
6392:LVR:POS:0:org.jgrapht.generate.GridGraphGenerator@<init>(int,int):87:2 |==> 0
6393:LVR:POS:NEG:org.jgrapht.generate.GridGraphGenerator@<init>(int,int):87:2 |==> -2
6394:ROR:<(int,int):!=(int,int):org.jgrapht.generate.GridGraphGenerator@<init>(int,int):87:cols < 2 |==> cols != 2
6395:ROR:<(int,int):<=(int,int):org.jgrapht.generate.GridGraphGenerator@<init>(int,int):87:cols < 2 |==> cols <= 2
6396:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@<init>(int,int):87:cols < 2 |==> false
6397:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.GridGraphGenerator@<init>(int,int):92:this.rows = rows |==> <NO-OP>
6398:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.GridGraphGenerator@<init>(int,int):93:this.cols = cols |==> <NO-OP>
6399:EVR:<NEW_CLASS(java.util.TreeMap<java.lang.Integer,V>)>:<DEFAULT>:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):106:new TreeMap<Integer, V>() |==> null
6400:LVR:0:POS:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):109:0 |==> 1
6401:LVR:0:NEG:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):109:0 |==> -1
6402:LVR:0:POS:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:0 |==> 1
6403:LVR:0:NEG:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:0 |==> -1
6404:AOR:*(int,int):%(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:rows * cols |==> rows % cols
6405:AOR:*(int,int):+(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:rows * cols |==> rows + cols
6406:AOR:*(int,int):-(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:rows * cols |==> rows - cols
6407:AOR:*(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:rows * cols |==> rows / cols
6408:ROR:<(int,int):!=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:i < (rows * cols) |==> i != (rows * cols)
6409:ROR:<(int,int):<=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:i < (rows * cols) |==> i <= (rows * cols)
6410:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):110:i < (rows * cols) |==> false
6411:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):111:vertexFactory.createVertex() |==> null
6412:STD:<CALL>:<NO-OP>:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):112:target.addVertex(vertex) |==> <NO-OP>
6413:LVR:POS:0:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):113:1 |==> 0
6414:LVR:POS:NEG:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):113:1 |==> -1
6415:AOR:+(int,int):%(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):113:i + 1 |==> i % 1
6416:AOR:+(int,int):*(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):113:i + 1 |==> i * 1
6417:AOR:+(int,int):-(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):113:i + 1 |==> i - 1
6418:AOR:+(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):113:i + 1 |==> i / 1
6419:STD:<CALL>:<NO-OP>:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):113:map.put(i + 1, vertex) |==> <NO-OP>
6420:LVR:0:POS:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:0 |==> 1
6421:LVR:0:NEG:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:0 |==> -1
6422:ROR:==(int,int):<=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:i == 0 |==> i <= 0
6423:ROR:==(int,int):>=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:i == 0 |==> i >= 0
6424:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:i == 0 |==> false
6425:LVR:POS:0:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:1 |==> 0
6426:LVR:POS:NEG:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:1 |==> -1
6427:AOR:-(int,int):%(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:cols - 1 |==> cols % 1
6428:AOR:-(int,int):*(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:cols - 1 |==> cols * 1
6429:AOR:-(int,int):+(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:cols - 1 |==> cols + 1
6430:AOR:-(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:cols - 1 |==> cols / 1
6431:ROR:==(int,int):<=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:i == (cols - 1) |==> i <= (cols - 1)
6432:ROR:==(int,int):>=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:i == (cols - 1) |==> i >= (cols - 1)
6433:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:i == (cols - 1) |==> false
6434:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) |==> (i == 0) != (i == (cols - 1))
6435:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) |==> (i == 0)
6436:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) |==> (i == (cols - 1))
6437:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) |==> true
6438:LVR:POS:0:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:1 |==> 0
6439:LVR:POS:NEG:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:1 |==> -1
6440:AOR:-(int,int):%(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:rows - 1 |==> rows % 1
6441:AOR:-(int,int):*(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:rows - 1 |==> rows * 1
6442:AOR:-(int,int):+(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:rows - 1 |==> rows + 1
6443:AOR:-(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:rows - 1 |==> rows / 1
6444:AOR:*(int,int):%(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:cols * (rows - 1) |==> cols % (rows - 1)
6445:AOR:*(int,int):+(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:cols * (rows - 1) |==> cols + (rows - 1)
6446:AOR:*(int,int):-(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:cols * (rows - 1) |==> cols - (rows - 1)
6447:AOR:*(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:cols * (rows - 1) |==> cols / (rows - 1)
6448:ROR:==(int,int):<=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:i == (cols * (rows - 1)) |==> i <= (cols * (rows - 1))
6449:ROR:==(int,int):>=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:i == (cols * (rows - 1)) |==> i >= (cols * (rows - 1))
6450:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:i == (cols * (rows - 1)) |==> false
6451:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1))) |==> ((i == 0) || (i == (cols - 1))) != (i == (cols * (rows - 1)))
6452:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1))) |==> (i == 0) || (i == (cols - 1))
6453:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1))) |==> (i == (cols * (rows - 1)))
6454:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1))) |==> true
6455:AOR:*(int,int):%(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:rows * cols |==> rows % cols
6456:AOR:*(int,int):+(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:rows * cols |==> rows + cols
6457:AOR:*(int,int):-(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:rows * cols |==> rows - cols
6458:AOR:*(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:rows * cols |==> rows / cols
6459:LVR:POS:0:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:1 |==> 0
6460:LVR:POS:NEG:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:1 |==> -1
6461:AOR:-(int,int):%(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:(rows * cols) - 1 |==> (rows * cols) % 1
6462:AOR:-(int,int):*(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:(rows * cols) - 1 |==> (rows * cols) * 1
6463:AOR:-(int,int):+(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:(rows * cols) - 1 |==> (rows * cols) + 1
6464:AOR:-(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:(rows * cols) - 1 |==> (rows * cols) / 1
6465:ROR:==(int,int):<=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:i == ((rows * cols) - 1) |==> i <= ((rows * cols) - 1)
6466:ROR:==(int,int):>=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:i == ((rows * cols) - 1) |==> i >= ((rows * cols) - 1)
6467:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:i == ((rows * cols) - 1) |==> false
6468:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1))) || (i == ((rows * cols) - 1)) |==> ((i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1)))) != (i == ((rows * cols) - 1))
6469:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:(i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1))) || (i == ((rows * cols) - 1)) |==> (i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1)))
6470:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:(i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1))) || (i == ((rows * cols) - 1)) |==> (i == ((rows * cols) - 1))
6471:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):117:(i == 0) || (i == (cols - 1)) || (i == (cols * (rows - 1))) || (i == ((rows * cols) - 1)) |==> true
6472:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):118:resultMap != null |==> true
6473:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):118:isCorner && (resultMap != null) |==> isCorner == (resultMap != null)
6474:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):118:isCorner && (resultMap != null) |==> false
6475:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):118:isCorner && (resultMap != null) |==> isCorner
6476:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):118:isCorner && (resultMap != null) |==> (resultMap != null)
6477:STD:<CALL>:<NO-OP>:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):119:resultMap.put(CORNER_VERTEX + ' ' + ++cornerCtr, vertex) |==> <NO-OP>
6478:AOR:%(int,int):*(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:i % cols |==> i * cols
6479:AOR:%(int,int):+(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:i % cols |==> i + cols
6480:AOR:%(int,int):-(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:i % cols |==> i - cols
6481:AOR:%(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:i % cols |==> i / cols
6482:LVR:0:POS:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:0 |==> 1
6483:LVR:0:NEG:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:0 |==> -1
6484:ROR:>(int,int):!=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:(i % cols) > 0 |==> (i % cols) != 0
6485:ROR:>(int,int):>=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:(i % cols) > 0 |==> (i % cols) >= 0
6486:ROR:>(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:(i % cols) > 0 |==> false
6487:LVR:POS:0:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:1 |==> 0
6488:LVR:POS:NEG:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:1 |==> -1
6489:AOR:+(int,int):%(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:i + 1 |==> i % 1
6490:AOR:+(int,int):*(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:i + 1 |==> i * 1
6491:AOR:+(int,int):-(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:i + 1 |==> i - 1
6492:AOR:+(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:i + 1 |==> i / 1
6493:ROR:==(int,int):<=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:(i + 1) == Integer.valueOf(j) |==> (i + 1) <= Integer.valueOf(j)
6494:ROR:==(int,int):>=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:(i + 1) == Integer.valueOf(j) |==> (i + 1) >= Integer.valueOf(j)
6495:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:(i + 1) == Integer.valueOf(j) |==> false
6496:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:((i % cols) > 0) && ((i + 1) == Integer.valueOf(j)) |==> ((i % cols) > 0) == ((i + 1) == Integer.valueOf(j))
6497:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:((i % cols) > 0) && ((i + 1) == Integer.valueOf(j)) |==> false
6498:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:((i % cols) > 0) && ((i + 1) == Integer.valueOf(j)) |==> ((i % cols) > 0)
6499:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:((i % cols) > 0) && ((i + 1) == Integer.valueOf(j)) |==> ((i + 1) == Integer.valueOf(j))
6500:AOR:+(int,int):%(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:i + cols |==> i % cols
6501:AOR:+(int,int):*(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:i + cols |==> i * cols
6502:AOR:+(int,int):-(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:i + cols |==> i - cols
6503:AOR:+(int,int):/(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:i + cols |==> i / cols
6504:ROR:==(int,int):<=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:(i + cols) == j |==> (i + cols) <= j
6505:ROR:==(int,int):>=(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:(i + cols) == j |==> (i + cols) >= j
6506:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:(i + cols) == j |==> false
6507:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:(((i % cols) > 0) && ((i + 1) == Integer.valueOf(j))) || ((i + cols) == j) |==> (((i % cols) > 0) && ((i + 1) == Integer.valueOf(j))) != ((i + cols) == j)
6508:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:(((i % cols) > 0) && ((i + 1) == Integer.valueOf(j))) || ((i + cols) == j) |==> (((i % cols) > 0) && ((i + 1) == Integer.valueOf(j)))
6509:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:(((i % cols) > 0) && ((i + 1) == Integer.valueOf(j))) || ((i + cols) == j) |==> ((i + cols) == j)
6510:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:(((i % cols) > 0) && ((i + 1) == Integer.valueOf(j))) || ((i + cols) == j) |==> true
6511:STD:<CALL>:<NO-OP>:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):134:target.addEdge(map.get(i), map.get(j)) |==> <NO-OP>
6512:STD:<CALL>:<NO-OP>:org.jgrapht.generate.GridGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):135:target.addEdge(map.get(j), map.get(i)) |==> <NO-OP>
6513:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.HyperCubeGraphGenerator@<init>(int):70:this.dim = dim |==> <NO-OP>
6514:LVR:POS:0:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):85:2 |==> 0
6515:LVR:POS:NEG:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):85:2 |==> -2
6516:EVR:<NEW_CLASS(java.util.LinkedList<V>)>:<DEFAULT>:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):86:new LinkedList<V>() |==> null
6517:LVR:0:POS:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):87:0 |==> 1
6518:LVR:0:NEG:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):87:0 |==> -1
6519:ROR:<(int,int):!=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):87:i < order |==> i != order
6520:ROR:<(int,int):<=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):87:i < order |==> i <= order
6521:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):87:i < order |==> false
6522:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:vertexFactory.createVertex() |==> null
6523:STD:<CALL>:<NO-OP>:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):89:target.addVertex(newVertex) |==> <NO-OP>
6524:STD:<CALL>:<NO-OP>:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):90:vertices.add(newVertex) |==> <NO-OP>
6525:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):91:resultMap != null |==> true
6526:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):92:Integer.toBinaryString(i) |==> null
6527:ROR:<(int,int):!=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:s.length() < dim |==> s.length() != dim
6528:ROR:<(int,int):<=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:s.length() < dim |==> s.length() <= dim
6529:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:s.length() < dim |==> false
6530:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):94:s = "0" + s |==> <NO-OP>
6531:STD:<CALL>:<NO-OP>:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):96:resultMap.put(s, newVertex) |==> <NO-OP>
6532:LVR:0:POS:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):102:0 |==> 1
6533:LVR:0:NEG:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):102:0 |==> -1
6534:ROR:<(int,int):!=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):102:i < order |==> i != order
6535:ROR:<(int,int):<=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):102:i < order |==> i <= order
6536:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):102:i < order |==> false
6537:LVR:POS:0:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:1 |==> 0
6538:LVR:POS:NEG:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:1 |==> -1
6539:AOR:+(int,int):%(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:i + 1 |==> i % 1
6540:AOR:+(int,int):*(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:i + 1 |==> i * 1
6541:AOR:+(int,int):-(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:i + 1 |==> i - 1
6542:AOR:+(int,int):/(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:i + 1 |==> i / 1
6543:ROR:<(int,int):!=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:j < order |==> j != order
6544:ROR:<(int,int):<=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:j < order |==> j <= order
6545:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:j < order |==> false
6546:LVR:0:POS:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):104:0 |==> 1
6547:LVR:0:NEG:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):104:0 |==> -1
6548:ROR:<(int,int):!=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):104:z < dim |==> z != dim
6549:ROR:<(int,int):<=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):104:z < dim |==> z <= dim
6550:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):104:z < dim |==> false
6551:LOR:^(int,int):&(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:j ^ i |==> j & i
6552:LOR:^(int,int):|(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:j ^ i |==> j | i
6553:LVR:POS:0:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:1 |==> 0
6554:LVR:POS:NEG:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:1 |==> -1
6555:SOR:<<(int,int):>>(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:1 << z |==> 1 >> z
6556:SOR:<<(int,int):>>>(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:1 << z |==> 1 >>> z
6557:ROR:==(int,int):<=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:(j ^ i) == (1 << z) |==> (j ^ i) <= (1 << z)
6558:ROR:==(int,int):>=(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:(j ^ i) == (1 << z) |==> (j ^ i) >= (1 << z)
6559:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:(j ^ i) == (1 << z) |==> false
6560:STD:<CALL>:<NO-OP>:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):106:target.addEdge(vertices.get(i), vertices.get(j)) |==> <NO-OP>
6561:STD:<BREAK>:<NO-OP>:org.jgrapht.generate.HyperCubeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):107:break; |==> <NO-OP>
6562:LVR:0:POS:org.jgrapht.generate.LinearGraphGenerator@<init>(int):81:0 |==> 1
6563:LVR:0:NEG:org.jgrapht.generate.LinearGraphGenerator@<init>(int):81:0 |==> -1
6564:ROR:<(int,int):!=(int,int):org.jgrapht.generate.LinearGraphGenerator@<init>(int):81:size < 0 |==> size != 0
6565:ROR:<(int,int):<=(int,int):org.jgrapht.generate.LinearGraphGenerator@<init>(int):81:size < 0 |==> size <= 0
6566:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.LinearGraphGenerator@<init>(int):81:size < 0 |==> false
6567:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.LinearGraphGenerator@<init>(int):85:this.size = size |==> <NO-OP>
6568:LVR:0:POS:org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:0 |==> 1
6569:LVR:0:NEG:org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:0 |==> -1
6570:ROR:<(int,int):!=(int,int):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:i < size |==> i != size
6571:ROR:<(int,int):<=(int,int):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:i < size |==> i <= size
6572:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):100:i < size |==> false
6573:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):101:vertexFactory.createVertex() |==> null
6574:STD:<CALL>:<NO-OP>:org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):102:target.addVertex(newVertex) |==> <NO-OP>
6575:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):104:lastVertex == null |==> false
6576:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:resultMap != null |==> true
6577:STD:<CALL>:<NO-OP>:org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):106:resultMap.put(START_VERTEX, newVertex) |==> <NO-OP>
6578:STD:<CALL>:<NO-OP>:org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):109:target.addEdge(lastVertex, newVertex) |==> <NO-OP>
6579:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):112:lastVertex = newVertex |==> <NO-OP>
6580:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):115:resultMap != null |==> true
6581:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):115:lastVertex != null |==> true
6582:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):115:(resultMap != null) && (lastVertex != null) |==> (resultMap != null) == (lastVertex != null)
6583:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):115:(resultMap != null) && (lastVertex != null) |==> false
6584:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):115:(resultMap != null) && (lastVertex != null) |==> (resultMap != null)
6585:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):115:(resultMap != null) && (lastVertex != null) |==> (lastVertex != null)
6586:STD:<CALL>:<NO-OP>:org.jgrapht.generate.LinearGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):116:resultMap.put(END_VERTEX, lastVertex) |==> <NO-OP>
6587:LVR:POS:0:org.jgrapht.generate.RandomGraphGenerator:62:8682522807148012L |==> 0L
6588:LVR:POS:NEG:org.jgrapht.generate.RandomGraphGenerator:62:8682522807148012L |==> -8682522807148012L
6589:LVR:0:POS:org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:0 |==> 1
6590:LVR:0:NEG:org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:0 |==> -1
6591:ROR:<(int,int):!=(int,int):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:aNumOfVertexes < 0 |==> aNumOfVertexes != 0
6592:ROR:<(int,int):<=(int,int):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:aNumOfVertexes < 0 |==> aNumOfVertexes <= 0
6593:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:aNumOfVertexes < 0 |==> false
6594:LVR:0:POS:org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:0 |==> 1
6595:LVR:0:NEG:org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:0 |==> -1
6596:ROR:<(int,int):!=(int,int):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:aNumOfEdges < 0 |==> aNumOfEdges != 0
6597:ROR:<(int,int):<=(int,int):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:aNumOfEdges < 0 |==> aNumOfEdges <= 0
6598:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:aNumOfEdges < 0 |==> false
6599:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:(aNumOfVertexes < 0) || (aNumOfEdges < 0) |==> (aNumOfVertexes < 0) != (aNumOfEdges < 0)
6600:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:(aNumOfVertexes < 0) || (aNumOfEdges < 0) |==> (aNumOfVertexes < 0)
6601:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:(aNumOfVertexes < 0) || (aNumOfEdges < 0) |==> (aNumOfEdges < 0)
6602:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):75:(aNumOfVertexes < 0) || (aNumOfEdges < 0) |==> true
6603:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):78:this.numOfVertexes = aNumOfVertexes |==> <NO-OP>
6604:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):79:this.numOfEdges = aNumOfEdges |==> <NO-OP>
6605:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):81:this.randomizerSeed = chooseRandomSeedOnce() |==> <NO-OP>
6606:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator@<init>(int,int):82:this.randomizer = new Random(this.randomizerSeed) |==> <NO-OP>
6607:AOR:+(long,long):%(long,long):org.jgrapht.generate.RandomGraphGenerator@chooseRandomSeedOnce():98:++seedUniquifier + System.nanoTime() |==> ++seedUniquifier % System.nanoTime()
6608:AOR:+(long,long):*(long,long):org.jgrapht.generate.RandomGraphGenerator@chooseRandomSeedOnce():98:++seedUniquifier + System.nanoTime() |==> ++seedUniquifier * System.nanoTime()
6609:AOR:+(long,long):-(long,long):org.jgrapht.generate.RandomGraphGenerator@chooseRandomSeedOnce():98:++seedUniquifier + System.nanoTime() |==> ++seedUniquifier - System.nanoTime()
6610:AOR:+(long,long):/(long,long):org.jgrapht.generate.RandomGraphGenerator@chooseRandomSeedOnce():98:++seedUniquifier + System.nanoTime() |==> ++seedUniquifier / System.nanoTime()
6611:STD:<CALL>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator@resetRandomSeed():106:this.randomizer.setSeed(this.randomizerSeed) |==> <NO-OP>
6612:STD:<CALL>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):125:resetRandomSeed() |==> <NO-OP>
6613:EVR:<NEW_CLASS(java.util.HashMap<java.lang.Integer,V>)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:new HashMap<Integer, V>(this.numOfVertexes) |==> null
6614:LVR:0:POS:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:0 |==> 1
6615:LVR:0:NEG:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:0 |==> -1
6616:ROR:<(int,int):!=(int,int):org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:i < this.numOfVertexes |==> i != this.numOfVertexes
6617:ROR:<(int,int):<=(int,int):org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:i < this.numOfVertexes |==> i <= this.numOfVertexes
6618:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:i < this.numOfVertexes |==> false
6619:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):133:vertexFactory.createVertex() |==> null
6620:STD:<CALL>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):134:target.addVertex(currVertex) |==> <NO-OP>
6621:STD:<CALL>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):135:orderToVertexMap.put(Integer.valueOf(i), currVertex) |==> <NO-OP>
6622:ROR:!=(int,int):<(int,int):org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):138:target.vertexSet().size() != numOfVertexes |==> target.vertexSet().size() < numOfVertexes
6623:ROR:!=(int,int):>(int,int):org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):138:target.vertexSet().size() != numOfVertexes |==> target.vertexSet().size() > numOfVertexes
6624:ROR:!=(int,int):TRUE(int,int):org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):138:target.vertexSet().size() != numOfVertexes |==> true
6625:EVR:<METHOD_INVOCATION(org.jgrapht.generate.RandomGraphGenerator.EdgeTopologyFactory<V,E>)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):147:edgeTopologyFactoryChooser(target, numOfEdges) |==> null
6626:COR:edgesFactory.isNumberOfEdgesValid(target, numOfEdges):TRUE:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):148:edgesFactory.isNumberOfEdgesValid(target, numOfEdges) |==> false
6627:COR:edgesFactory.isNumberOfEdgesValid(target, numOfEdges):FALSE:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):148:edgesFactory.isNumberOfEdgesValid(target, numOfEdges) |==> true
6628:STD:<CALL>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):158:edgesFactory.createEdges(target, orderToVertexMap, this.numOfEdges, this.randomizer) |==> <NO-OP>
6629:EVR:<NEW_CLASS(org.jgrapht.generate.RandomGraphGenerator<V,E>.DefaultEdgeTopologyFactory<V,E>)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator@edgeTopologyFactoryChooser(org.jgrapht.Graph<V,E>,int):177:new DefaultEdgeTopologyFactory<V, E>() |==> null
6630:LVR:0:POS:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):249:0 |==> 1
6631:LVR:0:NEG:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):249:0 |==> -1
6632:LVR:0:POS:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):250:0 |==> 1
6633:LVR:0:NEG:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):250:0 |==> -1
6634:ROR:<(int,int):!=(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):251:edgesCounter < numberOfEdges |==> edgesCounter != numberOfEdges
6635:ROR:<(int,int):<=(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):251:edgesCounter < numberOfEdges |==> edgesCounter <= numberOfEdges
6636:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):251:edgesCounter < numberOfEdges |==> false
6637:EVR:<METHOD_INVOCATION(VV)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):255:orderToVertexMap.get(Integer.valueOf(randomizer.nextInt(numOfVertexes))) |==> null
6638:EVR:<METHOD_INVOCATION(VV)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):258:orderToVertexMap.get(Integer.valueOf(randomizer.nextInt(numOfVertexes))) |==> null
6639:EVR:<METHOD_INVOCATION(EE)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):261:targetGraph.addEdge(startVertex, endVertex) |==> null
6640:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):262:resultEdge != null |==> true
6641:STD:<INC>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):263:edgesCounter++ |==> <NO-OP>
6642:STD:<INC>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@createEdges(org.jgrapht.Graph<VV,EE>,java.util.Map<java.lang.Integer,VV>,int,java.util.Random):269:iterationsCounter++ |==> <NO-OP>
6643:LVR:FALSE:TRUE:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):339:false |==> true
6644:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):340:getMaxEdgesForVertexNum(targetGraph) |==> 0
6645:LVR:NEG:0:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):341:-1 |==> 0
6646:LVR:NEG:POS:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):341:-1 |==> 1
6647:ROR:==(int,int):<=(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):341:maxAllowedEdges == -1 |==> maxAllowedEdges <= -1
6648:ROR:==(int,int):>=(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):341:maxAllowedEdges == -1 |==> maxAllowedEdges >= -1
6649:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):341:maxAllowedEdges == -1 |==> false
6650:LVR:TRUE:FALSE:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):342:true |==> false
6651:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):342:infinite = true |==> <NO-OP>
6652:LVR:TRUE:FALSE:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):345:true |==> false
6653:ROR:==(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):345:true == infinite |==> false
6654:ROR:==(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):345:true == infinite |==> true
6655:ROR:==(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):345:true == infinite |==> infinite
6656:LVR:TRUE:FALSE:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):346:true |==> false
6657:ROR:<=(int,int):<(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):347:numberOfEdges <= maxAllowedEdges |==> numberOfEdges < maxAllowedEdges
6658:ROR:<=(int,int):==(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):347:numberOfEdges <= maxAllowedEdges |==> numberOfEdges == maxAllowedEdges
6659:ROR:<=(int,int):TRUE(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):347:numberOfEdges <= maxAllowedEdges |==> true
6660:LVR:TRUE:FALSE:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):348:true |==> false
6661:LVR:FALSE:TRUE:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):350:false |==> true
6662:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@isNumberOfEdgesValid(org.jgrapht.Graph<VV,EE>,int):352:result |==> false
6663:LVR:0:POS:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):360:0 |==> 1
6664:LVR:0:NEG:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):360:0 |==> -1
6665:LVR:POS:0:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:1 |==> 0
6666:LVR:POS:NEG:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:1 |==> -1
6667:AOR:-(int,int):%(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes - 1 |==> numOfVertexes % 1
6668:AOR:-(int,int):*(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes - 1 |==> numOfVertexes * 1
6669:AOR:-(int,int):+(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes - 1 |==> numOfVertexes + 1
6670:AOR:-(int,int):/(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes - 1 |==> numOfVertexes / 1
6671:AOR:*(int,int):%(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes * (numOfVertexes - 1) |==> numOfVertexes % (numOfVertexes - 1)
6672:AOR:*(int,int):+(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes * (numOfVertexes - 1) |==> numOfVertexes + (numOfVertexes - 1)
6673:AOR:*(int,int):-(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes * (numOfVertexes - 1) |==> numOfVertexes - (numOfVertexes - 1)
6674:AOR:*(int,int):/(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes * (numOfVertexes - 1) |==> numOfVertexes / (numOfVertexes - 1)
6675:LVR:POS:0:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:2 |==> 0
6676:LVR:POS:NEG:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:2 |==> -2
6677:AOR:/(int,int):%(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes * (numOfVertexes - 1) / 2 |==> numOfVertexes * (numOfVertexes - 1) % 2
6678:AOR:/(int,int):*(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes * (numOfVertexes - 1) / 2 |==> numOfVertexes * (numOfVertexes - 1) * 2
6679:AOR:/(int,int):+(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes * (numOfVertexes - 1) / 2 |==> numOfVertexes * (numOfVertexes - 1) + 2
6680:AOR:/(int,int):-(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:numOfVertexes * (numOfVertexes - 1) / 2 |==> numOfVertexes * (numOfVertexes - 1) - 2
6681:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):362:maxAllowedEdges = numOfVertexes * (numOfVertexes - 1) / 2 |==> <NO-OP>
6682:LVR:POS:0:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:1 |==> 0
6683:LVR:POS:NEG:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:1 |==> -1
6684:AOR:-(int,int):%(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:numOfVertexes - 1 |==> numOfVertexes % 1
6685:AOR:-(int,int):*(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:numOfVertexes - 1 |==> numOfVertexes * 1
6686:AOR:-(int,int):+(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:numOfVertexes - 1 |==> numOfVertexes + 1
6687:AOR:-(int,int):/(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:numOfVertexes - 1 |==> numOfVertexes / 1
6688:AOR:*(int,int):%(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:numOfVertexes * (numOfVertexes - 1) |==> numOfVertexes % (numOfVertexes - 1)
6689:AOR:*(int,int):+(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:numOfVertexes * (numOfVertexes - 1) |==> numOfVertexes + (numOfVertexes - 1)
6690:AOR:*(int,int):-(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:numOfVertexes * (numOfVertexes - 1) |==> numOfVertexes - (numOfVertexes - 1)
6691:AOR:*(int,int):/(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:numOfVertexes * (numOfVertexes - 1) |==> numOfVertexes / (numOfVertexes - 1)
6692:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):364:maxAllowedEdges = numOfVertexes * (numOfVertexes - 1) |==> <NO-OP>
6693:AOR:*(int,int):%(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):366:numOfVertexes * numOfVertexes |==> numOfVertexes % numOfVertexes
6694:AOR:*(int,int):+(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):366:numOfVertexes * numOfVertexes |==> numOfVertexes + numOfVertexes
6695:AOR:*(int,int):-(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):366:numOfVertexes * numOfVertexes |==> numOfVertexes - numOfVertexes
6696:AOR:*(int,int):/(int,int):org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):366:numOfVertexes * numOfVertexes |==> numOfVertexes / numOfVertexes
6697:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):366:maxAllowedEdges = numOfVertexes * numOfVertexes |==> <NO-OP>
6698:LVR:NEG:0:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):371:-1 |==> 0
6699:LVR:NEG:POS:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):371:-1 |==> 1
6700:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):371:maxAllowedEdges = -1 |==> <NO-OP>
6701:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.generate.RandomGraphGenerator$DefaultEdgeTopologyFactory@getMaxEdgesForVertexNum(org.jgrapht.Graph<VV,EE>):373:maxAllowedEdges |==> 0
6702:LVR:0:POS:org.jgrapht.generate.RingGraphGenerator@<init>(int):71:0 |==> 1
6703:LVR:0:NEG:org.jgrapht.generate.RingGraphGenerator@<init>(int):71:0 |==> -1
6704:ROR:<(int,int):!=(int,int):org.jgrapht.generate.RingGraphGenerator@<init>(int):71:size < 0 |==> size != 0
6705:ROR:<(int,int):<=(int,int):org.jgrapht.generate.RingGraphGenerator@<init>(int):71:size < 0 |==> size <= 0
6706:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.RingGraphGenerator@<init>(int):71:size < 0 |==> false
6707:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.RingGraphGenerator@<init>(int):75:this.size = size |==> <NO-OP>
6708:LVR:POS:0:org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:1 |==> 0
6709:LVR:POS:NEG:org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:1 |==> -1
6710:ROR:<(int,int):!=(int,int):org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:size < 1 |==> size != 1
6711:ROR:<(int,int):<=(int,int):org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:size < 1 |==> size <= 1
6712:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):88:size < 1 |==> false
6713:STD:<RETURN>:<NO-OP>:org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):89:return; |==> <NO-OP>
6714:EVR:<NEW_CLASS(org.jgrapht.generate.LinearGraphGenerator<V,E>)>:<DEFAULT>:org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:new LinearGraphGenerator<V, E>(size) |==> null
6715:EVR:<NEW_CLASS(java.util.HashMap<java.lang.String,V>)>:<DEFAULT>:org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):94:new HashMap<String, V>() |==> null
6716:STD:<CALL>:<NO-OP>:org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):95:linearGenerator.generateGraph(target, vertexFactory, privateMap) |==> <NO-OP>
6717:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:privateMap.get(LinearGraphGenerator.START_VERTEX) |==> null
6718:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):98:privateMap.get(LinearGraphGenerator.END_VERTEX) |==> null
6719:STD:<CALL>:<NO-OP>:org.jgrapht.generate.RingGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):99:target.addEdge(endVertex, startVertex) |==> <NO-OP>
6720:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int):70:0 |==> 1
6721:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int):70:0 |==> -1
6722:ROR:<(int,int):!=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int):70:size < 0 |==> size != 0
6723:ROR:<(int,int):<=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int):70:size < 0 |==> size <= 0
6724:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int):70:size < 0 |==> false
6725:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int):74:this.size = size |==> <NO-OP>
6726:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int):75:random = new Random() |==> <NO-OP>
6727:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int):76:seed = random.nextLong() |==> <NO-OP>
6728:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int,long):90:0 |==> 1
6729:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int,long):90:0 |==> -1
6730:ROR:<(int,int):!=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int,long):90:size < 0 |==> size != 0
6731:ROR:<(int,int):<=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int,long):90:size < 0 |==> size <= 0
6732:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int,long):90:size < 0 |==> false
6733:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int,long):94:this.size = size |==> <NO-OP>
6734:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int,long):95:random = new Random() |==> <NO-OP>
6735:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@<init>(int,long):96:this.seed = seed |==> <NO-OP>
6736:STD:<CALL>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):118:random.setSeed(seed) |==> <NO-OP>
6737:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):119:new ArrayList<V>() |==> null
6738:EVR:<NEW_CLASS(java.util.ArrayList<java.lang.Integer>)>:<DEFAULT>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):120:new ArrayList<Integer>() |==> null
6739:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):121:0 |==> 1
6740:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):121:0 |==> -1
6741:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):122:0 |==> 1
6742:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):122:0 |==> -1
6743:ROR:<(int,int):!=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):122:i < size |==> i != size
6744:ROR:<(int,int):<=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):122:i < size |==> i <= size
6745:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):122:i < size |==> false
6746:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):123:vertexFactory.createVertex() |==> null
6747:STD:<CALL>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):124:target.addVertex(newVertex) |==> <NO-OP>
6748:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):125:0 |==> 1
6749:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):125:0 |==> -1
6750:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:0 |==> 1
6751:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:0 |==> -1
6752:ROR:==(int,int):<=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:newDegree == 0 |==> newDegree <= 0
6753:ROR:==(int,int):>=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:newDegree == 0 |==> newDegree >= 0
6754:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:newDegree == 0 |==> false
6755:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:0 |==> 1
6756:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:0 |==> -1
6757:ROR:!=(int,int):<(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:i != 0 |==> i < 0
6758:ROR:!=(int,int):>(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:i != 0 |==> i > 0
6759:ROR:!=(int,int):TRUE(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:i != 0 |==> true
6760:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:(newDegree == 0) && (i != 0) |==> (newDegree == 0) == (i != 0)
6761:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:(newDegree == 0) && (i != 0) |==> false
6762:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:(newDegree == 0) && (i != 0) |==> (newDegree == 0)
6763:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):126:(newDegree == 0) && (i != 0) |==> (i != 0)
6764:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:0 |==> 1
6765:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:0 |==> -1
6766:ROR:<(int,int):!=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:j < vertexList.size() |==> j != vertexList.size()
6767:ROR:<(int,int):<=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:j < vertexList.size() |==> j <= vertexList.size()
6768:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):130:j < vertexList.size() |==> false
6769:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:0 |==> 1
6770:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:0 |==> -1
6771:ROR:==(int,int):<=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:degreeSum == 0 |==> degreeSum <= 0
6772:ROR:==(int,int):>=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:degreeSum == 0 |==> degreeSum >= 0
6773:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:degreeSum == 0 |==> false
6774:ROR:<(int,int):!=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:random.nextInt(degreeSum) < degrees.get(j) |==> random.nextInt(degreeSum) != degrees.get(j)
6775:ROR:<(int,int):<=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:random.nextInt(degreeSum) < degrees.get(j) |==> random.nextInt(degreeSum) <= degrees.get(j)
6776:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:random.nextInt(degreeSum) < degrees.get(j) |==> false
6777:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:(degreeSum == 0) || (random.nextInt(degreeSum) < degrees.get(j)) |==> (degreeSum == 0) != (random.nextInt(degreeSum) < degrees.get(j))
6778:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):131:(degreeSum == 0) || (random.nextInt(degreeSum) < degrees.get(j)) |==> (degreeSum == 0)
6779:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:(degreeSum == 0) || (random.nextInt(degreeSum) < degrees.get(j)) |==> (random.nextInt(degreeSum) < degrees.get(j))
6780:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:(degreeSum == 0) || (random.nextInt(degreeSum) < degrees.get(j)) |==> true
6781:LVR:POS:0:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):134:1 |==> 0
6782:LVR:POS:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):134:1 |==> -1
6783:AOR:+(int,int):%(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):134:degrees.get(j) + 1 |==> degrees.get(j) % 1
6784:AOR:+(int,int):*(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):134:degrees.get(j) + 1 |==> degrees.get(j) * 1
6785:AOR:+(int,int):-(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):134:degrees.get(j) + 1 |==> degrees.get(j) - 1
6786:AOR:+(int,int):/(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):134:degrees.get(j) + 1 |==> degrees.get(j) / 1
6787:STD:<CALL>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):134:degrees.set(j, degrees.get(j) + 1) |==> <NO-OP>
6788:STD:<INC>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):135:newDegree++ |==> <NO-OP>
6789:LVR:POS:0:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):136:2 |==> 0
6790:LVR:POS:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):136:2 |==> -2
6791:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):136:degreeSum += 2 |==> <NO-OP>
6792:LVR:POS:0:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):137:2 |==> 0
6793:LVR:POS:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):137:2 |==> -2
6794:LVR:0:POS:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):137:0 |==> 1
6795:LVR:0:NEG:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):137:0 |==> -1
6796:ROR:==(int,int):<=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):137:random.nextInt(2) == 0 |==> random.nextInt(2) <= 0
6797:ROR:==(int,int):>=(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):137:random.nextInt(2) == 0 |==> random.nextInt(2) >= 0
6798:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):137:random.nextInt(2) == 0 |==> false
6799:STD:<CALL>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):138:target.addEdge(vertexList.get(j), newVertex) |==> <NO-OP>
6800:STD:<CALL>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):140:target.addEdge(newVertex, vertexList.get(j)) |==> <NO-OP>
6801:STD:<CALL>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):145:vertexList.add(newVertex) |==> <NO-OP>
6802:STD:<CALL>:<NO-OP>:org.jgrapht.generate.ScaleFreeGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):146:degrees.add(newDegree) |==> <NO-OP>
6803:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@first(java.util.List<? extends V>):36:this.first = new ArrayList<V>(first) |==> <NO-OP>
6804:EVR:<IDENTIFIER(org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator<V,E>)>:<DEFAULT>:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@first(java.util.List<? extends V>):37:this |==> null
6805:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@second(java.util.List<? extends V>):43:this.second = new ArrayList<V>(second) |==> <NO-OP>
6806:EVR:<IDENTIFIER(org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator<V,E>)>:<DEFAULT>:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@second(java.util.List<? extends V>):44:this |==> null
6807:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):52:weights == null |==> false
6808:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):57:first == null |==> false
6809:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):57:second == null |==> false
6810:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):57:(first == null) || (second == null) |==> (first == null) != (second == null)
6811:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):57:(first == null) || (second == null) |==> (first == null)
6812:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):57:(first == null) || (second == null) |==> (second == null)
6813:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):57:(first == null) || (second == null) |==> true
6814:ROR:==(int,int):<=(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):62:second.size() == weights.length |==> second.size() <= weights.length
6815:ROR:==(int,int):>=(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):62:second.size() == weights.length |==> second.size() >= weights.length
6816:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):62:second.size() == weights.length |==> false
6817:STD:<CALL>:<NO-OP>:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):65:target.addVertex(vertex) |==> <NO-OP>
6818:STD:<CALL>:<NO-OP>:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):69:target.addVertex(vertex) |==> <NO-OP>
6819:LVR:0:POS:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:0 |==> 1
6820:LVR:0:NEG:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:0 |==> -1
6821:ROR:<(int,int):!=(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:i < first.size() |==> i != first.size()
6822:ROR:<(int,int):<=(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:i < first.size() |==> i <= first.size()
6823:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:i < first.size() |==> false
6824:ROR:==(int,int):<=(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):73:first.size() == weights[i].length |==> first.size() <= weights[i].length
6825:ROR:==(int,int):>=(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):73:first.size() == weights[i].length |==> first.size() >= weights[i].length
6826:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):73:first.size() == weights[i].length |==> false
6827:LVR:0:POS:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):75:0 |==> 1
6828:LVR:0:NEG:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):75:0 |==> -1
6829:ROR:<(int,int):!=(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):75:j < second.size() |==> j != second.size()
6830:ROR:<(int,int):<=(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):75:j < second.size() |==> j <= second.size()
6831:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):75:j < second.size() |==> false
6832:STD:<CALL>:<NO-OP>:org.jgrapht.generate.SimpleWeightedBipartiteGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):76:target.setEdgeWeight(target.addEdge(first.get(i), second.get(j)), weights[i][j]) |==> <NO-OP>
6833:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.WeightedGraphGeneratorAdapter@weights(double[][]):47:this.weights = weights |==> <NO-OP>
6834:EVR:<IDENTIFIER(org.jgrapht.generate.WeightedGraphGeneratorAdapter<V,E,T>)>:<DEFAULT>:org.jgrapht.generate.WeightedGraphGeneratorAdapter@weights(double[][]):48:this |==> null
6835:STD:<CALL>:<NO-OP>:org.jgrapht.generate.WeightedGraphGeneratorAdapter@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,T>):56:generateGraph((WeightedGraph<V, E>)target, vertexFactory, resultMap) |==> <NO-OP>
6836:AOR:-(int,int):%(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):33:to - from |==> to % from
6837:AOR:-(int,int):*(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):33:to - from |==> to * from
6838:AOR:-(int,int):+(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):33:to - from |==> to + from
6839:AOR:-(int,int):/(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):33:to - from |==> to / from
6840:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):34:from |==> 0
6841:ROR:<(int,int):!=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):34:i < to |==> i != to
6842:ROR:<(int,int):<=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):34:i < to |==> i <= to
6843:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):34:i < to |==> false
6844:AOR:-(int,int):%(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):35:i - from |==> i % from
6845:AOR:-(int,int):*(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):35:i - from |==> i * from
6846:AOR:-(int,int):+(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):35:i - from |==> i + from
6847:AOR:-(int,int):/(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):35:i - from |==> i / from
6848:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):35:range[i - from] = i |==> <NO-OP>
6849:EVR:<IDENTIFIER(int[])>:<DEFAULT>:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@range(int,int):37:range |==> null
6850:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@vertices(java.util.List<V>):44:this.vertices = vertices |==> <NO-OP>
6851:EVR:<IDENTIFIER(org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator<V,E>)>:<DEFAULT>:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@vertices(java.util.List<V>):45:this |==> null
6852:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):53:weights == null |==> false
6853:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):58:vertices == null |==> false
6854:ROR:==(int,int):<=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):63:vertices.size() == weights.length |==> vertices.size() <= weights.length
6855:ROR:==(int,int):>=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):63:vertices.size() == weights.length |==> vertices.size() >= weights.length
6856:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):63:vertices.size() == weights.length |==> false
6857:STD:<CALL>:<NO-OP>:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):66:target.addVertex(vertex) |==> <NO-OP>
6858:LVR:0:POS:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):69:0 |==> 1
6859:LVR:0:NEG:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):69:0 |==> -1
6860:ROR:<(int,int):!=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):69:i < vertices.size() |==> i != vertices.size()
6861:ROR:<(int,int):<=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):69:i < vertices.size() |==> i <= vertices.size()
6862:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):69:i < vertices.size() |==> false
6863:ROR:==(int,int):<=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):70:vertices.size() == weights[i].length |==> vertices.size() <= weights[i].length
6864:ROR:==(int,int):>=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):70:vertices.size() == weights[i].length |==> vertices.size() >= weights[i].length
6865:ROR:==(int,int):FALSE(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):70:vertices.size() == weights[i].length |==> false
6866:LVR:0:POS:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:0 |==> 1
6867:LVR:0:NEG:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:0 |==> -1
6868:ROR:<(int,int):!=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:j < vertices.size() |==> j != vertices.size()
6869:ROR:<(int,int):<=(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:j < vertices.size() |==> j <= vertices.size()
6870:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):72:j < vertices.size() |==> false
6871:ROR:!=(int,int):<(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):73:i != j |==> i < j
6872:ROR:!=(int,int):>(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):73:i != j |==> i > j
6873:ROR:!=(int,int):TRUE(int,int):org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):73:i != j |==> true
6874:STD:<CALL>:<NO-OP>:org.jgrapht.generate.SimpleWeightedGraphMatrixGenerator@generateGraph(org.jgrapht.WeightedGraph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):74:target.setEdgeWeight(target.addEdge(vertices.get(i), vertices.get(j)), weights[i][j]) |==> <NO-OP>
6875:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.StarGraphGenerator@<init>(int):72:this.order = order |==> <NO-OP>
6876:LVR:POS:0:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):85:1 |==> 0
6877:LVR:POS:NEG:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):85:1 |==> -1
6878:ROR:<(int,int):!=(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):85:order < 1 |==> order != 1
6879:ROR:<(int,int):<=(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):85:order < 1 |==> order <= 1
6880:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):85:order < 1 |==> false
6881:STD:<RETURN>:<NO-OP>:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):86:return; |==> <NO-OP>
6882:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):90:vertexFactory.createVertex() |==> null
6883:STD:<CALL>:<NO-OP>:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):91:target.addVertex(centerVertex) |==> <NO-OP>
6884:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):92:resultMap != null |==> true
6885:STD:<CALL>:<NO-OP>:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):93:resultMap.put(CENTER_VERTEX, centerVertex) |==> <NO-OP>
6886:LVR:0:POS:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:0 |==> 1
6887:LVR:0:NEG:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:0 |==> -1
6888:LVR:POS:0:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:1 |==> 0
6889:LVR:POS:NEG:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:1 |==> -1
6890:AOR:-(int,int):%(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:order - 1 |==> order % 1
6891:AOR:-(int,int):*(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:order - 1 |==> order * 1
6892:AOR:-(int,int):+(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:order - 1 |==> order + 1
6893:AOR:-(int,int):/(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:order - 1 |==> order / 1
6894:ROR:<(int,int):!=(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:i < (order - 1) |==> i != (order - 1)
6895:ROR:<(int,int):<=(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:i < (order - 1) |==> i <= (order - 1)
6896:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):97:i < (order - 1) |==> false
6897:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):98:vertexFactory.createVertex() |==> null
6898:STD:<CALL>:<NO-OP>:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):99:target.addVertex(newVertex) |==> <NO-OP>
6899:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):103:target.vertexSet().iterator() |==> null
6900:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):105:iter.next() |==> null
6901:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):106:v != centerVertex |==> true
6902:STD:<CALL>:<NO-OP>:org.jgrapht.generate.StarGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):107:target.addEdge(v, centerVertex) |==> <NO-OP>
6903:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.WeightedGraphGenerator@edgeFactory(org.jgrapht.EdgeFactory<V,E>):36:this.edgeFactory = edgeFactory |==> <NO-OP>
6904:EVR:<IDENTIFIER(org.jgrapht.generate.WeightedGraphGenerator<V,E>)>:<DEFAULT>:org.jgrapht.generate.WeightedGraphGenerator@edgeFactory(org.jgrapht.EdgeFactory<V,E>):37:this |==> null
6905:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.WeightedGraphGenerator@edgeClass(java.lang.Class<? extends E>):42:this.edgeClass = edgeClass |==> <NO-OP>
6906:EVR:<IDENTIFIER(org.jgrapht.generate.WeightedGraphGenerator<V,E>)>:<DEFAULT>:org.jgrapht.generate.WeightedGraphGenerator@edgeClass(java.lang.Class<? extends E>):43:this |==> null
6907:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.WeightedGraphGenerator@weights(double[][]):48:this.weights = weights |==> <NO-OP>
6908:EVR:<IDENTIFIER(org.jgrapht.generate.WeightedGraphGenerator<V,E>)>:<DEFAULT>:org.jgrapht.generate.WeightedGraphGenerator@weights(double[][]):49:this |==> null
6909:LVR:TRUE:FALSE:org.jgrapht.generate.WheelGraphGenerator@<init>(int):80:true |==> false
6910:LVR:0:POS:org.jgrapht.generate.WheelGraphGenerator@<init>(int,boolean):94:0 |==> 1
6911:LVR:0:NEG:org.jgrapht.generate.WheelGraphGenerator@<init>(int,boolean):94:0 |==> -1
6912:ROR:<(int,int):!=(int,int):org.jgrapht.generate.WheelGraphGenerator@<init>(int,boolean):94:size < 0 |==> size != 0
6913:ROR:<(int,int):<=(int,int):org.jgrapht.generate.WheelGraphGenerator@<init>(int,boolean):94:size < 0 |==> size <= 0
6914:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.WheelGraphGenerator@<init>(int,boolean):94:size < 0 |==> false
6915:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.WheelGraphGenerator@<init>(int,boolean):98:this.size = size |==> <NO-OP>
6916:STD:<ASSIGN>:<NO-OP>:org.jgrapht.generate.WheelGraphGenerator@<init>(int,boolean):99:this.inwardSpokes = inwardSpokes |==> <NO-OP>
6917:LVR:POS:0:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):112:1 |==> 0
6918:LVR:POS:NEG:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):112:1 |==> -1
6919:ROR:<(int,int):!=(int,int):org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):112:size < 1 |==> size != 1
6920:ROR:<(int,int):<=(int,int):org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):112:size < 1 |==> size <= 1
6921:ROR:<(int,int):FALSE(int,int):org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):112:size < 1 |==> false
6922:STD:<RETURN>:<NO-OP>:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):113:return; |==> <NO-OP>
6923:EVR:<NEW_CLASS(java.util.ArrayList<V>)>:<DEFAULT>:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):119:new ArrayList<V>() |==> null
6924:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.WheelGraphGenerator$1@createVertex():124:vertexFactory.createVertex() |==> null
6925:STD:<CALL>:<NO-OP>:org.jgrapht.generate.WheelGraphGenerator$1@createVertex():125:rim.add(vertex) |==> <NO-OP>
6926:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.generate.WheelGraphGenerator$1@createVertex():127:vertex |==> null
6927:LVR:POS:0:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:1 |==> 0
6928:LVR:POS:NEG:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:1 |==> -1
6929:AOR:-(int,int):%(int,int):org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:size - 1 |==> size % 1
6930:AOR:-(int,int):*(int,int):org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:size - 1 |==> size * 1
6931:AOR:-(int,int):+(int,int):org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:size - 1 |==> size + 1
6932:AOR:-(int,int):/(int,int):org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):132:size - 1 |==> size / 1
6933:STD:<CALL>:<NO-OP>:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):133:ringGenerator.generateGraph(target, rimVertexFactory, resultMap) |==> <NO-OP>
6934:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):135:vertexFactory.createVertex() |==> null
6935:STD:<CALL>:<NO-OP>:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):136:target.addVertex(hubVertex) |==> <NO-OP>
6936:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):138:resultMap != null |==> true
6937:STD:<CALL>:<NO-OP>:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):139:resultMap.put(HUB_VERTEX, hubVertex) |==> <NO-OP>
6938:COR:inwardSpokes:TRUE:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):143:inwardSpokes |==> false
6939:COR:inwardSpokes:FALSE:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):143:inwardSpokes |==> true
6940:STD:<CALL>:<NO-OP>:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):144:target.addEdge(rimVertex, hubVertex) |==> <NO-OP>
6941:STD:<CALL>:<NO-OP>:org.jgrapht.generate.WheelGraphGenerator@generateGraph(org.jgrapht.Graph<V,E>,org.jgrapht.VertexFactory<V>,java.util.Map<java.lang.String,V>):146:target.addEdge(hubVertex, rimVertex) |==> <NO-OP>
6942:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):108:super.getAllEdges(sourceVertex, targetVertex) |==> null
6943:COR:sourceVertex.equals(targetVertex):TRUE:org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):110:sourceVertex.equals(targetVertex) |==> false
6944:COR:sourceVertex.equals(targetVertex):FALSE:org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):110:sourceVertex.equals(targetVertex) |==> true
6945:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):112:return forwardList; |==> <NO-OP>
6946:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):115:super.getAllEdges(targetVertex, sourceVertex) |==> null
6947:AOR:+(int,int):%(int,int):org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):118:forwardList.size() + reverseList.size() |==> forwardList.size() % reverseList.size()
6948:AOR:+(int,int):*(int,int):org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):118:forwardList.size() + reverseList.size() |==> forwardList.size() * reverseList.size()
6949:AOR:+(int,int):-(int,int):org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):118:forwardList.size() + reverseList.size() |==> forwardList.size() - reverseList.size()
6950:AOR:+(int,int):/(int,int):org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):118:forwardList.size() + reverseList.size() |==> forwardList.size() / reverseList.size()
6951:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):119:list.addAll(forwardList) |==> <NO-OP>
6952:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):120:list.addAll(reverseList) |==> <NO-OP>
6953:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.AsUndirectedGraph@getAllEdges(V,V):122:list |==> null
6954:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AsUndirectedGraph@getEdge(V,V):130:super.getEdge(sourceVertex, targetVertex) |==> null
6955:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AsUndirectedGraph@getEdge(V,V):132:edge != null |==> true
6956:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.AsUndirectedGraph@getEdge(V,V):133:return edge; |==> <NO-OP>
6957:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.AsUndirectedGraph@getEdge(V,V):137:super.getEdge(targetVertex, sourceVertex) |==> null
6958:AOR:+(int,int):%(int,int):org.jgrapht.graph.AsUndirectedGraph@degreeOf(V):162:super.inDegreeOf(vertex) + super.outDegreeOf(vertex) |==> super.inDegreeOf(vertex) % super.outDegreeOf(vertex)
6959:AOR:+(int,int):*(int,int):org.jgrapht.graph.AsUndirectedGraph@degreeOf(V):162:super.inDegreeOf(vertex) + super.outDegreeOf(vertex) |==> super.inDegreeOf(vertex) * super.outDegreeOf(vertex)
6960:AOR:+(int,int):-(int,int):org.jgrapht.graph.AsUndirectedGraph@degreeOf(V):162:super.inDegreeOf(vertex) + super.outDegreeOf(vertex) |==> super.inDegreeOf(vertex) - super.outDegreeOf(vertex)
6961:AOR:+(int,int):/(int,int):org.jgrapht.graph.AsUndirectedGraph@degreeOf(V):162:super.inDegreeOf(vertex) + super.outDegreeOf(vertex) |==> super.inDegreeOf(vertex) / super.outDegreeOf(vertex)
6962:LVR:FALSE:TRUE:org.jgrapht.graph.AsUndirectedGraph@toString():202:false |==> true
6963:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.GraphDelegator@<init>(org.jgrapht.Graph<V,E>):93:g == null |==> false
6964:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphDelegator@<init>(org.jgrapht.Graph<V,E>):97:delegate = g |==> <NO-OP>
6965:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@getAllEdges(V,V):107:delegate.getAllEdges(sourceVertex, targetVertex) |==> null
6966:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@getEdge(V,V):115:delegate.getEdge(sourceVertex, targetVertex) |==> null
6967:EVR:<METHOD_INVOCATION(org.jgrapht.EdgeFactory<V,E>)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@getEdgeFactory():123:delegate.getEdgeFactory() |==> null
6968:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@addEdge(V,V):131:delegate.addEdge(sourceVertex, targetVertex) |==> null
6969:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@addEdge(V,V,E):139:delegate.addEdge(sourceVertex, targetVertex, e) |==> false
6970:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@addVertex(V):147:delegate.addVertex(v) |==> false
6971:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@containsEdge(E):155:delegate.containsEdge(e) |==> false
6972:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@containsVertex(V):163:delegate.containsVertex(v) |==> false
6973:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@degreeOf(V):171:((UndirectedGraph<V, E>)delegate).degreeOf(vertex) |==> 0
6974:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@edgeSet():179:delegate.edgeSet() |==> null
6975:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@edgesOf(V):187:delegate.edgesOf(vertex) |==> null
6976:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@inDegreeOf(V):195:((DirectedGraph<V, ? extends E>)delegate).inDegreeOf(vertex) |==> 0
6977:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@incomingEdgesOf(V):203:((DirectedGraph<V, E>)delegate).incomingEdgesOf(vertex) |==> null
6978:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@outDegreeOf(V):211:((DirectedGraph<V, ? extends E>)delegate).outDegreeOf(vertex) |==> 0
6979:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@outgoingEdgesOf(V):219:((DirectedGraph<V, E>)delegate).outgoingEdgesOf(vertex) |==> null
6980:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@removeEdge(E):227:delegate.removeEdge(e) |==> false
6981:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@removeEdge(V,V):235:delegate.removeEdge(sourceVertex, targetVertex) |==> null
6982:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@removeVertex(V):243:delegate.removeVertex(v) |==> false
6983:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@toString():251:delegate.toString() |==> null
6984:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@vertexSet():259:delegate.vertexSet() |==> null
6985:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@getEdgeSource(E):267:delegate.getEdgeSource(e) |==> null
6986:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@getEdgeTarget(E):275:delegate.getEdgeTarget(e) |==> null
6987:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.graph.GraphDelegator@getEdgeWeight(E):283:delegate.getEdgeWeight(e) |==> 0.0
6988:STD:<CALL>:<NO-OP>:org.jgrapht.graph.GraphDelegator@setEdgeWeight(E,double):291:((WeightedGraph<V, E>)delegate).setEdgeWeight(e, weight) |==> <NO-OP>
6989:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.graph.AsUnweightedDirectedGraph@getEdgeWeight(E):94:WeightedGraph.DEFAULT_EDGE_WEIGHT |==> 0.0
6990:EVR:<MEMBER_SELECT(double)>:<DEFAULT>:org.jgrapht.graph.AsUnweightedGraph@getEdgeWeight(E):94:WeightedGraph.DEFAULT_EDGE_WEIGHT |==> 0.0
6991:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.graph.AsWeightedGraph@<init>(org.jgrapht.Graph<V,E>,java.util.Map<E,java.lang.Double>):102:weightMap != null |==> true
6992:EVR:<IDENTIFIER(java.util.Map<E,java.lang.Double>)>:<DEFAULT>:org.jgrapht.graph.AsWeightedGraph@<init>(org.jgrapht.Graph<V,E>,java.util.Map<E,java.lang.Double>):103:weightMap |==> null
6993:EVR:<PARENTHESIZED(boolean)>:<DEFAULT>:org.jgrapht.graph.AsWeightedGraph@<init>(org.jgrapht.Graph<V,E>,java.util.Map<E,java.lang.Double>):107:(g instanceof WeightedGraph<?, ?>) |==> false
6994:COR:isWeightedGraph:TRUE:org.jgrapht.graph.AsWeightedGraph@setEdgeWeight(E,double):117:isWeightedGraph |==> false
6995:COR:isWeightedGraph:FALSE:org.jgrapht.graph.AsWeightedGraph@setEdgeWeight(E,double):117:isWeightedGraph |==> true
6996:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AsWeightedGraph@setEdgeWeight(E,double):118:super.setEdgeWeight(e, weight) |==> <NO-OP>
6997:STD:<CALL>:<NO-OP>:org.jgrapht.graph.AsWeightedGraph@setEdgeWeight(E,double):123:weightMap.put(e, weight) |==> <NO-OP>
6998:COR:weightMap.containsKey(e):TRUE:org.jgrapht.graph.AsWeightedGraph@getEdgeWeight(E):135:weightMap.containsKey(e) |==> false
6999:COR:weightMap.containsKey(e):FALSE:org.jgrapht.graph.AsWeightedGraph@getEdgeWeight(E):135:weightMap.containsKey(e) |==> true
7000:EVR:<METHOD_INVOCATION(java.lang.Double)>:<DEFAULT>:org.jgrapht.graph.AsWeightedGraph@getEdgeWeight(E):136:weightMap.get(e) |==> null
7001:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.graph.AsWeightedGraph@getEdgeWeight(E):138:super.getEdgeWeight(e) |==> 0.0
7002:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.graph.AsWeightedGraph@getEdgeWeight(E):141:weight |==> 0.0
7003:EVR:<IDENTIFIER(java.lang.Class<capture#968 of ? extends E>)>:<DEFAULT>:org.jgrapht.graph.ClassBasedEdgeFactory@<init>(java.lang.Class<? extends E>):70:edgeClass |==> null
7004:EVR:<METHOD_INVOCATION(capture#55 of ? extends E)>:<DEFAULT>:org.jgrapht.graph.ClassBasedEdgeFactory@createEdge(V,V):81:edgeClass.newInstance() |==> null
7005:EVR:<IDENTIFIER(java.lang.Class<capture#741 of ? extends V>)>:<DEFAULT>:org.jgrapht.graph.ClassBasedVertexFactory@<init>(java.lang.Class<? extends V>):58:vertexClass |==> null
7006:EVR:<METHOD_INVOCATION(capture#343 of ? extends V)>:<DEFAULT>:org.jgrapht.graph.ClassBasedVertexFactory@createVertex():69:this.vertexClass.newInstance() |==> null
7007:LVR:FALSE:TRUE:org.jgrapht.graph.DefaultDirectedGraph@<init>(org.jgrapht.EdgeFactory<V,E>):79:false |==> true
7008:LVR:TRUE:FALSE:org.jgrapht.graph.DefaultDirectedGraph@<init>(org.jgrapht.EdgeFactory<V,E>):79:true |==> false
7009:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultGraphMapping@<init>(java.util.Map<V,V>,java.util.Map<V,V>,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):80:this.graph1 = g1 |==> <NO-OP>
7010:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultGraphMapping@<init>(java.util.Map<V,V>,java.util.Map<V,V>,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):81:this.graph2 = g2 |==> <NO-OP>
7011:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultGraphMapping@<init>(java.util.Map<V,V>,java.util.Map<V,V>,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):82:this.graphMappingForward = g1ToG2 |==> <NO-OP>
7012:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultGraphMapping@<init>(java.util.Map<V,V>,java.util.Map<V,V>,org.jgrapht.Graph<V,E>,org.jgrapht.Graph<V,E>):83:this.graphMappingReverse = g2ToG1 |==> <NO-OP>
7013:COR:forward:TRUE:org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):92:forward |==> false
7014:COR:forward:FALSE:org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):92:forward |==> true
7015:EVR:<MEMBER_SELECT(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):93:this.graph1 |==> null
7016:EVR:<MEMBER_SELECT(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):94:this.graph2 |==> null
7017:EVR:<MEMBER_SELECT(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):96:this.graph2 |==> null
7018:EVR:<MEMBER_SELECT(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):97:this.graph1 |==> null
7019:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):101:getVertexCorrespondence(sourceGraph.getEdgeSource(currEdge), forward) |==> null
7020:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):105:getVertexCorrespondence(sourceGraph.getEdgeTarget(currEdge), forward) |==> null
7021:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):108:mappedSourceVertex == null |==> false
7022:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):108:mappedTargetVertex == null |==> false
7023:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):108:(mappedSourceVertex == null) || (mappedTargetVertex == null) |==> (mappedSourceVertex == null) != (mappedTargetVertex == null)
7024:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):108:(mappedSourceVertex == null) || (mappedTargetVertex == null) |==> (mappedSourceVertex == null)
7025:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):108:(mappedSourceVertex == null) || (mappedTargetVertex == null) |==> (mappedTargetVertex == null)
7026:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):108:(mappedSourceVertex == null) || (mappedTargetVertex == null) |==> true
7027:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getEdgeCorrespondence(E,boolean):111:targetGraph.getEdge(mappedSourceVertex, mappedTargetVertex) |==> null
7028:COR:forward:TRUE:org.jgrapht.graph.DefaultGraphMapping@getVertexCorrespondence(V,boolean):122:forward |==> false
7029:COR:forward:FALSE:org.jgrapht.graph.DefaultGraphMapping@getVertexCorrespondence(V,boolean):122:forward |==> true
7030:EVR:<IDENTIFIER(java.util.Map<V,V>)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getVertexCorrespondence(V,boolean):123:graphMappingForward |==> null
7031:EVR:<IDENTIFIER(java.util.Map<V,V>)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getVertexCorrespondence(V,boolean):125:graphMappingReverse |==> null
7032:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.DefaultGraphMapping@getVertexCorrespondence(V,boolean):128:graphMapping.get(keyVertex) |==> null
7033:EVR:<NEW_CLASS(java.util.ArrayList<org.jgrapht.event.GraphListener<V,E>>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph:80:new ArrayList<GraphListener<V, E>>() |==> null
7034:EVR:<NEW_CLASS(java.util.ArrayList<org.jgrapht.event.VertexSetListener<V>>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph:82:new ArrayList<VertexSetListener<V>>() |==> null
7035:LVR:FALSE:TRUE:org.jgrapht.graph.DefaultListenableGraph@<init>(org.jgrapht.Graph<V,E>):96:false |==> true
7036:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@<init>(org.jgrapht.Graph<V,E>,boolean):116:this.reuseEvents = reuseEvents |==> <NO-OP>
7037:LVR:NEG:0:org.jgrapht.graph.DefaultListenableGraph@<init>(org.jgrapht.Graph<V,E>,boolean):117:-1 |==> 0
7038:LVR:NEG:POS:org.jgrapht.graph.DefaultListenableGraph@<init>(org.jgrapht.Graph<V,E>,boolean):117:-1 |==> 1
7039:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@<init>(org.jgrapht.Graph<V,E>,boolean):117:reuseableEdgeEvent = new FlyweightEdgeEvent<V, E>(this, -1, null) |==> <NO-OP>
7040:LVR:NEG:0:org.jgrapht.graph.DefaultListenableGraph@<init>(org.jgrapht.Graph<V,E>,boolean):118:-1 |==> 0
7041:LVR:NEG:POS:org.jgrapht.graph.DefaultListenableGraph@<init>(org.jgrapht.Graph<V,E>,boolean):118:-1 |==> 1
7042:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@<init>(org.jgrapht.Graph<V,E>,boolean):118:reuseableVertexEvent = new FlyweightVertexEvent<V>(this, -1, null) |==> <NO-OP>
7043:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@setReuseEvents(boolean):140:this.reuseEvents = reuseEvents |==> <NO-OP>
7044:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@isReuseEvents():154:reuseEvents |==> false
7045:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@addEdge(V,V):162:super.addEdge(sourceVertex, targetVertex) |==> null
7046:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.graph.DefaultListenableGraph@addEdge(V,V):164:e != null |==> true
7047:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@addEdge(V,V):165:fireEdgeAdded(e, sourceVertex, targetVertex) |==> <NO-OP>
7048:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@addEdge(V,V):168:e |==> null
7049:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@addEdge(V,V,E):176:super.addEdge(sourceVertex, targetVertex, e) |==> false
7050:COR:added:TRUE:org.jgrapht.graph.DefaultListenableGraph@addEdge(V,V,E):178:added |==> false
7051:COR:added:FALSE:org.jgrapht.graph.DefaultListenableGraph@addEdge(V,V,E):178:added |==> true
7052:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@addEdge(V,V,E):179:fireEdgeAdded(e, sourceVertex, targetVertex) |==> <NO-OP>
7053:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@addEdge(V,V,E):182:added |==> false
7054:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@addGraphListener(org.jgrapht.event.GraphListener<V,E>):190:addToListenerList(graphListeners, l) |==> <NO-OP>
7055:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@addVertex(V):198:super.addVertex(v) |==> false
7056:COR:modified:TRUE:org.jgrapht.graph.DefaultListenableGraph@addVertex(V):200:modified |==> false
7057:COR:modified:FALSE:org.jgrapht.graph.DefaultListenableGraph@addVertex(V):200:modified |==> true
7058:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@addVertex(V):201:fireVertexAdded(v) |==> <NO-OP>
7059:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@addVertex(V):204:modified |==> false
7060:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@addVertexSetListener(org.jgrapht.event.VertexSetListener<V>):212:addToListenerList(vertexSetListeners, l) |==> <NO-OP>
7061:EVR:<METHOD_INVOCATION(org.jgrapht.graph.DefaultListenableGraph<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@clone():224:TypeUtil.uncheckedCast(super.clone(), typeDecl) |==> null
7062:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@clone():225:g.graphListeners = new ArrayList<GraphListener<V, E>>() |==> <NO-OP>
7063:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@clone():226:g.vertexSetListeners = new ArrayList<VertexSetListener<V>>() |==> <NO-OP>
7064:EVR:<IDENTIFIER(org.jgrapht.graph.DefaultListenableGraph<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@clone():228:g |==> null
7065:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@clone():231:e.printStackTrace() |==> <NO-OP>
7066:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@removeEdge(V,V):241:super.removeEdge(sourceVertex, targetVertex) |==> null
7067:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.jgrapht.graph.DefaultListenableGraph@removeEdge(V,V):243:e != null |==> true
7068:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@removeEdge(V,V):244:fireEdgeRemoved(e, sourceVertex, targetVertex) |==> <NO-OP>
7069:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@removeEdge(V,V):247:e |==> null
7070:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@removeEdge(E):255:getEdgeSource(e) |==> null
7071:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@removeEdge(E):256:getEdgeTarget(e) |==> null
7072:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@removeEdge(E):258:super.removeEdge(e) |==> false
7073:COR:modified:TRUE:org.jgrapht.graph.DefaultListenableGraph@removeEdge(E):260:modified |==> false
7074:COR:modified:FALSE:org.jgrapht.graph.DefaultListenableGraph@removeEdge(E):260:modified |==> true
7075:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@removeEdge(E):261:fireEdgeRemoved(e, sourceVertex, targetVertex) |==> <NO-OP>
7076:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@removeEdge(E):264:modified |==> false
7077:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@removeGraphListener(org.jgrapht.event.GraphListener<V,E>):272:graphListeners.remove(l) |==> <NO-OP>
7078:COR:containsVertex(v):TRUE:org.jgrapht.graph.DefaultListenableGraph@removeVertex(V):280:containsVertex(v) |==> false
7079:COR:containsVertex(v):FALSE:org.jgrapht.graph.DefaultListenableGraph@removeVertex(V):280:containsVertex(v) |==> true
7080:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@removeVertex(V):281:edgesOf(v) |==> null
7081:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@removeVertex(V):284:removeAllEdges(new ArrayList<E>(touchingEdgesList)) |==> <NO-OP>
7082:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@removeVertex(V):286:super.removeVertex(v) |==> <NO-OP>
7083:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@removeVertex(V):288:fireVertexRemoved(v) |==> <NO-OP>
7084:LVR:TRUE:FALSE:org.jgrapht.graph.DefaultListenableGraph@removeVertex(V):290:true |==> false
7085:LVR:FALSE:TRUE:org.jgrapht.graph.DefaultListenableGraph@removeVertex(V):292:false |==> true
7086:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@removeVertexSetListener(org.jgrapht.event.VertexSetListener<V>):301:vertexSetListeners.remove(l) |==> <NO-OP>
7087:EVR:<METHOD_INVOCATION(org.jgrapht.event.GraphEdgeChangeEvent<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@fireEdgeAdded(E,V,V):314:createGraphEdgeChangeEvent(GraphEdgeChangeEvent.EDGE_ADDED, edge, source, target) |==> null
7088:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@fireEdgeAdded(E,V,V):321:l.edgeAdded(e) |==> <NO-OP>
7089:EVR:<METHOD_INVOCATION(org.jgrapht.event.GraphEdgeChangeEvent<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@fireEdgeRemoved(E,V,V):335:createGraphEdgeChangeEvent(GraphEdgeChangeEvent.EDGE_REMOVED, edge, source, target) |==> null
7090:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@fireEdgeRemoved(E,V,V):342:l.edgeRemoved(e) |==> <NO-OP>
7091:EVR:<METHOD_INVOCATION(org.jgrapht.event.GraphVertexChangeEvent<V>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@fireVertexAdded(V):354:createGraphVertexChangeEvent(GraphVertexChangeEvent.VERTEX_ADDED, vertex) |==> null
7092:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@fireVertexAdded(V):359:l.vertexAdded(e) |==> <NO-OP>
7093:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@fireVertexAdded(V):363:l.vertexAdded(e) |==> <NO-OP>
7094:EVR:<METHOD_INVOCATION(org.jgrapht.event.GraphVertexChangeEvent<V>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@fireVertexRemoved(V):375:createGraphVertexChangeEvent(GraphVertexChangeEvent.VERTEX_REMOVED, vertex) |==> null
7095:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@fireVertexRemoved(V):380:l.vertexRemoved(e) |==> <NO-OP>
7096:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@fireVertexRemoved(V):384:l.vertexRemoved(e) |==> <NO-OP>
7097:COR:list.contains(l):TRUE:org.jgrapht.graph.DefaultListenableGraph@addToListenerList(java.util.List<L>,L):392:list.contains(l) |==> false
7098:COR:list.contains(l):FALSE:org.jgrapht.graph.DefaultListenableGraph@addToListenerList(java.util.List<L>,L):392:list.contains(l) |==> true
7099:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@addToListenerList(java.util.List<L>,L):393:list.add(l) |==> <NO-OP>
7100:COR:reuseEvents:TRUE:org.jgrapht.graph.DefaultListenableGraph@createGraphEdgeChangeEvent(int,E,V,V):403:reuseEvents |==> false
7101:COR:reuseEvents:FALSE:org.jgrapht.graph.DefaultListenableGraph@createGraphEdgeChangeEvent(int,E,V,V):403:reuseEvents |==> true
7102:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@createGraphEdgeChangeEvent(int,E,V,V):404:reuseableEdgeEvent.setType(eventType) |==> <NO-OP>
7103:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@createGraphEdgeChangeEvent(int,E,V,V):405:reuseableEdgeEvent.setEdge(edge) |==> <NO-OP>
7104:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@createGraphEdgeChangeEvent(int,E,V,V):406:reuseableEdgeEvent.setEdgeSource(source) |==> <NO-OP>
7105:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@createGraphEdgeChangeEvent(int,E,V,V):407:reuseableEdgeEvent.setEdgeTarget(target) |==> <NO-OP>
7106:EVR:<IDENTIFIER(org.jgrapht.graph.DefaultListenableGraph.FlyweightEdgeEvent<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@createGraphEdgeChangeEvent(int,E,V,V):409:reuseableEdgeEvent |==> null
7107:EVR:<NEW_CLASS(org.jgrapht.event.GraphEdgeChangeEvent<V,E>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@createGraphEdgeChangeEvent(int,E,V,V):411:new GraphEdgeChangeEvent<V, E>(this, eventType, edge, source, target) |==> null
7108:COR:reuseEvents:TRUE:org.jgrapht.graph.DefaultListenableGraph@createGraphVertexChangeEvent(int,V):424:reuseEvents |==> false
7109:COR:reuseEvents:FALSE:org.jgrapht.graph.DefaultListenableGraph@createGraphVertexChangeEvent(int,V):424:reuseEvents |==> true
7110:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@createGraphVertexChangeEvent(int,V):425:reuseableVertexEvent.setType(eventType) |==> <NO-OP>
7111:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph@createGraphVertexChangeEvent(int,V):426:reuseableVertexEvent.setVertex(vertex) |==> <NO-OP>
7112:EVR:<IDENTIFIER(org.jgrapht.graph.DefaultListenableGraph.FlyweightVertexEvent<V>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@createGraphVertexChangeEvent(int,V):428:reuseableVertexEvent |==> null
7113:EVR:<NEW_CLASS(org.jgrapht.event.GraphVertexChangeEvent<V>)>:<DEFAULT>:org.jgrapht.graph.DefaultListenableGraph@createGraphVertexChangeEvent(int,V):430:new GraphVertexChangeEvent<V>(this, eventType, vertex) |==> null
7114:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph$FlyweightEdgeEvent@setEdge(EE):462:this.edge = e |==> <NO-OP>
7115:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph$FlyweightEdgeEvent@setEdgeSource(VV):467:this.edgeSource = v |==> <NO-OP>
7116:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph$FlyweightEdgeEvent@setEdgeTarget(VV):472:this.edgeTarget = v |==> <NO-OP>
7117:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph$FlyweightEdgeEvent@setType(int):482:this.type = type |==> <NO-OP>
7118:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph$FlyweightVertexEvent@setType(int):513:this.type = type |==> <NO-OP>
7119:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.DefaultListenableGraph$FlyweightVertexEvent@setVertex(VV):523:this.vertex = vertex |==> <NO-OP>
7120:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedGraphUnion@inDegreeOf(V):71:incomingEdgesOf(vertex) |==> null
7121:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.DirectedGraphUnion@inDegreeOf(V):72:res.size() |==> 0
7122:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedGraphUnion@incomingEdgesOf(V):77:new HashSet<E>() |==> null
7123:COR:getG1().containsVertex(vertex):TRUE:org.jgrapht.graph.DirectedGraphUnion@incomingEdgesOf(V):78:getG1().containsVertex(vertex) |==> false
7124:COR:getG1().containsVertex(vertex):FALSE:org.jgrapht.graph.DirectedGraphUnion@incomingEdgesOf(V):78:getG1().containsVertex(vertex) |==> true
7125:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedGraphUnion@incomingEdgesOf(V):79:res.addAll(getG1().incomingEdgesOf(vertex)) |==> <NO-OP>
7126:COR:getG2().containsVertex(vertex):TRUE:org.jgrapht.graph.DirectedGraphUnion@incomingEdgesOf(V):81:getG2().containsVertex(vertex) |==> false
7127:COR:getG2().containsVertex(vertex):FALSE:org.jgrapht.graph.DirectedGraphUnion@incomingEdgesOf(V):81:getG2().containsVertex(vertex) |==> true
7128:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedGraphUnion@incomingEdgesOf(V):82:res.addAll(getG2().incomingEdgesOf(vertex)) |==> <NO-OP>
7129:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedGraphUnion@incomingEdgesOf(V):84:Collections.unmodifiableSet(res) |==> null
7130:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedGraphUnion@outDegreeOf(V):89:outgoingEdgesOf(vertex) |==> null
7131:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.DirectedGraphUnion@outDegreeOf(V):90:res.size() |==> 0
7132:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedGraphUnion@outgoingEdgesOf(V):95:new HashSet<E>() |==> null
7133:COR:getG1().containsVertex(vertex):TRUE:org.jgrapht.graph.DirectedGraphUnion@outgoingEdgesOf(V):96:getG1().containsVertex(vertex) |==> false
7134:COR:getG1().containsVertex(vertex):FALSE:org.jgrapht.graph.DirectedGraphUnion@outgoingEdgesOf(V):96:getG1().containsVertex(vertex) |==> true
7135:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedGraphUnion@outgoingEdgesOf(V):97:res.addAll(getG1().outgoingEdgesOf(vertex)) |==> <NO-OP>
7136:COR:getG2().containsVertex(vertex):TRUE:org.jgrapht.graph.DirectedGraphUnion@outgoingEdgesOf(V):99:getG2().containsVertex(vertex) |==> false
7137:COR:getG2().containsVertex(vertex):FALSE:org.jgrapht.graph.DirectedGraphUnion@outgoingEdgesOf(V):99:getG2().containsVertex(vertex) |==> true
7138:STD:<CALL>:<NO-OP>:org.jgrapht.graph.DirectedGraphUnion@outgoingEdgesOf(V):100:res.addAll(getG2().outgoingEdgesOf(vertex)) |==> <NO-OP>
7139:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.DirectedGraphUnion@outgoingEdgesOf(V):102:Collections.unmodifiableSet(res) |==> null
7140:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.GraphUnion@<init>(G,G,org.jgrapht.util.WeightCombiner):77:g1 == null |==> false
7141:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.GraphUnion@<init>(G,G,org.jgrapht.util.WeightCombiner):80:g2 == null |==> false
7142:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.GraphUnion@<init>(G,G,org.jgrapht.util.WeightCombiner):83:g1 == g2 |==> false
7143:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphUnion@<init>(G,G,org.jgrapht.util.WeightCombiner):86:this.g1 = g1 |==> <NO-OP>
7144:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphUnion@<init>(G,G,org.jgrapht.util.WeightCombiner):87:this.g2 = g2 |==> <NO-OP>
7145:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphUnion@<init>(G,G,org.jgrapht.util.WeightCombiner):88:this.operator = operator |==> <NO-OP>
7146:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@getAllEdges(V,V):100:new HashSet<E>() |==> null
7147:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.GraphUnion@getAllEdges(V,V):101:g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex) |==> g1.containsVertex(sourceVertex) == g1.containsVertex(targetVertex)
7148:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.GraphUnion@getAllEdges(V,V):102:g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex) |==> false
7149:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getAllEdges(V,V):101:g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex) |==> g1.containsVertex(sourceVertex)
7150:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getAllEdges(V,V):102:g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex) |==> g1.containsVertex(targetVertex)
7151:STD:<CALL>:<NO-OP>:org.jgrapht.graph.GraphUnion@getAllEdges(V,V):104:res.addAll(g1.getAllEdges(sourceVertex, targetVertex)) |==> <NO-OP>
7152:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.GraphUnion@getAllEdges(V,V):106:g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex) |==> g2.containsVertex(sourceVertex) == g2.containsVertex(targetVertex)
7153:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.GraphUnion@getAllEdges(V,V):107:g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex) |==> false
7154:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getAllEdges(V,V):106:g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex) |==> g2.containsVertex(sourceVertex)
7155:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getAllEdges(V,V):107:g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex) |==> g2.containsVertex(targetVertex)
7156:STD:<CALL>:<NO-OP>:org.jgrapht.graph.GraphUnion@getAllEdges(V,V):109:res.addAll(g2.getAllEdges(sourceVertex, targetVertex)) |==> <NO-OP>
7157:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@getAllEdges(V,V):111:Collections.unmodifiableSet(res) |==> null
7158:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):117:g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex) |==> g1.containsVertex(sourceVertex) == g1.containsVertex(targetVertex)
7159:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):118:g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex) |==> false
7160:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):117:g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex) |==> g1.containsVertex(sourceVertex)
7161:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):118:g1.containsVertex(sourceVertex) && g1.containsVertex(targetVertex) |==> g1.containsVertex(targetVertex)
7162:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphUnion@getEdge(V,V):120:res = g1.getEdge(sourceVertex, targetVertex) |==> <NO-OP>
7163:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.GraphUnion@getEdge(V,V):122:res == null |==> false
7164:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):122:(res == null) && g2.containsVertex(sourceVertex) |==> (res == null) == g2.containsVertex(sourceVertex)
7165:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):123:(res == null) && g2.containsVertex(sourceVertex) |==> false
7166:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):122:(res == null) && g2.containsVertex(sourceVertex) |==> (res == null)
7167:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):123:(res == null) && g2.containsVertex(sourceVertex) |==> g2.containsVertex(sourceVertex)
7168:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):122:(res == null) && g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex) |==> ((res == null) && g2.containsVertex(sourceVertex)) == g2.containsVertex(targetVertex)
7169:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):124:(res == null) && g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex) |==> false
7170:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):122:(res == null) && g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex) |==> (res == null) && g2.containsVertex(sourceVertex)
7171:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdge(V,V):124:(res == null) && g2.containsVertex(sourceVertex) && g2.containsVertex(targetVertex) |==> g2.containsVertex(targetVertex)
7172:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphUnion@getEdge(V,V):126:res = g2.getEdge(sourceVertex, targetVertex) |==> <NO-OP>
7173:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@getEdge(V,V):128:res |==> null
7174:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.GraphUnion@containsEdge(E):169:g1.containsEdge(e) || g2.containsEdge(e) |==> g1.containsEdge(e) != g2.containsEdge(e)
7175:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.GraphUnion@containsEdge(E):169:g1.containsEdge(e) || g2.containsEdge(e) |==> g1.containsEdge(e)
7176:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.GraphUnion@containsEdge(E):169:g1.containsEdge(e) || g2.containsEdge(e) |==> g2.containsEdge(e)
7177:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.GraphUnion@containsEdge(E):169:g1.containsEdge(e) || g2.containsEdge(e) |==> true
7178:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.GraphUnion@containsVertex(V):174:g1.containsVertex(v) || g2.containsVertex(v) |==> g1.containsVertex(v) != g2.containsVertex(v)
7179:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.GraphUnion@containsVertex(V):174:g1.containsVertex(v) || g2.containsVertex(v) |==> g1.containsVertex(v)
7180:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.GraphUnion@containsVertex(V):174:g1.containsVertex(v) || g2.containsVertex(v) |==> g2.containsVertex(v)
7181:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.GraphUnion@containsVertex(V):174:g1.containsVertex(v) || g2.containsVertex(v) |==> true
7182:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@edgeSet():179:new HashSet<E>() |==> null
7183:STD:<CALL>:<NO-OP>:org.jgrapht.graph.GraphUnion@edgeSet():180:res.addAll(g1.edgeSet()) |==> <NO-OP>
7184:STD:<CALL>:<NO-OP>:org.jgrapht.graph.GraphUnion@edgeSet():181:res.addAll(g2.edgeSet()) |==> <NO-OP>
7185:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@edgeSet():182:Collections.unmodifiableSet(res) |==> null
7186:EVR:<NEW_CLASS(java.util.HashSet<E>)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@edgesOf(V):187:new HashSet<E>() |==> null
7187:COR:g1.containsVertex(vertex):TRUE:org.jgrapht.graph.GraphUnion@edgesOf(V):188:g1.containsVertex(vertex) |==> false
7188:COR:g1.containsVertex(vertex):FALSE:org.jgrapht.graph.GraphUnion@edgesOf(V):188:g1.containsVertex(vertex) |==> true
7189:STD:<CALL>:<NO-OP>:org.jgrapht.graph.GraphUnion@edgesOf(V):189:res.addAll(g1.edgesOf(vertex)) |==> <NO-OP>
7190:COR:g2.containsVertex(vertex):TRUE:org.jgrapht.graph.GraphUnion@edgesOf(V):191:g2.containsVertex(vertex) |==> false
7191:COR:g2.containsVertex(vertex):FALSE:org.jgrapht.graph.GraphUnion@edgesOf(V):191:g2.containsVertex(vertex) |==> true
7192:STD:<CALL>:<NO-OP>:org.jgrapht.graph.GraphUnion@edgesOf(V):192:res.addAll(g2.edgesOf(vertex)) |==> <NO-OP>
7193:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@edgesOf(V):194:Collections.unmodifiableSet(res) |==> null
7194:EVR:<NEW_CLASS(java.util.HashSet<V>)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@vertexSet():226:new HashSet<V>() |==> null
7195:STD:<CALL>:<NO-OP>:org.jgrapht.graph.GraphUnion@vertexSet():227:res.addAll(g1.vertexSet()) |==> <NO-OP>
7196:STD:<CALL>:<NO-OP>:org.jgrapht.graph.GraphUnion@vertexSet():228:res.addAll(g2.vertexSet()) |==> <NO-OP>
7197:EVR:<METHOD_INVOCATION(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@vertexSet():229:Collections.unmodifiableSet(res) |==> null
7198:COR:g1.containsEdge(e):TRUE:org.jgrapht.graph.GraphUnion@getEdgeSource(E):234:g1.containsEdge(e) |==> false
7199:COR:g1.containsEdge(e):FALSE:org.jgrapht.graph.GraphUnion@getEdgeSource(E):234:g1.containsEdge(e) |==> true
7200:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.GraphUnion@getEdgeSource(E):235:return g1.getEdgeSource(e); |==> <NO-OP>
7201:COR:g2.containsEdge(e):TRUE:org.jgrapht.graph.GraphUnion@getEdgeSource(E):237:g2.containsEdge(e) |==> false
7202:COR:g2.containsEdge(e):FALSE:org.jgrapht.graph.GraphUnion@getEdgeSource(E):237:g2.containsEdge(e) |==> true
7203:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.GraphUnion@getEdgeSource(E):238:return g2.getEdgeSource(e); |==> <NO-OP>
7204:COR:g1.containsEdge(e):TRUE:org.jgrapht.graph.GraphUnion@getEdgeTarget(E):245:g1.containsEdge(e) |==> false
7205:COR:g1.containsEdge(e):FALSE:org.jgrapht.graph.GraphUnion@getEdgeTarget(E):245:g1.containsEdge(e) |==> true
7206:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.GraphUnion@getEdgeTarget(E):246:return g1.getEdgeTarget(e); |==> <NO-OP>
7207:COR:g2.containsEdge(e):TRUE:org.jgrapht.graph.GraphUnion@getEdgeTarget(E):248:g2.containsEdge(e) |==> false
7208:COR:g2.containsEdge(e):FALSE:org.jgrapht.graph.GraphUnion@getEdgeTarget(E):248:g2.containsEdge(e) |==> true
7209:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.GraphUnion@getEdgeTarget(E):249:return g2.getEdgeTarget(e); |==> <NO-OP>
7210:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdgeWeight(E):256:g1.containsEdge(e) && g2.containsEdge(e) |==> g1.containsEdge(e) == g2.containsEdge(e)
7211:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdgeWeight(E):256:g1.containsEdge(e) && g2.containsEdge(e) |==> false
7212:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdgeWeight(E):256:g1.containsEdge(e) && g2.containsEdge(e) |==> g1.containsEdge(e)
7213:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.GraphUnion@getEdgeWeight(E):256:g1.containsEdge(e) && g2.containsEdge(e) |==> g2.containsEdge(e)
7214:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.GraphUnion@getEdgeWeight(E):257:return operator.combine(g1.getEdgeWeight(e), g2.getEdgeWeight(e)); |==> <NO-OP>
7215:COR:g1.containsEdge(e):TRUE:org.jgrapht.graph.GraphUnion@getEdgeWeight(E):259:g1.containsEdge(e) |==> false
7216:COR:g1.containsEdge(e):FALSE:org.jgrapht.graph.GraphUnion@getEdgeWeight(E):259:g1.containsEdge(e) |==> true
7217:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.GraphUnion@getEdgeWeight(E):260:return g1.getEdgeWeight(e); |==> <NO-OP>
7218:COR:g2.containsEdge(e):TRUE:org.jgrapht.graph.GraphUnion@getEdgeWeight(E):262:g2.containsEdge(e) |==> false
7219:COR:g2.containsEdge(e):FALSE:org.jgrapht.graph.GraphUnion@getEdgeWeight(E):262:g2.containsEdge(e) |==> true
7220:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.GraphUnion@getEdgeWeight(E):263:return g2.getEdgeWeight(e); |==> <NO-OP>
7221:EVR:<IDENTIFIER(G)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@getG1():273:g1 |==> null
7222:EVR:<IDENTIFIER(G)>:<DEFAULT>:org.jgrapht.graph.GraphUnion@getG2():281:g2 |==> null
7223:AOR:+(double,double):%(double,double):org.jgrapht.util.WeightCombiner$1@combine(double,double):52:a + b |==> a % b
7224:AOR:+(double,double):*(double,double):org.jgrapht.util.WeightCombiner$1@combine(double,double):52:a + b |==> a * b
7225:AOR:+(double,double):-(double,double):org.jgrapht.util.WeightCombiner$1@combine(double,double):52:a + b |==> a - b
7226:AOR:+(double,double):/(double,double):org.jgrapht.util.WeightCombiner$1@combine(double,double):52:a + b |==> a / b
7227:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.util.WeightCombiner$2@combine(double,double):63:Math.min(a, b) |==> 0.0
7228:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.util.WeightCombiner$3@combine(double,double):74:Math.max(a, b) |==> 0.0
7229:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.util.WeightCombiner$4@combine(double,double):85:a |==> 0.0
7230:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.util.WeightCombiner$5@combine(double,double):96:b |==> 0.0
7231:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskSubgraph@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.graph.MaskFunctor<V,E>):83:this.base = base |==> <NO-OP>
7232:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskSubgraph@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.graph.MaskFunctor<V,E>):84:this.mask = mask |==> <NO-OP>
7233:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskSubgraph@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.graph.MaskFunctor<V,E>):86:this.vertices = new MaskVertexSet<V, E>(base.vertexSet(), mask) |==> <NO-OP>
7234:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskSubgraph@<init>(org.jgrapht.Graph<V,E>,org.jgrapht.graph.MaskFunctor<V,E>):87:this.edges = new MaskEdgeSet<V, E>(base, base.edgeSet(), mask) |==> <NO-OP>
7235:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@containsEdge(E):115:edgeSet().contains(e) |==> false
7236:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.MaskSubgraph@containsVertex(V):120:!this.mask.isVertexMasked(v) && this.base.containsVertex(v) |==> !this.mask.isVertexMasked(v) == this.base.containsVertex(v)
7237:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.MaskSubgraph@containsVertex(V):120:!this.mask.isVertexMasked(v) && this.base.containsVertex(v) |==> false
7238:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.MaskSubgraph@containsVertex(V):120:!this.mask.isVertexMasked(v) && this.base.containsVertex(v) |==> !this.mask.isVertexMasked(v)
7239:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.MaskSubgraph@containsVertex(V):120:!this.mask.isVertexMasked(v) && this.base.containsVertex(v) |==> this.base.containsVertex(v)
7240:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@degreeOf(V):128:edgesOf(vertex).size() |==> 0
7241:EVR:<MEMBER_SELECT(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@edgeSet():133:this.edges |==> null
7242:STD:<CALL>:<NO-OP>:org.jgrapht.graph.MaskSubgraph@edgesOf(V):138:assertVertexExist(vertex) |==> <NO-OP>
7243:EVR:<NEW_CLASS(org.jgrapht.graph.MaskEdgeSet<V,E>)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@edgesOf(V):140:new MaskEdgeSet<V, E>(this.base, this.base.edgesOf(vertex), this.mask) |==> null
7244:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.MaskSubgraph@getAllEdges(V,V):150:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex) == containsVertex(targetVertex)
7245:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.MaskSubgraph@getAllEdges(V,V):150:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> false
7246:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.MaskSubgraph@getAllEdges(V,V):150:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(sourceVertex)
7247:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.MaskSubgraph@getAllEdges(V,V):150:containsVertex(sourceVertex) && containsVertex(targetVertex) |==> containsVertex(targetVertex)
7248:STD:<RETURN>:<NO-OP>:org.jgrapht.graph.MaskSubgraph@getAllEdges(V,V):151:return new MaskEdgeSet<V, E>(this.base, this.base.getAllEdges(sourceVertex, targetVertex), this.mask); |==> <NO-OP>
7249:EVR:<IDENTIFIER(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@getAllEdges(V,V):159:edges |==> null
7250:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@getEdge(V,V):164:getAllEdges(sourceVertex, targetVertex) |==> null
7251:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.MaskSubgraph@getEdge(V,V):166:edges == null |==> false
7252:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.MaskSubgraph@getEdge(V,V):166:(edges == null) || edges.isEmpty() |==> (edges == null) != edges.isEmpty()
7253:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.MaskSubgraph@getEdge(V,V):166:(edges == null) || edges.isEmpty() |==> (edges == null)
7254:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.MaskSubgraph@getEdge(V,V):166:(edges == null) || edges.isEmpty() |==> edges.isEmpty()
7255:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.MaskSubgraph@getEdge(V,V):166:(edges == null) || edges.isEmpty() |==> true
7256:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@getEdge(V,V):169:edges.iterator().next() |==> null
7257:EVR:<METHOD_INVOCATION(org.jgrapht.EdgeFactory<V,E>)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@getEdgeFactory():175:this.base.getEdgeFactory() |==> null
7258:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@getEdgeSource(E):182:this.base.getEdgeSource(edge) |==> null
7259:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@getEdgeTarget(E):189:this.base.getEdgeTarget(edge) |==> null
7260:EVR:<METHOD_INVOCATION(double)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@getEdgeWeight(E):196:this.base.getEdgeWeight(edge) |==> 0.0
7261:STD:<CALL>:<NO-OP>:org.jgrapht.graph.MaskSubgraph@incomingEdgesOf(V):204:assertVertexExist(vertex) |==> <NO-OP>
7262:EVR:<NEW_CLASS(org.jgrapht.graph.MaskEdgeSet<V,E>)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@incomingEdgesOf(V):206:new MaskEdgeSet<V, E>(this.base, ((DirectedGraph<V, E>)this.base).incomingEdgesOf(vertex), this.mask) |==> null
7263:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@inDegreeOf(V):217:incomingEdgesOf(vertex).size() |==> 0
7264:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@outDegreeOf(V):225:outgoingEdgesOf(vertex).size() |==> 0
7265:STD:<CALL>:<NO-OP>:org.jgrapht.graph.MaskSubgraph@outgoingEdgesOf(V):233:assertVertexExist(vertex) |==> <NO-OP>
7266:EVR:<NEW_CLASS(org.jgrapht.graph.MaskEdgeSet<V,E>)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@outgoingEdgesOf(V):235:new MaskEdgeSet<V, E>(this.base, ((DirectedGraph<V, E>)this.base).outgoingEdgesOf(vertex), this.mask) |==> null
7267:EVR:<MEMBER_SELECT(java.util.Set<V>)>:<DEFAULT>:org.jgrapht.graph.MaskSubgraph@vertexSet():291:this.vertices |==> null
7268:LVR:TRUE:FALSE:org.jgrapht.graph.DirectedMultigraph@<init>(org.jgrapht.EdgeFactory<V,E>):76:true |==> false
7269:LVR:FALSE:TRUE:org.jgrapht.graph.DirectedMultigraph@<init>(org.jgrapht.EdgeFactory<V,E>):76:false |==> true
7270:LVR:TRUE:FALSE:org.jgrapht.graph.DirectedPseudograph@<init>(org.jgrapht.EdgeFactory<V,E>):73:true |==> false
7271:LVR:TRUE:FALSE:org.jgrapht.graph.DirectedPseudograph@<init>(org.jgrapht.EdgeFactory<V,E>):73:true |==> false
7272:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@getEdge(V,V):89:super.getEdge(targetVertex, sourceVertex) |==> null
7273:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@getAllEdges(V,V):97:super.getAllEdges(targetVertex, sourceVertex) |==> null
7274:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@addEdge(V,V):105:super.addEdge(targetVertex, sourceVertex) |==> null
7275:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@addEdge(V,V,E):113:super.addEdge(targetVertex, sourceVertex, e) |==> false
7276:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@inDegreeOf(V):121:super.outDegreeOf(vertex) |==> 0
7277:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@outDegreeOf(V):129:super.inDegreeOf(vertex) |==> 0
7278:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@incomingEdgesOf(V):137:super.outgoingEdgesOf(vertex) |==> null
7279:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@outgoingEdgesOf(V):145:super.incomingEdgesOf(vertex) |==> null
7280:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@removeEdge(V,V):153:super.removeEdge(targetVertex, sourceVertex) |==> null
7281:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@getEdgeSource(E):161:super.getEdgeTarget(e) |==> null
7282:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.EdgeReversedGraph@getEdgeTarget(E):169:super.getEdgeSource(e) |==> null
7283:LVR:TRUE:FALSE:org.jgrapht.graph.EdgeReversedGraph@toString():180:true |==> false
7284:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphPathImpl@<init>(org.jgrapht.Graph<V,E>,V,V,java.util.List<E>,double):73:this.graph = graph |==> <NO-OP>
7285:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphPathImpl@<init>(org.jgrapht.Graph<V,E>,V,V,java.util.List<E>,double):74:this.startVertex = startVertex |==> <NO-OP>
7286:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphPathImpl@<init>(org.jgrapht.Graph<V,E>,V,V,java.util.List<E>,double):75:this.endVertex = endVertex |==> <NO-OP>
7287:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphPathImpl@<init>(org.jgrapht.Graph<V,E>,V,V,java.util.List<E>,double):76:this.edgeList = edgeList |==> <NO-OP>
7288:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.GraphPathImpl@<init>(org.jgrapht.Graph<V,E>,V,V,java.util.List<E>,double):77:this.weight = weight |==> <NO-OP>
7289:EVR:<IDENTIFIER(org.jgrapht.Graph<V,E>)>:<DEFAULT>:org.jgrapht.graph.GraphPathImpl@getGraph():85:graph |==> null
7290:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.graph.GraphPathImpl@getStartVertex():91:startVertex |==> null
7291:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.graph.GraphPathImpl@getEndVertex():97:endVertex |==> null
7292:EVR:<IDENTIFIER(java.util.List<E>)>:<DEFAULT>:org.jgrapht.graph.GraphPathImpl@getEdgeList():103:edgeList |==> null
7293:EVR:<IDENTIFIER(double)>:<DEFAULT>:org.jgrapht.graph.GraphPathImpl@getWeight():109:weight |==> 0.0
7294:EVR:<METHOD_INVOCATION(java.lang.String)>:<DEFAULT>:org.jgrapht.graph.GraphPathImpl@toString():115:edgeList.toString() |==> null
7295:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskEdgeSet@<init>(org.jgrapht.Graph<V,E>,java.util.Set<E>,org.jgrapht.graph.MaskFunctor<V,E>):73:this.graph = graph |==> <NO-OP>
7296:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskEdgeSet@<init>(org.jgrapht.Graph<V,E>,java.util.Set<E>,org.jgrapht.graph.MaskFunctor<V,E>):74:this.edgeSet = edgeSet |==> <NO-OP>
7297:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskEdgeSet@<init>(org.jgrapht.Graph<V,E>,java.util.Set<E>,org.jgrapht.graph.MaskFunctor<V,E>):75:this.mask = mask |==> <NO-OP>
7298:LVR:NEG:0:org.jgrapht.graph.MaskEdgeSet@<init>(org.jgrapht.Graph<V,E>,java.util.Set<E>,org.jgrapht.graph.MaskFunctor<V,E>):76:-1 |==> 0
7299:LVR:NEG:POS:org.jgrapht.graph.MaskEdgeSet@<init>(org.jgrapht.Graph<V,E>,java.util.Set<E>,org.jgrapht.graph.MaskFunctor<V,E>):76:-1 |==> 1
7300:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskEdgeSet@<init>(org.jgrapht.Graph<V,E>,java.util.Set<E>,org.jgrapht.graph.MaskFunctor<V,E>):76:this.size = -1 |==> <NO-OP>
7301:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.MaskEdgeSet@contains(java.lang.Object):86:this.edgeSet.contains(o) && !this.mask.isEdgeMasked(TypeUtil.uncheckedCast(o, edgeTypeDecl)) |==> this.edgeSet.contains(o) == !this.mask.isEdgeMasked(TypeUtil.uncheckedCast(o, edgeTypeDecl))
7302:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.MaskEdgeSet@contains(java.lang.Object):87:this.edgeSet.contains(o) && !this.mask.isEdgeMasked(TypeUtil.uncheckedCast(o, edgeTypeDecl)) |==> false
7303:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.MaskEdgeSet@contains(java.lang.Object):86:this.edgeSet.contains(o) && !this.mask.isEdgeMasked(TypeUtil.uncheckedCast(o, edgeTypeDecl)) |==> this.edgeSet.contains(o)
7304:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.MaskEdgeSet@contains(java.lang.Object):87:this.edgeSet.contains(o) && !this.mask.isEdgeMasked(TypeUtil.uncheckedCast(o, edgeTypeDecl)) |==> !this.mask.isEdgeMasked(TypeUtil.uncheckedCast(o, edgeTypeDecl))
7305:EVR:<NEW_CLASS(org.jgrapht.util.PrefetchIterator<E>)>:<DEFAULT>:org.jgrapht.graph.MaskEdgeSet@iterator():95:new PrefetchIterator<E>(new MaskEdgeSetNextElementFunctor()) |==> null
7306:LVR:NEG:0:org.jgrapht.graph.MaskEdgeSet@size():103:-1 |==> 0
7307:LVR:NEG:POS:org.jgrapht.graph.MaskEdgeSet@size():103:-1 |==> 1
7308:ROR:==(int,int):<=(int,int):org.jgrapht.graph.MaskEdgeSet@size():103:this.size == -1 |==> this.size <= -1
7309:ROR:==(int,int):>=(int,int):org.jgrapht.graph.MaskEdgeSet@size():103:this.size == -1 |==> this.size >= -1
7310:ROR:==(int,int):FALSE(int,int):org.jgrapht.graph.MaskEdgeSet@size():103:this.size == -1 |==> false
7311:LVR:0:POS:org.jgrapht.graph.MaskEdgeSet@size():104:0 |==> 1
7312:LVR:0:NEG:org.jgrapht.graph.MaskEdgeSet@size():104:0 |==> -1
7313:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskEdgeSet@size():104:this.size = 0 |==> <NO-OP>
7314:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.graph.MaskEdgeSet@size():105:iterator() |==> null
7315:STD:<CALL>:<NO-OP>:org.jgrapht.graph.MaskEdgeSet@size():106:iter.next() |==> <NO-OP>
7316:STD:<INC>:<NO-OP>:org.jgrapht.graph.MaskEdgeSet@size():107:this.size++ |==> <NO-OP>
7317:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.graph.MaskEdgeSet@size():110:this.size |==> 0
7318:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@<init>():122:this.iter = MaskEdgeSet.this.edgeSet.iterator() |==> <NO-OP>
7319:EVR:<METHOD_INVOCATION(E)>:<DEFAULT>:org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@nextElement():128:this.iter.next() |==> null
7320:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@nextElement():130:edge = this.iter.next() |==> <NO-OP>
7321:EVR:<IDENTIFIER(E)>:<DEFAULT>:org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@nextElement():132:edge |==> null
7322:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@isMasked(E):137:MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge)) |==> MaskEdgeSet.this.mask.isEdgeMasked(edge) != MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge))
7323:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@isMasked(E):137:MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge)) |==> MaskEdgeSet.this.mask.isEdgeMasked(edge)
7324:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@isMasked(E):138:MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge)) |==> MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge))
7325:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@isMasked(E):138:MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge)) |==> true
7326:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@isMasked(E):137:MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge)) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeTarget(edge)) |==> (MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge))) != MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeTarget(edge))
7327:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@isMasked(E):137:MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge)) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeTarget(edge)) |==> MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge))
7328:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@isMasked(E):140:MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge)) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeTarget(edge)) |==> MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeTarget(edge))
7329:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.graph.MaskEdgeSet$MaskEdgeSetNextElementFunctor@isMasked(E):140:MaskEdgeSet.this.mask.isEdgeMasked(edge) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeSource(edge)) || MaskEdgeSet.this.mask.isVertexMasked(MaskEdgeSet.this.graph.getEdgeTarget(edge)) |==> true
7330:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskVertexSet@<init>(java.util.Set<V>,org.jgrapht.graph.MaskFunctor<V,E>):67:this.vertexSet = vertexSet |==> <NO-OP>
7331:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskVertexSet@<init>(java.util.Set<V>,org.jgrapht.graph.MaskFunctor<V,E>):68:this.mask = mask |==> <NO-OP>
7332:LVR:NEG:0:org.jgrapht.graph.MaskVertexSet@<init>(java.util.Set<V>,org.jgrapht.graph.MaskFunctor<V,E>):69:-1 |==> 0
7333:LVR:NEG:POS:org.jgrapht.graph.MaskVertexSet@<init>(java.util.Set<V>,org.jgrapht.graph.MaskFunctor<V,E>):69:-1 |==> 1
7334:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskVertexSet@<init>(java.util.Set<V>,org.jgrapht.graph.MaskFunctor<V,E>):69:this.size = -1 |==> <NO-OP>
7335:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.MaskVertexSet@contains(java.lang.Object):80:!this.mask.isVertexMasked(TypeUtil.uncheckedCast(o, vertexTypeDecl)) && this.vertexSet.contains(o) |==> !this.mask.isVertexMasked(TypeUtil.uncheckedCast(o, vertexTypeDecl)) == this.vertexSet.contains(o)
7336:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.MaskVertexSet@contains(java.lang.Object):81:!this.mask.isVertexMasked(TypeUtil.uncheckedCast(o, vertexTypeDecl)) && this.vertexSet.contains(o) |==> false
7337:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.MaskVertexSet@contains(java.lang.Object):80:!this.mask.isVertexMasked(TypeUtil.uncheckedCast(o, vertexTypeDecl)) && this.vertexSet.contains(o) |==> !this.mask.isVertexMasked(TypeUtil.uncheckedCast(o, vertexTypeDecl))
7338:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.MaskVertexSet@contains(java.lang.Object):81:!this.mask.isVertexMasked(TypeUtil.uncheckedCast(o, vertexTypeDecl)) && this.vertexSet.contains(o) |==> this.vertexSet.contains(o)
7339:EVR:<NEW_CLASS(org.jgrapht.util.PrefetchIterator<V>)>:<DEFAULT>:org.jgrapht.graph.MaskVertexSet@iterator():89:new PrefetchIterator<V>(new MaskVertexSetNextElementFunctor()) |==> null
7340:LVR:NEG:0:org.jgrapht.graph.MaskVertexSet@size():97:-1 |==> 0
7341:LVR:NEG:POS:org.jgrapht.graph.MaskVertexSet@size():97:-1 |==> 1
7342:ROR:==(int,int):<=(int,int):org.jgrapht.graph.MaskVertexSet@size():97:this.size == -1 |==> this.size <= -1
7343:ROR:==(int,int):>=(int,int):org.jgrapht.graph.MaskVertexSet@size():97:this.size == -1 |==> this.size >= -1
7344:ROR:==(int,int):FALSE(int,int):org.jgrapht.graph.MaskVertexSet@size():97:this.size == -1 |==> false
7345:LVR:0:POS:org.jgrapht.graph.MaskVertexSet@size():98:0 |==> 1
7346:LVR:0:NEG:org.jgrapht.graph.MaskVertexSet@size():98:0 |==> -1
7347:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskVertexSet@size():98:this.size = 0 |==> <NO-OP>
7348:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.graph.MaskVertexSet@size():99:iterator() |==> null
7349:STD:<CALL>:<NO-OP>:org.jgrapht.graph.MaskVertexSet@size():100:iter.next() |==> <NO-OP>
7350:STD:<INC>:<NO-OP>:org.jgrapht.graph.MaskVertexSet@size():101:this.size++ |==> <NO-OP>
7351:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.jgrapht.graph.MaskVertexSet@size():104:this.size |==> 0
7352:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskVertexSet$MaskVertexSetNextElementFunctor@<init>():116:this.iter = MaskVertexSet.this.vertexSet.iterator() |==> <NO-OP>
7353:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.graph.MaskVertexSet$MaskVertexSetNextElementFunctor@nextElement():122:this.iter.next() |==> null
7354:STD:<ASSIGN>:<NO-OP>:org.jgrapht.graph.MaskVertexSet$MaskVertexSetNextElementFunctor@nextElement():124:element = this.iter.next() |==> <NO-OP>
7355:EVR:<IDENTIFIER(V)>:<DEFAULT>:org.jgrapht.graph.MaskVertexSet$MaskVertexSetNextElementFunctor@nextElement():126:element |==> null
7356:LVR:TRUE:FALSE:org.jgrapht.graph.Multigraph@<init>(org.jgrapht.EdgeFactory<V,E>):78:true |==> false
7357:LVR:FALSE:TRUE:org.jgrapht.graph.Multigraph@<init>(org.jgrapht.EdgeFactory<V,E>):78:false |==> true
7358:STD:<CALL>:<NO-OP>:org.jgrapht.graph.ParanoidGraph@addEdge(V,V,E):76:verifyAdd(edgeSet(), e) |==> <NO-OP>
7359:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.ParanoidGraph@addEdge(V,V,E):77:super.addEdge(sourceVertex, targetVertex, e) |==> false
7360:STD:<CALL>:<NO-OP>:org.jgrapht.graph.ParanoidGraph@addVertex(V):85:verifyAdd(vertexSet(), v) |==> <NO-OP>
7361:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.graph.ParanoidGraph@addVertex(V):86:super.addVertex(v) |==> false
7362:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.jgrapht.graph.ParanoidGraph@verifyAdd(java.util.Set<T>,T):92:o == t |==> false
7363:STD:<CONT>:<NO-OP>:org.jgrapht.graph.ParanoidGraph@verifyAdd(java.util.Set<T>,T):93:continue; |==> <NO-OP>
7364:ROR:!=(int,int):<(int,int):org.jgrapht.graph.ParanoidGraph@verifyAdd(java.util.Set<T>,T):95:o.hashCode() != t.hashCode() |==> o.hashCode() < t.hashCode()
7365:ROR:!=(int,int):>(int,int):org.jgrapht.graph.ParanoidGraph@verifyAdd(java.util.Set<T>,T):95:o.hashCode() != t.hashCode() |==> o.hashCode() > t.hashCode()
7366:ROR:!=(int,int):TRUE(int,int):org.jgrapht.graph.ParanoidGraph@verifyAdd(java.util.Set<T>,T):95:o.hashCode() != t.hashCode() |==> true
7367:COR:&&(boolean,boolean):==(boolean,boolean):org.jgrapht.graph.ParanoidGraph@verifyAdd(java.util.Set<T>,T):95:o.equals(t) && (o.hashCode() != t.hashCode()) |==> o.equals(t) == (o.hashCode() != t.hashCode())
7368:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.jgrapht.graph.ParanoidGraph@verifyAdd(java.util.Set<T>,T):95:o.equals(t) && (o.hashCode() != t.hashCode()) |==> false
7369:COR:&&(boolean,boolean):LHS(boolean,boolean):org.jgrapht.graph.ParanoidGraph@verifyAdd(java.util.Set<T>,T):95:o.equals(t) && (o.hashCode() != t.hashCode()) |==> o.equals(t)
7370:COR:&&(boolean,boolean):RHS(boolean,boolean):org.jgrapht.graph.ParanoidGraph@verifyAdd(java.util.Set<T>,T):95:o.equals(t) && (o.hashCode() != t.hashCode()) |==> (o.hashCode() != t.hashCode())
7371:LVR:TRUE:FALSE:org.jgrapht.graph.Pseudograph@<init>(org.jgrapht.EdgeFactory<V,E>):77:true |==> false
7372:LVR:TRUE:FALSE:org.jgrapht.graph.Pseudograph@<init>(org.jgrapht.EdgeFactory<V,E>):77:true |==> false
7373:EVR:<METHOD_INVOCATION(java.util.Set<E>)>:<DEFAULT>:org.jgrapht.graph.UndirectedGraphUnion@degreeOf(V):73:edgesOf(vertex) |==> null
7374:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.graph.UndirectedGraphUnion@degreeOf(V):74:res.size() |==> 0
7375:STD:<CALL>:<NO-OP>:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):85:assertVertexExist(vertex) |==> <NO-OP>
7376:LVR:0:POS:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):87:0 |==> 1
7377:LVR:0:NEG:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):87:0 |==> -1
7378:COR:containsEdge(e):TRUE:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):90:containsEdge(e) |==> false
7379:COR:containsEdge(e):FALSE:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):90:containsEdge(e) |==> true
7380:STD:<INC>:<NO-OP>:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):91:degree++ |==> <NO-OP>
7381:COR:getEdgeSource(e).equals(getEdgeTarget(e)):TRUE:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):93:getEdgeSource(e).equals(getEdgeTarget(e)) |==> false
7382:COR:getEdgeSource(e).equals(getEdgeTarget(e)):FALSE:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):93:getEdgeSource(e).equals(getEdgeTarget(e)) |==> true
7383:STD:<INC>:<NO-OP>:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):94:degree++ |==> <NO-OP>
7384:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.jgrapht.graph.UndirectedSubgraph@degreeOf(V):99:degree |==> 0
7385:EVR:<NEW_CLASS(java.util.ArrayDeque<V>)>:<DEFAULT>:org.jgrapht.traverse.BreadthFirstIterator:63:new ArrayDeque<V>() |==> null
7386:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.traverse.BreadthFirstIterator@isConnectedComponentExhausted():99:queue.isEmpty() |==> false
7387:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.BreadthFirstIterator@encounterVertex(V,E):107:putSeenData(vertex, null) |==> <NO-OP>
7388:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.BreadthFirstIterator@encounterVertex(V,E):108:queue.add(vertex) |==> <NO-OP>
7389:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.BreadthFirstIterator@provideNextVertex():123:queue.removeFirst() |==> null
7390:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator@<init>(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):123:this.queue = queue |==> <NO-OP>
7391:STD:<ASSIGN>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator@<init>(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):124:this.inDegreeMap = inDegreeMap |==> <NO-OP>
7392:COR:||(boolean,boolean):!=(boolean,boolean):org.jgrapht.traverse.TopologicalOrderIterator@<init>(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):128:dg.vertexSet().isEmpty() || !queue.isEmpty() |==> dg.vertexSet().isEmpty() != !queue.isEmpty()
7393:COR:||(boolean,boolean):LHS(boolean,boolean):org.jgrapht.traverse.TopologicalOrderIterator@<init>(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):128:dg.vertexSet().isEmpty() || !queue.isEmpty() |==> dg.vertexSet().isEmpty()
7394:COR:||(boolean,boolean):RHS(boolean,boolean):org.jgrapht.traverse.TopologicalOrderIterator@<init>(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):128:dg.vertexSet().isEmpty() || !queue.isEmpty() |==> !queue.isEmpty()
7395:COR:||(boolean,boolean):TRUE(boolean,boolean):org.jgrapht.traverse.TopologicalOrderIterator@<init>(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):128:dg.vertexSet().isEmpty() || !queue.isEmpty() |==> true
7396:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator@isConnectedComponentExhausted():149:queue.isEmpty() |==> false
7397:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator@encounterVertex(V,E):157:putSeenData(vertex, null) |==> <NO-OP>
7398:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator@encounterVertex(V,E):158:decrementInDegree(vertex) |==> <NO-OP>
7399:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator@encounterVertexAgain(V,E):166:decrementInDegree(vertex) |==> <NO-OP>
7400:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator@provideNextVertex():174:queue.remove() |==> null
7401:EVR:<METHOD_INVOCATION(org.jgrapht.util.ModifiableInteger)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):184:inDegreeMap.get(vertex) |==> null
7402:LVR:0:POS:org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):186:0 |==> 1
7403:LVR:0:NEG:org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):186:0 |==> -1
7404:ROR:>(int,int):!=(int,int):org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):186:inDegree.value > 0 |==> inDegree.value != 0
7405:ROR:>(int,int):>=(int,int):org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):186:inDegree.value > 0 |==> inDegree.value >= 0
7406:ROR:>(int,int):FALSE(int,int):org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):186:inDegree.value > 0 |==> false
7407:STD:<DEC>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):187:inDegree.value-- |==> <NO-OP>
7408:LVR:0:POS:org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):189:0 |==> 1
7409:LVR:0:NEG:org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):189:0 |==> -1
7410:ROR:==(int,int):<=(int,int):org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):189:inDegree.value == 0 |==> inDegree.value <= 0
7411:ROR:==(int,int):>=(int,int):org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):189:inDegree.value == 0 |==> inDegree.value >= 0
7412:ROR:==(int,int):FALSE(int,int):org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):189:inDegree.value == 0 |==> false
7413:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator@decrementInDegree(V):190:queue.offer(vertex) |==> <NO-OP>
7414:EVR:<METHOD_INVOCATION(java.util.Iterator<V>)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):211:dg.vertexSet().iterator() |==> null
7415:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):212:i.next() |==> null
7416:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):214:dg.inDegreeOf(vertex) |==> 0
7417:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):215:inDegreeMap.put(vertex, new ModifiableInteger(inDegree)) |==> <NO-OP>
7418:LVR:0:POS:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):217:0 |==> 1
7419:LVR:0:NEG:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):217:0 |==> -1
7420:ROR:==(int,int):<=(int,int):org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):217:inDegree == 0 |==> inDegree <= 0
7421:ROR:==(int,int):>=(int,int):org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):217:inDegree == 0 |==> inDegree >= 0
7422:ROR:==(int,int):FALSE(int,int):org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):217:inDegree == 0 |==> false
7423:STD:<CALL>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):218:queue.offer(vertex) |==> <NO-OP>
7424:COR:queue.isEmpty():TRUE:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):222:queue.isEmpty() |==> false
7425:COR:queue.isEmpty():FALSE:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):222:queue.isEmpty() |==> true
7426:EVR:<METHOD_INVOCATION(V)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator@initialize(org.jgrapht.DirectedGraph<V,E>,java.util.Queue<V>,java.util.Map<V,org.jgrapht.util.ModifiableInteger>):225:queue.peek() |==> null
7427:EVR:<METHOD_INVOCATION(T)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@element():243:getFirst() |==> null
7428:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@offer(T):248:add(o) |==> false
7429:COR:isEmpty():TRUE:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@peek():253:isEmpty() |==> false
7430:COR:isEmpty():FALSE:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@peek():253:isEmpty() |==> true
7431:STD:<RETURN>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@peek():254:return null; |==> <NO-OP>
7432:EVR:<METHOD_INVOCATION(T)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@peek():256:getFirst() |==> null
7433:COR:isEmpty():TRUE:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@poll():261:isEmpty() |==> false
7434:COR:isEmpty():FALSE:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@poll():261:isEmpty() |==> true
7435:STD:<RETURN>:<NO-OP>:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@poll():262:return null; |==> <NO-OP>
7436:EVR:<METHOD_INVOCATION(T)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@poll():264:removeFirst() |==> null
7437:EVR:<METHOD_INVOCATION(T)>:<DEFAULT>:org.jgrapht.traverse.TopologicalOrderIterator$LinkedListQueue@remove():269:removeFirst() |==> null
7438:EVR:<METHOD_INVOCATION(boolean)>:<DEFAULT>:org.jgrapht.util.ArrayUnenforcedSet@equals(java.lang.Object):81:new SetForEquality().equals(o) |==> false
7439:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.util.ArrayUnenforcedSet@hashCode():86:new SetForEquality().hashCode() |==> 0
7440:EVR:<METHOD_INVOCATION(java.util.Iterator<E>)>:<DEFAULT>:org.jgrapht.util.ArrayUnenforcedSet$SetForEquality@iterator():99:ArrayUnenforcedSet.this.iterator() |==> null
7441:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.jgrapht.util.ArrayUnenforcedSet$SetForEquality@size():104:ArrayUnenforcedSet.this.size() |==> 0
7442:LVR:POS:0:org.jgrapht.util.MathUtil@factorial(int):50:1 |==> 0
7443:LVR:POS:NEG:org.jgrapht.util.MathUtil@factorial(int):50:1 |==> -1
7444:LVR:POS:0:org.jgrapht.util.MathUtil@factorial(int):51:1 |==> 0
7445:LVR:POS:NEG:org.jgrapht.util.MathUtil@factorial(int):51:1 |==> -1
7446:ROR:<=(int,int):<(int,int):org.jgrapht.util.MathUtil@factorial(int):51:i <= N |==> i < N
7447:ROR:<=(int,int):==(int,int):org.jgrapht.util.MathUtil@factorial(int):51:i <= N |==> i == N
7448:ROR:<=(int,int):TRUE(int,int):org.jgrapht.util.MathUtil@factorial(int):51:i <= N |==> true
7449:AOR:*(long,long):%(long,long):org.jgrapht.util.MathUtil@factorial(int):52:multi * i |==> multi % i
7450:AOR:*(long,long):+(long,long):org.jgrapht.util.MathUtil@factorial(int):52:multi * i |==> multi + i
7451:AOR:*(long,long):-(long,long):org.jgrapht.util.MathUtil@factorial(int):52:multi * i |==> multi - i
7452:AOR:*(long,long):/(long,long):org.jgrapht.util.MathUtil@factorial(int):52:multi * i |==> multi / i
7453:STD:<ASSIGN>:<NO-OP>:org.jgrapht.util.MathUtil@factorial(int):52:multi = multi * i |==> <NO-OP>
7454:EVR:<IDENTIFIER(long)>:<DEFAULT>:org.jgrapht.util.MathUtil@factorial(int):54:multi |==> 0L
